{"title":"JavaScript中ECMAScript5中的数组方法。","slug":"twenty-three","date":"2020-05-06T13:59:25.000Z","updated":"2022-07-29T04:22:04.750Z","comments":true,"path":"api/articles/twenty-three.json","excerpt":"![](https://qny.aqingya.cn/img/37073a4791b24b428442d8a82fccc5d3 (1).jpg)","covers":["https://img-blog.csdnimg.cn/20200506213645655.png"],"content":"<p>![](<a href=\"https://qny.aqingya.cn/img/37073a4791b24b428442d8a82fccc5d3\">https://qny.aqingya.cn/img/37073a4791b24b428442d8a82fccc5d3</a> (1).jpg)</p>\n<span id=\"more\"></span>\n\n<p>但在开始详细介绍之前，很有必要对ECMAScript 5中的数组方法做一个概述。首先，大多数方法的第一个参数接收一个函数，并且对数组的每个元素(或一些元素)调用一次该函数。如果是稀疏数组，对不存在的元素不调用传递的函数。在大多数情况下，调用提供的函数使用三个参数:数组元素、元素的索引和数组本身。通常，只需要第一个参数值，可以忽略后两个参数。大多数ECMAScript 5数组方法的第一个参数是一个函数，第二个参数是可选的。如果有第二个参数，则调用的函数被看做是第二个参数的方法。也就是说，在调用函数时传递进去的第二个参数作为它的this关键字的值来使用。被调用的函数的返回值非常重要，但是不同的方法处理返回值的方式也不一样。ECMAScript 5中的数组方法都不会修改它们调用的原始数组。当然，传递给这些方法的函数是可以修改这些数组的。</p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>forEach()方法从头到尾遍历数组，每一个元素调用指定的函数。如上所述，传递的函数作为forEach()的第一个参数，然后forEach()使用三个参数调用该函数：数组元素、元素的索引和数组本身。如果只关心数组元素的值，可以编写只有一个参数的函数—额外的参数将忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum += x;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);    <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：forEach()无法在所有元素都传递给调用的函数之前终止遍历。也就是说，没有像for循环中使用的响应的break()语句。如果要提前终止，必须把forEach()方法放在一个try块中，并能抛出一个异常。如果forEach()调用的函数抛出foreach.break异常，循环会提前终止。</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>map()方法将调用的数组的每一个元素传递给指定的函数，并且返回一个数组，它包含该函数的返回值。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">b = a.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);    <span class=\"comment\">//  [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>传递给map()的函数的调用方式和传递给forEach()的函数的调用方式一样，但出传递给map()的函数应该有返回值。注意，map()返回的是一个新数组：它不修改调用的数组。如果是稀疏数组，返回的也是相同方式的稀疏数组：它具有相同的长度，相同的缺失元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, , <span class=\"literal\">undefined</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">b = a.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//  [2, 3, 4, empty, NaN, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>filter()方法返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回true或者false。调用判定函数就像调用forEach()和map()一样，如果返回值为true或者能转化为true的值，那么传递给判定函数的元素就是这个子集的成员，他将被添加到一个作为返回值的数组中。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">b = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)    <span class=\"comment\">//  [4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的。为了压缩稀疏数组的空缺，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, , , ]</span><br><span class=\"line\"><span class=\"keyword\">var</span> aa = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa);   <span class=\"comment\">//  [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>甚至，压缩空缺并删除Undefined和null元素，可以这样使用filter():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> aaa = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x !== <span class=\"literal\">undefined</span> &amp;&amp; x != <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aaa);    <span class=\"comment\">//   [1, 2, 3, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"every-和some\"><a href=\"#every-和some\" class=\"headerlink\" title=\"every()和some()\"></a>every()和some()</h2><p>every()和some()方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或者false。</p>\n<ol>\n<li>every()方法就像数学中的‘针对所有” 的量词:当且仅当针对数组中的所有元素调用判定函数都返回true,它才返回true :</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;));      <span class=\"comment\">// true  所有的值都小于10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;));      <span class=\"comment\">// false  不是所有的值都小于5</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>some()方法就像数学中的“存在” 的量词:当数组中至少有一个元素调用判定函数返回true,它就返回true;并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">// false   a中元素没有等于10的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">// true    a中包含有偶数</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：一旦every()和some()确认该返回什么值它们就会停止遍历数组元素。some()在判定函数第一次返回true后就返回true,但如果判定函数一直返回false， 它将会遍历整个数组。every( )恰好相反:它在判定函数第一次返回false后就返回false，但如果判定函数一直返回true，它将会遍历整个数组。注意，根据数学上的惯例，在空数组上调用时，every()返回true,some()返回false。</p>\n<h2 id=\"reduce-和reduceRight\"><a href=\"#reduce-和reduceRight\" class=\"headerlink\" title=\"reduce()和reduceRight()\"></a>reduce()和reduceRight()</h2><p>reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值，这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);     <span class=\"comment\">//  20  数组求和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> product = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(product); <span class=\"comment\">//  600   数组求积</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x &gt; y) ? x : y</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);     <span class=\"comment\">//  5     求最大值</span></span><br></pre></td></tr></table></figure>\n<p>reduce()需要两个参数，第一个是执行化简操作的函数，化简函数的任务就是用某种方法把两个值组合或化简为一个值，并返回化简后的值，在上面的例子中，函数通过加法、乘法、或取最大值的方法组合两个值。第二个（可选）的参数是一个传递给函数的初始值。</p>\n<p>reduce()使用的函数与forEach( )和map( )使用的函数不同。比较熟悉的是，数组元素、元素的索引和数组本身将作为第2~4个参数传递给函数。第一个参数是到目前为止的化简操作累积的结果。第一次调用函数时，第一个参数是一个初始值，它就是传递给reduce()的第二个参数。在接下来的调用中，这个值就是上一次化简函数的返回值。在上面的第一个例子中，第一次调用化简函数时的参数是0和1。将两者相加并返回1。再次调用时的参数是1和2，它返回3。然后它计算3+3=6、6+4=10， 最后计算10+5=15。最后的值是15，reduce()返回这个值。</p>\n<p>可能已经注意到了，上面第三次调用reduce()时只有一个参数:没有指定初始值。当不指定初始值调用reduce()时，它将使用数组的第一个 元素作为其初始值。这意味着第一次调用化简函数就使用了第一个和第二个数组元素作为其第一个和第二个参数。在上面求和与求积的例子中，可以省略初始值参数。</p>\n<p>在空数组上，不带初始值参数调用reduce()将导致类型错误异常。如果调用它的时候只有一个值——数组只有一个元素并且没有指定初始值，或者有一个空数组并且指定一个初始值——reduce()只是简单地返回那个值而不会调用化简函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<p>报错：<br><img src=\"https://img-blog.csdnimg.cn/20200506213645655.png\" alt=\"在这里插入图片描述\"></p>\n<p>reduceRight()的工作原理和reduce()-样，不同的是它按照数组索引从高到低(从右到左)处理数组，而不是从低到高。如果化简操作的优先顺序是从右到左，你可能想会使用它。</p>\n<h2 id=\"indexOf-和lastIndexOf\"><a href=\"#indexOf-和lastIndexOf\" class=\"headerlink\" title=\"indexOf()和lastIndexOf()\"></a>indexOf()和lastIndexOf()</h2><p>indexOf()和lastIndexOf()搜索整个数组中具有给定值的元素，返回找到第一个元素的索引或者如果没有找到就返回-1。indexOf()从头至尾搜索，而lastIndexOf()则反向搜索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"number\">1</span>));      <span class=\"comment\">//   1  a[1]是1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.lastIndexOf(<span class=\"number\">1</span>));  <span class=\"comment\">//   4  a[4]是1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"number\">4</span>));      <span class=\"comment\">//  -1  a中没有4</span></span><br></pre></td></tr></table></figure>\n<p>不同于本节描述的其他方法，index0f()和lastIndex0f()方法 不接收一个函数作为其参数。第一个参数是需要搜索的值，第二个参数是可选的:它指定数组中的一个索引，从那里开始搜索。如果省略该参数，index0f()从头开始搜索，而lastIndex0f()从末尾开始搜索。第二个参数也可以是负数，它代表相对数组末尾的偏移量，对于splice()方法:例如，- 1指定数组的最后一个元素。</p>\n<p>如下函数在一个数组中搜索指定的值并返回包含所有匹配的数组索引的一个数组。它展示了如何运用indexOf()的第二个参数来查找除了第一个以外匹配的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在数组a中查找所有出现的x，并且返回一个包含匹配索引的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">a, x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];             <span class=\"comment\">//将会返回的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = a.length;          <span class=\"comment\">//待搜索数组的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"number\">0</span>;                 <span class=\"comment\">//开始搜索的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pos &lt; len) &#123;          <span class=\"comment\">//循环搜索多个数组</span></span><br><span class=\"line\">        pos = a.indexOf(x, pos); <span class=\"comment\">//搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos === -<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;   <span class=\"comment\">//未找到，就完成搜索</span></span><br><span class=\"line\">        result.push(pos);        <span class=\"comment\">//否则，在数组中存储索引</span></span><br><span class=\"line\">        pos++;                   <span class=\"comment\">//并从下一个位置开始</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;               <span class=\"comment\">//返回包含索引的数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">32</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(find(a, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：字符串也有indexOf()和lastIndexOf()方法，它们和数组方法的功能类似。<br><br><br><br><br>愿你的坚持终有收获。<br><br><br><br></p>\n","more":"<p>但在开始详细介绍之前，很有必要对ECMAScript 5中的数组方法做一个概述。首先，大多数方法的第一个参数接收一个函数，并且对数组的每个元素(或一些元素)调用一次该函数。如果是稀疏数组，对不存在的元素不调用传递的函数。在大多数情况下，调用提供的函数使用三个参数:数组元素、元素的索引和数组本身。通常，只需要第一个参数值，可以忽略后两个参数。大多数ECMAScript 5数组方法的第一个参数是一个函数，第二个参数是可选的。如果有第二个参数，则调用的函数被看做是第二个参数的方法。也就是说，在调用函数时传递进去的第二个参数作为它的this关键字的值来使用。被调用的函数的返回值非常重要，但是不同的方法处理返回值的方式也不一样。ECMAScript 5中的数组方法都不会修改它们调用的原始数组。当然，传递给这些方法的函数是可以修改这些数组的。</p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>forEach()方法从头到尾遍历数组，每一个元素调用指定的函数。如上所述，传递的函数作为forEach()的第一个参数，然后forEach()使用三个参数调用该函数：数组元素、元素的索引和数组本身。如果只关心数组元素的值，可以编写只有一个参数的函数—额外的参数将忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum += x;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);    <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：forEach()无法在所有元素都传递给调用的函数之前终止遍历。也就是说，没有像for循环中使用的响应的break()语句。如果要提前终止，必须把forEach()方法放在一个try块中，并能抛出一个异常。如果forEach()调用的函数抛出foreach.break异常，循环会提前终止。</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>map()方法将调用的数组的每一个元素传递给指定的函数，并且返回一个数组，它包含该函数的返回值。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">b = a.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);    <span class=\"comment\">//  [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>传递给map()的函数的调用方式和传递给forEach()的函数的调用方式一样，但出传递给map()的函数应该有返回值。注意，map()返回的是一个新数组：它不修改调用的数组。如果是稀疏数组，返回的也是相同方式的稀疏数组：它具有相同的长度，相同的缺失元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, , <span class=\"literal\">undefined</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">b = a.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">//  [2, 3, 4, empty, NaN, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>filter()方法返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回true或者false。调用判定函数就像调用forEach()和map()一样，如果返回值为true或者能转化为true的值，那么传递给判定函数的元素就是这个子集的成员，他将被添加到一个作为返回值的数组中。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">b = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)    <span class=\"comment\">//  [4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的。为了压缩稀疏数组的空缺，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, , , ]</span><br><span class=\"line\"><span class=\"keyword\">var</span> aa = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa);   <span class=\"comment\">//  [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>甚至，压缩空缺并删除Undefined和null元素，可以这样使用filter():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> aaa = a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x !== <span class=\"literal\">undefined</span> &amp;&amp; x != <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aaa);    <span class=\"comment\">//   [1, 2, 3, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"every-和some\"><a href=\"#every-和some\" class=\"headerlink\" title=\"every()和some()\"></a>every()和some()</h2><p>every()和some()方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或者false。</p>\n<ol>\n<li>every()方法就像数学中的‘针对所有” 的量词:当且仅当针对数组中的所有元素调用判定函数都返回true,它才返回true :</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;));      <span class=\"comment\">// true  所有的值都小于10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;));      <span class=\"comment\">// false  不是所有的值都小于5</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>some()方法就像数学中的“存在” 的量词:当数组中至少有一个元素调用判定函数返回true,它就返回true;并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">// false   a中元素没有等于10的</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">// true    a中包含有偶数</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：一旦every()和some()确认该返回什么值它们就会停止遍历数组元素。some()在判定函数第一次返回true后就返回true,但如果判定函数一直返回false， 它将会遍历整个数组。every( )恰好相反:它在判定函数第一次返回false后就返回false，但如果判定函数一直返回true，它将会遍历整个数组。注意，根据数学上的惯例，在空数组上调用时，every()返回true,some()返回false。</p>\n<h2 id=\"reduce-和reduceRight\"><a href=\"#reduce-和reduceRight\" class=\"headerlink\" title=\"reduce()和reduceRight()\"></a>reduce()和reduceRight()</h2><p>reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值，这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);     <span class=\"comment\">//  20  数组求和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> product = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y;</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(product); <span class=\"comment\">//  600   数组求积</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x &gt; y) ? x : y</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);     <span class=\"comment\">//  5     求最大值</span></span><br></pre></td></tr></table></figure>\n<p>reduce()需要两个参数，第一个是执行化简操作的函数，化简函数的任务就是用某种方法把两个值组合或化简为一个值，并返回化简后的值，在上面的例子中，函数通过加法、乘法、或取最大值的方法组合两个值。第二个（可选）的参数是一个传递给函数的初始值。</p>\n<p>reduce()使用的函数与forEach( )和map( )使用的函数不同。比较熟悉的是，数组元素、元素的索引和数组本身将作为第2~4个参数传递给函数。第一个参数是到目前为止的化简操作累积的结果。第一次调用函数时，第一个参数是一个初始值，它就是传递给reduce()的第二个参数。在接下来的调用中，这个值就是上一次化简函数的返回值。在上面的第一个例子中，第一次调用化简函数时的参数是0和1。将两者相加并返回1。再次调用时的参数是1和2，它返回3。然后它计算3+3=6、6+4=10， 最后计算10+5=15。最后的值是15，reduce()返回这个值。</p>\n<p>可能已经注意到了，上面第三次调用reduce()时只有一个参数:没有指定初始值。当不指定初始值调用reduce()时，它将使用数组的第一个 元素作为其初始值。这意味着第一次调用化简函数就使用了第一个和第二个数组元素作为其第一个和第二个参数。在上面求和与求积的例子中，可以省略初始值参数。</p>\n<p>在空数组上，不带初始值参数调用reduce()将导致类型错误异常。如果调用它的时候只有一个值——数组只有一个元素并且没有指定初始值，或者有一个空数组并且指定一个初始值——reduce()只是简单地返回那个值而不会调用化简函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<p>报错：<br><img src=\"https://img-blog.csdnimg.cn/20200506213645655.png\" alt=\"在这里插入图片描述\"></p>\n<p>reduceRight()的工作原理和reduce()-样，不同的是它按照数组索引从高到低(从右到左)处理数组，而不是从低到高。如果化简操作的优先顺序是从右到左，你可能想会使用它。</p>\n<h2 id=\"indexOf-和lastIndexOf\"><a href=\"#indexOf-和lastIndexOf\" class=\"headerlink\" title=\"indexOf()和lastIndexOf()\"></a>indexOf()和lastIndexOf()</h2><p>indexOf()和lastIndexOf()搜索整个数组中具有给定值的元素，返回找到第一个元素的索引或者如果没有找到就返回-1。indexOf()从头至尾搜索，而lastIndexOf()则反向搜索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"number\">1</span>));      <span class=\"comment\">//   1  a[1]是1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.lastIndexOf(<span class=\"number\">1</span>));  <span class=\"comment\">//   4  a[4]是1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"number\">4</span>));      <span class=\"comment\">//  -1  a中没有4</span></span><br></pre></td></tr></table></figure>\n<p>不同于本节描述的其他方法，index0f()和lastIndex0f()方法 不接收一个函数作为其参数。第一个参数是需要搜索的值，第二个参数是可选的:它指定数组中的一个索引，从那里开始搜索。如果省略该参数，index0f()从头开始搜索，而lastIndex0f()从末尾开始搜索。第二个参数也可以是负数，它代表相对数组末尾的偏移量，对于splice()方法:例如，- 1指定数组的最后一个元素。</p>\n<p>如下函数在一个数组中搜索指定的值并返回包含所有匹配的数组索引的一个数组。它展示了如何运用indexOf()的第二个参数来查找除了第一个以外匹配的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在数组a中查找所有出现的x，并且返回一个包含匹配索引的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">a, x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];             <span class=\"comment\">//将会返回的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = a.length;          <span class=\"comment\">//待搜索数组的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"number\">0</span>;                 <span class=\"comment\">//开始搜索的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pos &lt; len) &#123;          <span class=\"comment\">//循环搜索多个数组</span></span><br><span class=\"line\">        pos = a.indexOf(x, pos); <span class=\"comment\">//搜索</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos === -<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;   <span class=\"comment\">//未找到，就完成搜索</span></span><br><span class=\"line\">        result.push(pos);        <span class=\"comment\">//否则，在数组中存储索引</span></span><br><span class=\"line\">        pos++;                   <span class=\"comment\">//并从下一个位置开始</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;               <span class=\"comment\">//返回包含索引的数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">32</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(find(a, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：字符串也有indexOf()和lastIndexOf()方法，它们和数组方法的功能类似。<br><br><br><br><br>愿你的坚持终有收获。<br><br><br><br></p>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}