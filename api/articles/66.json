{"title":"Vue再现WebPack","slug":"66","date":"2020-07-26T11:26:00.000Z","updated":"2022-07-29T04:22:04.768Z","comments":true,"path":"api/articles/66.json","excerpt":" [Figure] ","covers":["https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.9/photo/IMG_0083.JPG","https://qny.aqingya.cn/img/20200726153124.png","https://qny.aqingya.cn/img/20200726153134.png","https://qny.aqingya.cn/img/20200726153141.png","https://qny.aqingya.cn/img/20200726153500.png","https://qny.aqingya.cn/img/20200726153702.png","https://qny.aqingya.cn/img/20200726154124.png","C:\\Users\\dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200726154148234.png","https://qny.aqingya.cn/img/20200726161415.png","https://qny.aqingya.cn/img/20200726161743.png","https://qny.aqingya.cn/img/20200726161711.png","https://qny.aqingya.cn/img/20200726175539.png","C:\\Users\\dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200727234903274.png","https://qny.aqingya.cn/img/20200727232307.png","https://qny.aqingya.cn/img/20200727234826.png","https://qny.aqingya.cn/img/20200728083155.png","https://qny.aqingya.cn/img/20200728090409.png","https://qny.aqingya.cn/img/20200728113347.png","https://qny.aqingya.cn/img/20200728113421.png","https://qny.aqingya.cn/img/20200728112645.png","https://qny.aqingya.cn/img/20200728113421.png","https://qny.aqingya.cn/img/20200728113253.png","https://qny.aqingya.cn/img/20200728122642.png","https://qny.aqingya.cn/img/20200728122553.png","https://qny.aqingya.cn/img/20200728122913.png","https://qny.aqingya.cn/img/20200728123726.png","https://qny.aqingya.cn/img/20200728143524.png","https://qny.aqingya.cn/img/20200728144722.png","https://qny.aqingya.cn/img/20200728143958.png","https://qny.aqingya.cn/img/image-20200728145937854.png","https://qny.aqingya.cn/img/20200728150324.png","https://qny.aqingya.cn/img/20200728150505.png","https://qny.aqingya.cn/img/20200728151628.png","https://qny.aqingya.cn/img/image-20200728151810700.png","https://qny.aqingya.cn/img/20200728202019.png","https://qny.aqingya.cn/img/20200728202043.png","https://qny.aqingya.cn/img/20200728205053.png","https://qny.aqingya.cn/img/20200728212923.png","https://qny.aqingya.cn/img/20200728224311.png"],"content":"<p><img src=\"https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.9/photo/IMG_0083.JPG\"></p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"Vue在现WebPack\"><a href=\"#Vue在现WebPack\" class=\"headerlink\" title=\"Vue在现WebPack\"></a>Vue在现WebPack</h1><h2 id=\"webpack安装\"><a href=\"#webpack安装\" class=\"headerlink\" title=\"webpack安装\"></a>webpack安装</h2><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm</p>\n<p>查看自己的node版本：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153124.png\"></p>\n<p>全局安装webpack(这里我先指定版本号3.6.0，因为vue cli2依赖该版本)</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153134.png\"></p>\n<p>局部安装webpack（后续才需要）</p>\n<p>–save-dev`是开发时依赖，项目打包后不需要继续使用的。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153141.png\"></p>\n<p>为什么全局安装后，还需要局部安装呢？</p>\n<p>在终端直接执行webpack命令，使用的全局安装的webpack</p>\n<p>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a><strong>准备工作</strong></h2><p>我们创建如下文件和文件夹：</p>\n<p><strong>文件和文件夹解析：</strong></p>\n<p>bulid文件夹：用于存放之后打包的文件</p>\n<p>src文件夹：用于存放我们写的源文件</p>\n<p>index.js：项目的入口文件。具体内容查看下面详情。</p>\n<p>math.js：定义了一些数学工具函数，可以在其他地方引用，并且使用。具体内容查看下面的详情。</p>\n<p>index.html：浏览器打开展示的首页html</p>\n<p>package.json：通过npm init生成的，npm包管理的文件（暂时没有用上，后面才会用上）</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153500.png\"></p>\n<h2 id=\"配置一下入口和出口\"><a href=\"#配置一下入口和出口\" class=\"headerlink\" title=\"配置一下入口和出口\"></a>配置一下入口和出口</h2><p>也就是在webpack.config.js 文件中配置</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153702.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>); <span class=\"comment\">// node 内置核心模块，用来处理路径问题。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123; <span class=\"comment\">// 输出配置</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;./built.js&#x27;</span>, <span class=\"comment\">// 输出文件名</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: resolve(__dirname, <span class=\"string\">&#x27;build/js&#x27;</span>) <span class=\"comment\">// 输出文件路径配置</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"局部安装webpack\"><a href=\"#局部安装webpack\" class=\"headerlink\" title=\"局部安装webpack\"></a>局部安装webpack</h2><p>目前，我们使用的webpack是全局的webpack，如果我们想使用局部来打包呢？</p>\n<ul>\n<li><p>因为一个项目往往依赖特定的webpack版本，全局的版本可能很这个项目的webpack版本不一致，导出打包出现问题。</p>\n</li>\n<li><p>所以通常一个项目，都有自己局部的webpack。</p>\n</li>\n</ul>\n<p>第一步，项目中需要安装自己局部的webpack</p>\n<ul>\n<li><p>这里我们让局部安装webpack3.6.0</p>\n</li>\n<li><p>Vue CLI3中已经升级到webpack4，但是它将配置文件隐藏了起来，所以查看起来不是很方便。</p>\n</li>\n</ul>\n<p><img src=\"https://qny.aqingya.cn/img/20200726154124.png\"></p>\n<p>第二步，通过node_modules/.bin/webpack启动webpack打包.</p>\n<p><img src=\"C:\\Users\\dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200726154148234.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726161415.png\"></p>\n<h2 id=\"package-json中定义启动\"><a href=\"#package-json中定义启动\" class=\"headerlink\" title=\"package.json中定义启动\"></a><strong>package.json中定义启动</strong></h2><p>每次执行都敲这么一长串有没有觉得不方便呢？</p>\n<p>OK，我们可以在<code>package.json</code>的<code>scripts</code>中定义自己的执行脚本。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726161743.png\"></p>\n<p><span style=\"color:red\"><strong>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</strong></span></p>\n<p>首先，<span style=\"color:red\"><strong>会寻找本地的node_modules/.bin路径中对应的命令。</strong></span></p>\n<p><span style=\"color:red\"><strong>如果没有找到，会去全局的环境变量中寻找。</strong></span></p>\n<p>如何执行我们的build指令呢？</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726161711.png\"></p>\n<h2 id=\"css-loader-和-style-loader的使用\"><a href=\"#css-loader-和-style-loader的使用\" class=\"headerlink\" title=\"css-loader 和 style-loader的使用\"></a>css-loader 和 <strong>style-loader</strong>的使用</h2><p>loader是webpack中一个非常核心的概念。</p>\n<p>webpack用来做什么呢？</p>\n<p>&emsp;&emsp;在我们之前的实例中，我们主要是用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。</p>\n<p>&emsp;&emsp;但是，在开发中我们不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。</p>\n<p>&emsp;&emsp;对于webpack本身的能力来说，对于这些转化是不支持的。</p>\n<p>那怎么办呢？给webpack扩展对应的loader就可以啦。</p>\n<p><strong>loader使用过程：</strong></p>\n<p><strong>&emsp;&emsp;步骤一：通过npm安装需要使用的loader</strong></p>\n<p><strong>&emsp;&emsp;步骤二：在webpack.config.js中的modules关键字下进行配置</strong></p>\n<br>\n\n<p><span style=\"color:red\"><strong>css-loader只负责加载css文件但是并不负责将css具体样式嵌入到文档中。</strong></span></p>\n<p><span style=\"color:red\"><strong>style-loader负责将css具体样式嵌入到文档中</strong></span></p>\n<br>\n\n<p><strong>安装css-loader 和 style-loader</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev css-loader@2.0.2 style-loader@0.23.1</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>如果报以下的错误：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726175539.png\"></p>\n<p>这说明css-loader版本过高的，我们安装较低的css-loader版本即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm uninstall css-loader（卸载当前版本）</span><br><span class=\"line\">cnpm install css-loader@&lt;版本号&gt; -D</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"less文件处理-–-less-loader\"><a href=\"#less文件处理-–-less-loader\" class=\"headerlink\" title=\"less文件处理 – less-loader\"></a>less文件处理 – <strong>less-loader</strong></h2><p>首先，还是需要安装对应的loader</p>\n<p>注意：我们这里还安装了less，因为webpack会使用less对less文件进行编译</p>\n<p>安装插件（<span style=\"color:red\"><strong>注意版本的问题</strong></span>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev less-loader@4.1.0 less@3.9.0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其次，修改对应的配置文件</p>\n<p>添加一个rules选项，用于处理.less文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;style-loader&quot;</span> <span class=\"comment\">// creates style nodes from JS strings</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;css-loader&quot;</span> <span class=\"comment\">// translates CSS into CommonJS</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;less-loader&quot;</span> <span class=\"comment\">// compiles Less to CSS</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"图片文件资源处理\"><a href=\"#图片文件资源处理\" class=\"headerlink\" title=\"图片文件资源处理\"></a>图片文件资源处理</h2><br>\n\n<p>安装url-loade</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev url-loader@1.1.2</span><br></pre></td></tr></table></figure>\n\n<p>安装file-loade</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev  file-loader@3.0.1 </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200727234903274.png\" alt=\"image-20200727234903274\"></p>\n<p>css文件中引用图片。</p>\n<p>修改webpack.config.js配置文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">limit</span>: <span class=\"number\">8</span> * <span class=\"number\">1024</span>, <span class=\"comment\">//自己定义的值</span></span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;img/[name].[hash:8].[ext]&#x27;</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当图片小于8kb时，这也是limit属性的作用，对图片进行base64编码</p>\n<blockquote>\n<p>图片大小小于8kb，就会被base64处理<br>优点: 减少请求数量（减轻服务器压力）<br>缺点：图片体积会更大（文件请求速度更慢）</p>\n</blockquote>\n<p>如果大于8kb，会通过file-loader进行处理</p>\n<p>再次打包，就会发现build文件夹下多了一个图片文件</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200727232307.png\"></p>\n<br>\n\n<p>我们发现webpack自动帮助我们生成一个非常长的名字</p>\n<p>&emsp;&emsp;这是一个32位hash值，目的是防止名字重复</p>\n<p>&emsp;&emsp;但是，真实开发中，我们可能对打包的图片名字有一定的要求</p>\n<p>&emsp;&emsp;比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复 </p>\n<p>所以，我们可以在options中添加上如下选项：</p>\n<p>&emsp;&emsp;<strong>img：</strong>文件要打包到的文件夹</p>\n<p>&emsp;&emsp;<strong>name：</strong>获取图片原来的名字，放在该位置</p>\n<p>&emsp;&emsp;<strong>hash:8</strong>：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</p>\n<p>&emsp;&emsp;<strong>ext</strong>：使用图片原来的扩展名</p>\n<br>\n\n<p>但是，我们发现图片并没有显示出来，这是因为图片使用的路径不正确</p>\n<p>&emsp;&emsp;默认情况下，webpack会将生成的路径直接返回给使用者</p>\n<p>&emsp;&emsp;但是，我们整个程序是打包在build文件夹下的，所以这里我们需要在路径下再添加一个../build/（<strong>后续我们还有其他的方式）</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200727234826.png\"></p>\n<br>\n\n\n\n<h2 id=\"对ES6语法兼容性处理\"><a href=\"#对ES6语法兼容性处理\" class=\"headerlink\" title=\"对ES6语法兼容性处理\"></a><strong>对ES6语法兼容性处理</strong></h2><p>如果你仔细阅读webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728083155.png\"></p>\n<p>在前面我们说过，如果希望将ES6的语法转成ES5，那么就需要使用babel。</p>\n<p>而在webpack中，我们直接使用babel对应的loader就可以了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev babel-loader@7.1.5</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev babel-core@6.26.3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev babel-preset-es2015@6.24.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置webpac.config.js 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">       <span class=\"comment\">// 排查以下文件，他们不能进行随便的转化</span></span><br><span class=\"line\">       exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">       use: &#123;</span><br><span class=\"line\">         <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">           <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>重新打包，查看built.js文件，发现其中的内容变成了ES5的语法</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728090409.png\"></p>\n<p>这个是对就是语法的一些简单的转化，如果想转化一些高级的es6语法如：promise高级语法不能转换。详细请看</p>\n<p><a href=\"https://aqingya.cn/2020/07/15/54/#1-5-js-%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86\">详细请看这里</a></p>\n<br>\n\n<h2 id=\"webpack-配置Vue\"><a href=\"#webpack-配置Vue\" class=\"headerlink\" title=\"webpack 配置Vue\"></a>webpack 配置Vue</h2><h3 id=\"在webpack中引入vue-js\"><a href=\"#在webpack中引入vue-js\" class=\"headerlink\" title=\"在webpack中引入vue.js\"></a>在webpack中引入vue.js</h3><p>我们会使用Vuejs进行开发，而且会以特殊的文件来组织vue的组件。所以，下面我们来学习一下如何在我们的webpack环境中集成Vuejs。</p>\n<p>我们希望在项目中使用Vuejs，那么必然需要对其有依赖，所以需要先进行安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install vue --save</span><br></pre></td></tr></table></figure>\n\n<p>为了兼容版本我们使用<a href=\"mailto:&#x76;&#117;&#101;&#64;&#50;&#x2e;&#x35;&#46;&#50;&#49;\">&#x76;&#117;&#101;&#64;&#50;&#x2e;&#x35;&#46;&#50;&#49;</a>版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install vue@2.5.21 --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：因为我们后续是在实际项目中也会使用vue的，所以并不是开发时依赖</strong> <code>--save-dev</code> 是开发依赖</p>\n<br>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200728113347.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728113421.png\"></p>\n<p>修改完成后，重新打包，运行程序：</p>\n<p>打包过程没有任何错误(因为只是多打包了一个vue的js文件而已)</p>\n<p>但是运行程序，没有出现想要的效果，而且浏览器中有报错</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728112645.png\"></p>\n<p>这个错误说的是我们使用的是runtime-only版本的Vue</p>\n<p><strong>runtime-only  ：代码中不可以有任何的template。</strong></p>\n<p><strong>runtime-compiler：代码中可以有template，因为有compiler 可以用于编译template。</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728113421.png\"></p>\n<p>在html中使用的div 就是vue实例的template。所以会报错。</p>\n<br>\n\n<p>这里我只说解决方案：<a href=\"http://cn.vuejs.org/v2/guide/installation.html\">Vue</a><a href=\"http://cn.vuejs.org/v2/guide/installation.html\">不同版本构建</a>，后续我具体讲解runtime-only和runtime-compiler的区别。</p>\n<p>所以我们修改webpack的配置，添加如下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span> <span class=\"comment\">// 用 webpack 1 时需用 &#x27;vue/dist/vue.common.js&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新打包。编译运行.</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728113253.png\"></p>\n<p>然后我们就可以愉快在webpack中使用vue啦😀。</p>\n<br>\n\n<h3 id=\"el-和-template-区别（一）\"><a href=\"#el-和-template-区别（一）\" class=\"headerlink\" title=\"el 和 template 区别（一）\"></a><strong>el 和 template 区别（一）</strong></h3><p>正常运行之后，我们来考虑另外一个问题：</p>\n<p>&emsp;&emsp;如果我们希望将data中的数据显示在界面中，就必须是修改index.html。</p>\n<p>&emsp;&emsp;如果我们后面自定义了组件，也必须修改index.html来使用组件。</p>\n<p>&emsp;&emsp;但是html模板在之后的开发中，我并不希望手动的来频繁修改，是否可以做到呢？</p>\n<br>\n\n<p>定义template属性：</p>\n<p>&emsp;<strong>&emsp;在前面的Vue实例中，我们定义了 el 属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</strong>。</p>\n<p>&emsp;<strong>&emsp;这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div的元素</strong></p>\n<p>&emsp;&emsp;但是如果我依然希望在其中显示的内容，应该怎么处理呢？</p>\n<br>\n\n<p>之前index.html中的#app进行绑定，填写相关的代码模板</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728122642.png\"></p>\n<p>现在我们可以在vue的实例中定义一个template属性，代码如下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728122553.png\"></p>\n<p>然后在index.html中的#app什么什么都不要填写。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728122913.png\"></p>\n<p>这样的话，<span style=\"color:red\"><strong>在同时有 el 和 template 的情况下</strong></span>，我们运行编译的时候，vue的内部会将 template 整体替换 我们在index.html 中的vue实例。如：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728123726.png\"></p>\n<br>\n\n\n\n<h3 id=\"el和templat区别（二）\"><a href=\"#el和templat区别（二）\" class=\"headerlink\" title=\"el和templat区别（二）\"></a><strong>el和templat区别（二）</strong></h3><p>el 和template模板的关系是什么呢？</p>\n<p><strong>在我们之前的学习中，我们知道el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。</strong></p>\n<p><strong>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</strong></p>\n<p>这样做有什么好处呢？</p>\n<p>这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可</p>\n<br>\n\n<p>但是，书写template模块非常麻烦怎么办呢？</p>\n<p>没有关系，稍后我们会将template模板中的内容进行抽离。</p>\n<p>会分成三部分书写：template、script、style，结构变得非常清晰。</p>\n<br>\n\n<h3 id=\"vue-文件封装处理\"><a href=\"#vue-文件封装处理\" class=\"headerlink\" title=\".vue 文件封装处理\"></a>.vue 文件封装处理</h3><p>vue-loader 以及 vue-template-compiler 帮助我们处理。</p>\n<p>安装vue-loader和vue-template-compiler</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建 .vue 文件</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728143524.png\"></p>\n<p>在index.js 入口文件中：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728144722.png\"></p>\n<p>修改webpack.config.js的配置文件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728143958.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [ <span class=\"comment\">//配置插件的节点，所有插件都要在这里配置</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> VueLoaderPlugin()</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"在组件中简单使用组件（简称套娃）\"><a href=\"#在组件中简单使用组件（简称套娃）\" class=\"headerlink\" title=\"在组件中简单使用组件（简称套娃）\"></a>在组件中简单使用组件（简称套娃）</h3><p>新建一个Cpn.vue文件</p>\n<p><img src=\"https://qny.aqingya.cn/img/image-20200728145937854.png\"></p>\n<p>在 App.vue 中 配置如下</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728150324.png\"></p>\n<p>编译运行：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728150505.png\"></p>\n<br>\n\n<h3 id=\"省略引入文件的后缀名\"><a href=\"#省略引入文件的后缀名\" class=\"headerlink\" title=\"省略引入文件的后缀名\"></a>省略引入文件的后缀名</h3><p>当我们引入一下文件的时候，会这样写</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728151628.png\"></p>\n<p>有时候我们不想写文件的后缀名，可以进行如下配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置 省略文件后缀名</span></span><br><span class=\"line\">  <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>],  </span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样我们就不用写文件的后缀名啦</p>\n<p><img src=\"https://qny.aqingya.cn/img/image-20200728151810700.png\"></p>\n<br>\n\n<h2 id=\"plugin-的使用\"><a href=\"#plugin-的使用\" class=\"headerlink\" title=\"plugin 的使用\"></a>plugin 的使用</h2><ul>\n<li><p>plugin是什么？</p>\n<ul>\n<li>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</li>\n<li>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</li>\n</ul>\n</li>\n<li><p>loader和plugin区别</p>\n<ul>\n<li><strong>loader主要用于转换某些类型的模块，它是一个转换器</strong>。</li>\n<li><strong>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</strong></li>\n</ul>\n</li>\n<li><p>plugin的使用过程：</p>\n<ul>\n<li>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li>\n<li>步骤二：在webpack.config.js中的plugins中配置插件。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"添加版权的Plugin\"><a href=\"#添加版权的Plugin\" class=\"headerlink\" title=\"添加版权的Plugin\"></a>添加版权的Plugin</h3><p>为打包的文件添加版权声明，该插件名字叫BannerPlugin，属于webpack自带的插件。</p>\n<p>按照下面的方式来修改webpack.config.js的文件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728202019.png\"></p>\n<p>重新打包程序：查看bundle.js文件的头部，看到如下信息</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728202043.png\"></p>\n<br>\n\n<h3 id=\"打包html资源的plugin\"><a href=\"#打包html资源的plugin\" class=\"headerlink\" title=\"打包html资源的plugin\"></a>打包html资源的plugin</h3><p><a href=\"https://aqingya.cn/2020/07/14/53/#2-4-%E6%89%93%E5%8C%85%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90\">传送门1</a>  <a href=\"https://aqingya.cn/2020/07/15/54/#1-7-HTML-%E5%8E%8B%E7%BC%A9\">传送门2</a></p>\n<ul>\n<li><p>目前，我们的index.html文件是存放在项目的根目录下的。</p>\n<ul>\n<li>我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。</li>\n<li>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件</li>\n</ul>\n</li>\n<li><p>HtmlWebpackPlugin插件可以为我们做这些事情：</p>\n<ul>\n<li>自动生成一个index.html文件(可以指定模板来生成)</li>\n<li>将打包的js文件，自动通过script标签插入到body中</li>\n</ul>\n</li>\n</ul>\n<p>安装HtmlWebpackPlugin插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install html-webpack-plugin@3.2.0 --save-dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用插件，修改webpack.config.js文件中plugins部分的内容如下：<ul>\n<li>这里的template表示根据什么模板来生成index.html</li>\n<li>另外，我们需要删除之前在output中添加的publicPath属性</li>\n<li>否则插入的script标签中的src可能会有问题</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://qny.aqingya.cn/img/20200728205053.png\"></p>\n<p><strong><span style=\"color:red\">html-webpack-plugin</span></strong><br><span style=\"color:red\">&emsp;&emsp;功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br><span style=\"color:red\">&emsp;&emsp;需求：需要有结构的HTML文件</span></p>\n<p><code>template: &quot;./src/index.html&quot;&lt;/span&gt;</code></p>\n<p><span style=\"color:red\">&emsp;&emsp;复制 ‘./src/index.html’ 文件，并自动引入打包输出的所有资源（JS/CSS）</span></p>\n<br>\n\n<h3 id=\"js压缩的Plugin\"><a href=\"#js压缩的Plugin\" class=\"headerlink\" title=\"js压缩的Plugin\"></a><strong>js压缩的Plugin</strong></h3><p><span style=\"color:red\"><strong>注意，在webpack4之后，只要我们将生产模式设置为生产环境， <code>mode: &#39;production&#39;</code> 它就会自动压缩js代码。</strong></span> </p>\n<p><span style=\"background-color:yellow\">开发阶段不建议使用 js 压缩 不方便我们来调试</span> </p>\n<p>在项目发布之前，我们必然需要对js等文件进行压缩处理</p>\n<p>这里，我们就对打包的js文件进行压缩</p>\n<p>我们使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>修改webpack.config.js文件，使用插件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728212923.png\"></p>\n<br>\n\n\n\n<h2 id=\"搭建本地服务器-dev-server\"><a href=\"#搭建本地服务器-dev-server\" class=\"headerlink\" title=\"搭建本地服务器 dev-server\"></a><strong>搭建本地服务器</strong> dev-server</h2><p><a href=\"https://aqingya.cn/2020/07/14/53/#2-6-devserver\">传送门</a></p>\n<br>\n\n<p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p>\n<p>不过它是一个单独的模块，在webpack中使用之前需要先安装它</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev webpack-dev-server@2.9.1</span><br></pre></td></tr></table></figure>\n\n<p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：</p>\n<ul>\n<li><p>contentBase：项目构建后路径，为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写build</p>\n</li>\n<li><p>port：端口号</p>\n</li>\n<li><p>open：值为true的时候，编译运行的时候，自动打开浏览器。</p>\n</li>\n</ul>\n<p><img src=\"https://qny.aqingya.cn/img/20200728224311.png\"></p>\n","more":"<h1 id=\"Vue在现WebPack\"><a href=\"#Vue在现WebPack\" class=\"headerlink\" title=\"Vue在现WebPack\"></a>Vue在现WebPack</h1><h2 id=\"webpack安装\"><a href=\"#webpack安装\" class=\"headerlink\" title=\"webpack安装\"></a>webpack安装</h2><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm</p>\n<p>查看自己的node版本：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153124.png\"></p>\n<p>全局安装webpack(这里我先指定版本号3.6.0，因为vue cli2依赖该版本)</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153134.png\"></p>\n<p>局部安装webpack（后续才需要）</p>\n<p>–save-dev`是开发时依赖，项目打包后不需要继续使用的。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153141.png\"></p>\n<p>为什么全局安装后，还需要局部安装呢？</p>\n<p>在终端直接执行webpack命令，使用的全局安装的webpack</p>\n<p>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a><strong>准备工作</strong></h2><p>我们创建如下文件和文件夹：</p>\n<p><strong>文件和文件夹解析：</strong></p>\n<p>bulid文件夹：用于存放之后打包的文件</p>\n<p>src文件夹：用于存放我们写的源文件</p>\n<p>index.js：项目的入口文件。具体内容查看下面详情。</p>\n<p>math.js：定义了一些数学工具函数，可以在其他地方引用，并且使用。具体内容查看下面的详情。</p>\n<p>index.html：浏览器打开展示的首页html</p>\n<p>package.json：通过npm init生成的，npm包管理的文件（暂时没有用上，后面才会用上）</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153500.png\"></p>\n<h2 id=\"配置一下入口和出口\"><a href=\"#配置一下入口和出口\" class=\"headerlink\" title=\"配置一下入口和出口\"></a>配置一下入口和出口</h2><p>也就是在webpack.config.js 文件中配置</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726153702.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>); <span class=\"comment\">// node 内置核心模块，用来处理路径问题。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123; <span class=\"comment\">// 输出配置</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;./built.js&#x27;</span>, <span class=\"comment\">// 输出文件名</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: resolve(__dirname, <span class=\"string\">&#x27;build/js&#x27;</span>) <span class=\"comment\">// 输出文件路径配置</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"局部安装webpack\"><a href=\"#局部安装webpack\" class=\"headerlink\" title=\"局部安装webpack\"></a>局部安装webpack</h2><p>目前，我们使用的webpack是全局的webpack，如果我们想使用局部来打包呢？</p>\n<ul>\n<li><p>因为一个项目往往依赖特定的webpack版本，全局的版本可能很这个项目的webpack版本不一致，导出打包出现问题。</p>\n</li>\n<li><p>所以通常一个项目，都有自己局部的webpack。</p>\n</li>\n</ul>\n<p>第一步，项目中需要安装自己局部的webpack</p>\n<ul>\n<li><p>这里我们让局部安装webpack3.6.0</p>\n</li>\n<li><p>Vue CLI3中已经升级到webpack4，但是它将配置文件隐藏了起来，所以查看起来不是很方便。</p>\n</li>\n</ul>\n<p><img src=\"https://qny.aqingya.cn/img/20200726154124.png\"></p>\n<p>第二步，通过node_modules/.bin/webpack启动webpack打包.</p>\n<p><img src=\"C:\\Users\\dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200726154148234.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726161415.png\"></p>\n<h2 id=\"package-json中定义启动\"><a href=\"#package-json中定义启动\" class=\"headerlink\" title=\"package.json中定义启动\"></a><strong>package.json中定义启动</strong></h2><p>每次执行都敲这么一长串有没有觉得不方便呢？</p>\n<p>OK，我们可以在<code>package.json</code>的<code>scripts</code>中定义自己的执行脚本。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726161743.png\"></p>\n<p><span style=\"color:red\"><strong>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</strong></span></p>\n<p>首先，<span style=\"color:red\"><strong>会寻找本地的node_modules/.bin路径中对应的命令。</strong></span></p>\n<p><span style=\"color:red\"><strong>如果没有找到，会去全局的环境变量中寻找。</strong></span></p>\n<p>如何执行我们的build指令呢？</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726161711.png\"></p>\n<h2 id=\"css-loader-和-style-loader的使用\"><a href=\"#css-loader-和-style-loader的使用\" class=\"headerlink\" title=\"css-loader 和 style-loader的使用\"></a>css-loader 和 <strong>style-loader</strong>的使用</h2><p>loader是webpack中一个非常核心的概念。</p>\n<p>webpack用来做什么呢？</p>\n<p>&emsp;&emsp;在我们之前的实例中，我们主要是用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。</p>\n<p>&emsp;&emsp;但是，在开发中我们不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。</p>\n<p>&emsp;&emsp;对于webpack本身的能力来说，对于这些转化是不支持的。</p>\n<p>那怎么办呢？给webpack扩展对应的loader就可以啦。</p>\n<p><strong>loader使用过程：</strong></p>\n<p><strong>&emsp;&emsp;步骤一：通过npm安装需要使用的loader</strong></p>\n<p><strong>&emsp;&emsp;步骤二：在webpack.config.js中的modules关键字下进行配置</strong></p>\n<br>\n\n<p><span style=\"color:red\"><strong>css-loader只负责加载css文件但是并不负责将css具体样式嵌入到文档中。</strong></span></p>\n<p><span style=\"color:red\"><strong>style-loader负责将css具体样式嵌入到文档中</strong></span></p>\n<br>\n\n<p><strong>安装css-loader 和 style-loader</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev css-loader@2.0.2 style-loader@0.23.1</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>如果报以下的错误：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200726175539.png\"></p>\n<p>这说明css-loader版本过高的，我们安装较低的css-loader版本即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm uninstall css-loader（卸载当前版本）</span><br><span class=\"line\">cnpm install css-loader@&lt;版本号&gt; -D</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"less文件处理-–-less-loader\"><a href=\"#less文件处理-–-less-loader\" class=\"headerlink\" title=\"less文件处理 – less-loader\"></a>less文件处理 – <strong>less-loader</strong></h2><p>首先，还是需要安装对应的loader</p>\n<p>注意：我们这里还安装了less，因为webpack会使用less对less文件进行编译</p>\n<p>安装插件（<span style=\"color:red\"><strong>注意版本的问题</strong></span>）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev less-loader@4.1.0 less@3.9.0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其次，修改对应的配置文件</p>\n<p>添加一个rules选项，用于处理.less文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;style-loader&quot;</span> <span class=\"comment\">// creates style nodes from JS strings</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;css-loader&quot;</span> <span class=\"comment\">// translates CSS into CommonJS</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;less-loader&quot;</span> <span class=\"comment\">// compiles Less to CSS</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"图片文件资源处理\"><a href=\"#图片文件资源处理\" class=\"headerlink\" title=\"图片文件资源处理\"></a>图片文件资源处理</h2><br>\n\n<p>安装url-loade</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev url-loader@1.1.2</span><br></pre></td></tr></table></figure>\n\n<p>安装file-loade</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev  file-loader@3.0.1 </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\dell\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200727234903274.png\" alt=\"image-20200727234903274\"></p>\n<p>css文件中引用图片。</p>\n<p>修改webpack.config.js配置文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class=\"line\">        use: [&#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">limit</span>: <span class=\"number\">8</span> * <span class=\"number\">1024</span>, <span class=\"comment\">//自己定义的值</span></span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;img/[name].[hash:8].[ext]&#x27;</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当图片小于8kb时，这也是limit属性的作用，对图片进行base64编码</p>\n<blockquote>\n<p>图片大小小于8kb，就会被base64处理<br>优点: 减少请求数量（减轻服务器压力）<br>缺点：图片体积会更大（文件请求速度更慢）</p>\n</blockquote>\n<p>如果大于8kb，会通过file-loader进行处理</p>\n<p>再次打包，就会发现build文件夹下多了一个图片文件</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200727232307.png\"></p>\n<br>\n\n<p>我们发现webpack自动帮助我们生成一个非常长的名字</p>\n<p>&emsp;&emsp;这是一个32位hash值，目的是防止名字重复</p>\n<p>&emsp;&emsp;但是，真实开发中，我们可能对打包的图片名字有一定的要求</p>\n<p>&emsp;&emsp;比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复 </p>\n<p>所以，我们可以在options中添加上如下选项：</p>\n<p>&emsp;&emsp;<strong>img：</strong>文件要打包到的文件夹</p>\n<p>&emsp;&emsp;<strong>name：</strong>获取图片原来的名字，放在该位置</p>\n<p>&emsp;&emsp;<strong>hash:8</strong>：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</p>\n<p>&emsp;&emsp;<strong>ext</strong>：使用图片原来的扩展名</p>\n<br>\n\n<p>但是，我们发现图片并没有显示出来，这是因为图片使用的路径不正确</p>\n<p>&emsp;&emsp;默认情况下，webpack会将生成的路径直接返回给使用者</p>\n<p>&emsp;&emsp;但是，我们整个程序是打包在build文件夹下的，所以这里我们需要在路径下再添加一个../build/（<strong>后续我们还有其他的方式）</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200727234826.png\"></p>\n<br>\n\n\n\n<h2 id=\"对ES6语法兼容性处理\"><a href=\"#对ES6语法兼容性处理\" class=\"headerlink\" title=\"对ES6语法兼容性处理\"></a><strong>对ES6语法兼容性处理</strong></h2><p>如果你仔细阅读webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728083155.png\"></p>\n<p>在前面我们说过，如果希望将ES6的语法转成ES5，那么就需要使用babel。</p>\n<p>而在webpack中，我们直接使用babel对应的loader就可以了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev babel-loader@7.1.5</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev babel-core@6.26.3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev babel-preset-es2015@6.24.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置webpac.config.js 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">       <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">       <span class=\"comment\">// 排查以下文件，他们不能进行随便的转化</span></span><br><span class=\"line\">       exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">       use: &#123;</span><br><span class=\"line\">         <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">           <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>重新打包，查看built.js文件，发现其中的内容变成了ES5的语法</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728090409.png\"></p>\n<p>这个是对就是语法的一些简单的转化，如果想转化一些高级的es6语法如：promise高级语法不能转换。详细请看</p>\n<p><a href=\"https://aqingya.cn/2020/07/15/54/#1-5-js-%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86\">详细请看这里</a></p>\n<br>\n\n<h2 id=\"webpack-配置Vue\"><a href=\"#webpack-配置Vue\" class=\"headerlink\" title=\"webpack 配置Vue\"></a>webpack 配置Vue</h2><h3 id=\"在webpack中引入vue-js\"><a href=\"#在webpack中引入vue-js\" class=\"headerlink\" title=\"在webpack中引入vue.js\"></a>在webpack中引入vue.js</h3><p>我们会使用Vuejs进行开发，而且会以特殊的文件来组织vue的组件。所以，下面我们来学习一下如何在我们的webpack环境中集成Vuejs。</p>\n<p>我们希望在项目中使用Vuejs，那么必然需要对其有依赖，所以需要先进行安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install vue --save</span><br></pre></td></tr></table></figure>\n\n<p>为了兼容版本我们使用<a href=\"mailto:&#x76;&#117;&#101;&#64;&#50;&#x2e;&#x35;&#46;&#50;&#49;\">&#x76;&#117;&#101;&#64;&#50;&#x2e;&#x35;&#46;&#50;&#49;</a>版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install vue@2.5.21 --save</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：因为我们后续是在实际项目中也会使用vue的，所以并不是开发时依赖</strong> <code>--save-dev</code> 是开发依赖</p>\n<br>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200728113347.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728113421.png\"></p>\n<p>修改完成后，重新打包，运行程序：</p>\n<p>打包过程没有任何错误(因为只是多打包了一个vue的js文件而已)</p>\n<p>但是运行程序，没有出现想要的效果，而且浏览器中有报错</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728112645.png\"></p>\n<p>这个错误说的是我们使用的是runtime-only版本的Vue</p>\n<p><strong>runtime-only  ：代码中不可以有任何的template。</strong></p>\n<p><strong>runtime-compiler：代码中可以有template，因为有compiler 可以用于编译template。</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728113421.png\"></p>\n<p>在html中使用的div 就是vue实例的template。所以会报错。</p>\n<br>\n\n<p>这里我只说解决方案：<a href=\"http://cn.vuejs.org/v2/guide/installation.html\">Vue</a><a href=\"http://cn.vuejs.org/v2/guide/installation.html\">不同版本构建</a>，后续我具体讲解runtime-only和runtime-compiler的区别。</p>\n<p>所以我们修改webpack的配置，添加如下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span> <span class=\"comment\">// 用 webpack 1 时需用 &#x27;vue/dist/vue.common.js&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新打包。编译运行.</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728113253.png\"></p>\n<p>然后我们就可以愉快在webpack中使用vue啦😀。</p>\n<br>\n\n<h3 id=\"el-和-template-区别（一）\"><a href=\"#el-和-template-区别（一）\" class=\"headerlink\" title=\"el 和 template 区别（一）\"></a><strong>el 和 template 区别（一）</strong></h3><p>正常运行之后，我们来考虑另外一个问题：</p>\n<p>&emsp;&emsp;如果我们希望将data中的数据显示在界面中，就必须是修改index.html。</p>\n<p>&emsp;&emsp;如果我们后面自定义了组件，也必须修改index.html来使用组件。</p>\n<p>&emsp;&emsp;但是html模板在之后的开发中，我并不希望手动的来频繁修改，是否可以做到呢？</p>\n<br>\n\n<p>定义template属性：</p>\n<p>&emsp;<strong>&emsp;在前面的Vue实例中，我们定义了 el 属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</strong>。</p>\n<p>&emsp;<strong>&emsp;这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div的元素</strong></p>\n<p>&emsp;&emsp;但是如果我依然希望在其中显示的内容，应该怎么处理呢？</p>\n<br>\n\n<p>之前index.html中的#app进行绑定，填写相关的代码模板</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728122642.png\"></p>\n<p>现在我们可以在vue的实例中定义一个template属性，代码如下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728122553.png\"></p>\n<p>然后在index.html中的#app什么什么都不要填写。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728122913.png\"></p>\n<p>这样的话，<span style=\"color:red\"><strong>在同时有 el 和 template 的情况下</strong></span>，我们运行编译的时候，vue的内部会将 template 整体替换 我们在index.html 中的vue实例。如：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728123726.png\"></p>\n<br>\n\n\n\n<h3 id=\"el和templat区别（二）\"><a href=\"#el和templat区别（二）\" class=\"headerlink\" title=\"el和templat区别（二）\"></a><strong>el和templat区别（二）</strong></h3><p>el 和template模板的关系是什么呢？</p>\n<p><strong>在我们之前的学习中，我们知道el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。</strong></p>\n<p><strong>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</strong></p>\n<p>这样做有什么好处呢？</p>\n<p>这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可</p>\n<br>\n\n<p>但是，书写template模块非常麻烦怎么办呢？</p>\n<p>没有关系，稍后我们会将template模板中的内容进行抽离。</p>\n<p>会分成三部分书写：template、script、style，结构变得非常清晰。</p>\n<br>\n\n<h3 id=\"vue-文件封装处理\"><a href=\"#vue-文件封装处理\" class=\"headerlink\" title=\".vue 文件封装处理\"></a>.vue 文件封装处理</h3><p>vue-loader 以及 vue-template-compiler 帮助我们处理。</p>\n<p>安装vue-loader和vue-template-compiler</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建 .vue 文件</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728143524.png\"></p>\n<p>在index.js 入口文件中：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728144722.png\"></p>\n<p>修改webpack.config.js的配置文件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728143958.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [ <span class=\"comment\">//配置插件的节点，所有插件都要在这里配置</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> VueLoaderPlugin()</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"在组件中简单使用组件（简称套娃）\"><a href=\"#在组件中简单使用组件（简称套娃）\" class=\"headerlink\" title=\"在组件中简单使用组件（简称套娃）\"></a>在组件中简单使用组件（简称套娃）</h3><p>新建一个Cpn.vue文件</p>\n<p><img src=\"https://qny.aqingya.cn/img/image-20200728145937854.png\"></p>\n<p>在 App.vue 中 配置如下</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728150324.png\"></p>\n<p>编译运行：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728150505.png\"></p>\n<br>\n\n<h3 id=\"省略引入文件的后缀名\"><a href=\"#省略引入文件的后缀名\" class=\"headerlink\" title=\"省略引入文件的后缀名\"></a>省略引入文件的后缀名</h3><p>当我们引入一下文件的时候，会这样写</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728151628.png\"></p>\n<p>有时候我们不想写文件的后缀名，可以进行如下配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置 省略文件后缀名</span></span><br><span class=\"line\">  <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.css&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>],  </span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样我们就不用写文件的后缀名啦</p>\n<p><img src=\"https://qny.aqingya.cn/img/image-20200728151810700.png\"></p>\n<br>\n\n<h2 id=\"plugin-的使用\"><a href=\"#plugin-的使用\" class=\"headerlink\" title=\"plugin 的使用\"></a>plugin 的使用</h2><ul>\n<li><p>plugin是什么？</p>\n<ul>\n<li>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</li>\n<li>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</li>\n</ul>\n</li>\n<li><p>loader和plugin区别</p>\n<ul>\n<li><strong>loader主要用于转换某些类型的模块，它是一个转换器</strong>。</li>\n<li><strong>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</strong></li>\n</ul>\n</li>\n<li><p>plugin的使用过程：</p>\n<ul>\n<li>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li>\n<li>步骤二：在webpack.config.js中的plugins中配置插件。</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h3 id=\"添加版权的Plugin\"><a href=\"#添加版权的Plugin\" class=\"headerlink\" title=\"添加版权的Plugin\"></a>添加版权的Plugin</h3><p>为打包的文件添加版权声明，该插件名字叫BannerPlugin，属于webpack自带的插件。</p>\n<p>按照下面的方式来修改webpack.config.js的文件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728202019.png\"></p>\n<p>重新打包程序：查看bundle.js文件的头部，看到如下信息</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728202043.png\"></p>\n<br>\n\n<h3 id=\"打包html资源的plugin\"><a href=\"#打包html资源的plugin\" class=\"headerlink\" title=\"打包html资源的plugin\"></a>打包html资源的plugin</h3><p><a href=\"https://aqingya.cn/2020/07/14/53/#2-4-%E6%89%93%E5%8C%85%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90\">传送门1</a>  <a href=\"https://aqingya.cn/2020/07/15/54/#1-7-HTML-%E5%8E%8B%E7%BC%A9\">传送门2</a></p>\n<ul>\n<li><p>目前，我们的index.html文件是存放在项目的根目录下的。</p>\n<ul>\n<li>我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。</li>\n<li>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件</li>\n</ul>\n</li>\n<li><p>HtmlWebpackPlugin插件可以为我们做这些事情：</p>\n<ul>\n<li>自动生成一个index.html文件(可以指定模板来生成)</li>\n<li>将打包的js文件，自动通过script标签插入到body中</li>\n</ul>\n</li>\n</ul>\n<p>安装HtmlWebpackPlugin插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install html-webpack-plugin@3.2.0 --save-dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用插件，修改webpack.config.js文件中plugins部分的内容如下：<ul>\n<li>这里的template表示根据什么模板来生成index.html</li>\n<li>另外，我们需要删除之前在output中添加的publicPath属性</li>\n<li>否则插入的script标签中的src可能会有问题</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://qny.aqingya.cn/img/20200728205053.png\"></p>\n<p><strong><span style=\"color:red\">html-webpack-plugin</span></strong><br><span style=\"color:red\">&emsp;&emsp;功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br><span style=\"color:red\">&emsp;&emsp;需求：需要有结构的HTML文件</span></p>\n<p><code>template: &quot;./src/index.html&quot;&lt;/span&gt;</code></p>\n<p><span style=\"color:red\">&emsp;&emsp;复制 ‘./src/index.html’ 文件，并自动引入打包输出的所有资源（JS/CSS）</span></p>\n<br>\n\n<h3 id=\"js压缩的Plugin\"><a href=\"#js压缩的Plugin\" class=\"headerlink\" title=\"js压缩的Plugin\"></a><strong>js压缩的Plugin</strong></h3><p><span style=\"color:red\"><strong>注意，在webpack4之后，只要我们将生产模式设置为生产环境， <code>mode: &#39;production&#39;</code> 它就会自动压缩js代码。</strong></span> </p>\n<p><span style=\"background-color:yellow\">开发阶段不建议使用 js 压缩 不方便我们来调试</span> </p>\n<p>在项目发布之前，我们必然需要对js等文件进行压缩处理</p>\n<p>这里，我们就对打包的js文件进行压缩</p>\n<p>我们使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>修改webpack.config.js文件，使用插件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200728212923.png\"></p>\n<br>\n\n\n\n<h2 id=\"搭建本地服务器-dev-server\"><a href=\"#搭建本地服务器-dev-server\" class=\"headerlink\" title=\"搭建本地服务器 dev-server\"></a><strong>搭建本地服务器</strong> dev-server</h2><p><a href=\"https://aqingya.cn/2020/07/14/53/#2-6-devserver\">传送门</a></p>\n<br>\n\n<p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p>\n<p>不过它是一个单独的模块，在webpack中使用之前需要先安装它</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save-dev webpack-dev-server@2.9.1</span><br></pre></td></tr></table></figure>\n\n<p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：</p>\n<ul>\n<li><p>contentBase：项目构建后路径，为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写build</p>\n</li>\n<li><p>port：端口号</p>\n</li>\n<li><p>open：值为true的时候，编译运行的时候，自动打开浏览器。</p>\n</li>\n</ul>\n<p><img src=\"https://qny.aqingya.cn/img/20200728224311.png\"></p>","categories":[{"name":"WebPack","path":"api/categories/WebPack.json"}],"tags":[{"name":"webpack","path":"api/tags/webpack.json"}]}