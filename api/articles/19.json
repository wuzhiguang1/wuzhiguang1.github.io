{"title":"JavaScript  ---  闭包详解","slug":"19","date":"2020-05-20T09:04:46.000Z","updated":"2022-07-29T04:22:04.785Z","comments":true,"path":"api/articles/19.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/15e7a0047f5a4ab79b785f613ac3a528.jpg","https://img-blog.csdnimg.cn/20200520134555480.png","https://img-blog.csdnimg.cn/20200520134802643.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/15e7a0047f5a4ab79b785f613ac3a528.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"闭包的几种概念理解：\"><a href=\"#闭包的几种概念理解：\" class=\"headerlink\" title=\"闭包的几种概念理解：\"></a>闭包的几种概念理解：</h2><ol>\n<li>能够访问另一个函数作用域的变量的函数。清晰的讲：<strong>闭包就是一个函数，这个函数能够访问其他函数的作用域中的变量</strong>。</li>\n<li>闭包是一种保护私有变量的机制，在函数执行时形成私有的作用域，保护里面的私有变量不受外界干扰。直观的说就是形成一个不销毁的栈环境。</li>\n<li>闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</li>\n<li><strong>闭包是指有权访问另一个函数作用域中的变量的函数</strong></li>\n<li>能够读取其他函数内部变量的函数。或简单理解为<strong>定义在一个函数内部的函数，内部函数持有外部函数内变量的引用。</strong></li>\n</ol>\n<p>我们都知道，js的作用域分两种，全局和局部，基于我们所熟悉的<a href=\"https://aqingya.cn/2020/05/19/twenty-eight/\">作用域链相关知识</a>，我们知道在js作用域环境中访问变量的权利是由内向外的，内部作用域可以获得当前作用域下的变量并且可以获得当前包含当前作用域的外层作用域下的变量，反之则不能，也就是说在外层作用域下无法获取内层作用域下的变量，同样在不同的函数作用域中也是不能相互访问彼此变量的，那么我们想在一个函数内部也有限权访问另一个函数内部的变量该怎么办呢？闭包就是用来解决这一需求的，闭包的本质就是在一个函数内部创建另一个函数。</p>\n<br>\n\n<p><strong>我们首先知道闭包有3个特性：</strong></p>\n<p><strong>①函数嵌套函数</strong></p>\n<p><strong>②函数内部可以引用函数外部的参数和变量</strong></p>\n<p><strong>③参数和变量不会被垃圾回收机制回收</strong></p>\n<hr>\n<h2 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h2><p><strong>例子1</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Chrome&quot;</span>;    <span class=\"comment\">//创建局部变量name和局部函数alertName</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertName</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//alertName()是函数内部方法，是一个闭包</span></span><br><span class=\"line\">        alert(name); <span class=\"comment\">//使用了外部函数声明的变量，内部函数可以访问外部函数的变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alertName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init();</span><br><span class=\"line\"><span class=\"comment\">//一个变量在源码中声明的位置作为它的作用域，同时嵌套的函数可以访问到其外层作用域中声明的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Chrome&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> alertName;   <span class=\"comment\">//alertName被外部函数作为返回值返回了,返回的是一个闭包</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFun = outFun();</span><br><span class=\"line\">myFun();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>闭包有函数+它的词法环境；词法环境指函数创建时可访问的所有变量。<br>myFun引用了一个闭包，闭包由alertName()和闭包创建时存在的“Chrome”字符串组成。<br>alertName（）持有了name的引用，<br>myFunc持有了alertName（）的的访问，<br>因此myFunc调用时，name还是处于可以访问的状态。</p>\n<hr>\n<p><strong>例子2</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inc();  </span><br><span class=\"line\">    inc(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子3</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       n++; </span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a();</span><br><span class=\"line\">c();    <span class=\"comment\">//控制台输出1</span></span><br><span class=\"line\">c();    <span class=\"comment\">//控制台输出2</span></span><br></pre></td></tr></table></figure>\n<p>看看是怎么执行的：</p>\n<p>var c = a()，这一句 a()返回的是函数 inc，那这句等同于 var c = inc;<br>c()，这一句等同于 inc();  注意，函数名只是一个标识（指向函数的指针），而()才是执行函数。<br>后面三句翻译过来就是：  var c = inc;  inc();  inc();，跟第一段代码有区别吗？ 没有。</p>\n<p><strong>为啥要这样写？</strong><br><strong>我们知道，js的每个函数都是一个个小黑屋，它可以获取外界信息，但是外界却无法直接看到里面的内容。将变量 n 放进小黑屋里，除了 inc 函数之外，没有其他办法能接触到变量 n，而且在函数 a 外定义同名的变量 n 也是互不影响的，这就是所谓的增强“封装性”。</strong></p>\n<p><strong>而之所以要用 return 返回函数标识 inc，是因为在 a 函数外部无法直接调用 inc 函数，所以 return inc 与外部联系起来。</strong></p>\n<hr>\n<p><strong>例子4</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addFun1 = add(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> addFun2 = add(<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(addFun1(<span class=\"number\">2</span>)); <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(addFun2(<span class=\"number\">2</span>));  <span class=\"comment\">//11</span></span><br></pre></td></tr></table></figure>\n<p>add接受一个参数x，返回一个函数,它的参数是y，返回x+y。<br>add是一个函数工厂，传入一个参数，就可以创建一个参数和其他参数求值的函数。<br>addFun1和addFun2都是闭包。他们使用相同的函数定义，但词法环境不同，addFun1中x是4，后者是5。</p>\n<hr>\n<p><strong>例子5</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(++n);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(++num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = fn();</span><br><span class=\"line\">fn1(); <span class=\"comment\">// 1  4</span></span><br><span class=\"line\">fn1(); <span class=\"comment\">// 1  5</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下，在函数fn执行完后，就应该连同它里面的变量一同被销毁，但是在这个例子中，匿名函数作为fn的返回值被赋值给了fn1，这时候相当于fn1=function(){var n = 0 … }，并且匿名函数内部引用着fn里的变量num，所以变量num无法被销毁，而变量n是每次被调用时新创建的，所以每次fn1执行完后它就把属于自己的变量连同自己一起销毁，于是乎最后就剩下孤零零的num，于是这里就产生了内存消耗的问题。</p>\n<hr>\n<p><strong>例子6</strong><br>经典例子-定时器与闭包<br>写一个for循环，让它按顺序打印出当前循环次数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照预期它应该依次输出1 2 3 4 5，而结果它输出了五次5，这是为什么呢？原来<strong>由于js是单线程的，所以在执行for循环的时候定时器setTimeout被安排到任务队列中排队等待执行，而在等待过程中for循环就已经在执行，等到setTimeout可以执行的时候，for循环已经结束，i的值也已经编程5，所以打印出来五个5</strong>，那么我们为了实现预期结果应该怎么改这段代码呢？</p>\n<p><strong>解决办法：</strong><br>1、<span style=\"color:#f33b45;\" >（ps:如果把for循环里面的var变成let，也能实现预期结果  ES6新增 利用块级作用域(最简单，推荐)）</span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n<p>2、利用自执行函数，将i作为参数传入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        &#125;,  <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n<p>引入闭包来保存变量i，将setTimeout放入立即执行函数中，将for循环中的循环值i作为参数传递，100毫秒后同时打印出1 2 3 4 5。</p>\n<p>那如果我们想实现每隔100毫秒分别依次输出数字，又该怎么改呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        &#125;, i * <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n<p>在这段代码中，相当于同时启动3个定时器，i*100是为4个定时器分别设置了不同的时间，同时启动，但是执行时间不同，每个定时器间隔都是100毫秒，实现了每隔100毫秒就执行一次打印的效果。</p>\n<p>2、利用setTimeout的第三个参数，将i作为参数传入function</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>例子7</strong><br>闭包作为函数传递</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; num) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    fn2(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;(fn1);</span><br><span class=\"line\"><span class=\"comment\">//控制台打印  30</span></span><br></pre></td></tr></table></figure>\n<p>在这段代码中，函数fn1作为参数传入立即执行函数中，在执行到fn2(30)的时候，30作为参数传入fn1中，这时候if(x&gt;num)中的num取的并不是立即执行函数中的num，而是取创建函数的作用域中的num这里函数创建的作用域是全局作用域下，所以num取的是全局作用域中的值15，即30&gt;15，打印30</p>\n<hr>\n<h2 id=\"闭包应用场景\"><a href=\"#闭包应用场景\" class=\"headerlink\" title=\"闭包应用场景\"></a>闭包应用场景</h2><p><strong>1、闭包应用场景之回调</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;&quot;</span>&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: 12px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">1.</span>5rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    h2 &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">1.</span>2rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;欧力给&lt;/p&gt;</span><br><span class=\"line\">    &lt;h1&gt;嘤嘤嘤&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;啊啊啊&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;#&quot;</span> id=<span class=\"string\">&quot;size-12&quot;</span>&gt;<span class=\"number\">12</span>&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;#&quot;</span> id=<span class=\"string\">&quot;size-14&quot;</span>&gt;<span class=\"number\">14</span>&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;#&quot;</span> id=<span class=\"string\">&quot;size-16&quot;</span>&gt;<span class=\"number\">16</span>&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">changeSize</span><span class=\"params\">(size)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> function() &#123;</span><br><span class=\"line\">                document.body.style.fontSize = size + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> size12 = changeSize(<span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> size14 = changeSize(<span class=\"number\">14</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> size16 = changeSize(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        document.getElementById(<span class=\"string\">&#x27;size-12&#x27;</span>).onclick = size12;</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">&#x27;size-14&#x27;</span>).onclick = size14;</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">&#x27;size-16&#x27;</span>).onclick = size16;</span><br><span class=\"line\">        <span class=\"comment\">//我们定义行为，然后把它关联到某个用户事件上（点击或者按键）。我们的代码通常会作为一个回调（事件触发时调用的函数）绑定到事件上</span></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p><strong>2、闭包应用场景之封装变量</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用闭包定义能访问私有函数和私有变量的公有函数。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> counter = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> privateCounter = <span class=\"number\">0</span>; <span class=\"comment\">//私有变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        privateCounter += val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//三个闭包共享一个词法环境</span></span><br><span class=\"line\">            change(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            change(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> privateCounter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">//0</span></span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">//1</span></span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p> 共享的环境创建在一个匿名函数体内，立即执行。<br> 环境中有一个局部变量一个局部函数，通过匿名函数返回的对象的三个公共函数访问。</p>\n<p><strong>3、闭包应用场景之为节点循环绑定click事件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p id=&quot;info&quot;&gt;123&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;E-mail: &lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;Name: &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;Age: &lt;input type=&quot;text&quot; id=&quot;age&quot; name=&quot;age&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    function showContent(content)&#123;</span><br><span class=\"line\">        document.getElementById(&#x27;info&#x27;).innerHTML = content;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    function setContent()&#123;</span><br><span class=\"line\">        var infoArr = [</span><br><span class=\"line\">            &#123;&#x27;id&#x27;:&#x27;email&#x27;,&#x27;content&#x27;:&#x27;your email address&#x27;&#125;,</span><br><span class=\"line\">            &#123;&#x27;id&#x27;:&#x27;name&#x27;,&#x27;content&#x27;:&#x27;your name&#x27;&#125;,</span><br><span class=\"line\">            &#123;&#x27;id&#x27;:&#x27;age&#x27;,&#x27;content&#x27;:&#x27;your age&#x27;&#125;</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        for (var i = 0; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">            var item = infoArr[i];</span><br><span class=\"line\">            document.getElementById(item.id).onfocus = function()&#123;</span><br><span class=\"line\">                showContent(item.content)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContent()</span><br><span class=\"line\">    //循环中创建了三个闭包，他们使用了相同的词法环境item，item.content是变化的变量</span><br><span class=\"line\">    //当onfocus执行时，item.content才确定，此时循环已经结束，三个闭包共享的item已经指向数组最后一项。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>解决方法1</strong>   &emsp;  &emsp;    通过函数工厂，则函数为每一个回调都创建一个新的词法环境</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解决方法1     通过函数工厂，则函数为每一个回调都创建一个新的词法环境</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callBack</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        showContent(content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> infoArr = [</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;email&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your email address&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your name&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your age&#x27;</span>&#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = infoArr[i];</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = callBack(item.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setContent()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>解决方法2</strong>    &emsp;  &emsp;      绑定事件放在立即执行函数中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解决方法2        绑定事件放在立即执行函数中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> infoArr = [</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;email&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your email address&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your name&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your age&#x27;</span>&#125;</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">            (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> item = infoArr[i];</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    showContent(item.content)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)()<span class=\"comment\">//放立即执行函数，立即绑定，用每次的值绑定到事件上，而不是循环结束的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContent()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><strong>解决方案3</strong>    &emsp;  &emsp;      用ES6声明，避免声明提前，作用域只在当前块内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 解决方案3        用ES6声明，避免声明提前，作用域只在当前块内</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> infoArr = [</span><br><span class=\"line\">          &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;email&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your email address&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your name&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your age&#x27;</span>&#125;</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> item = infoArr[i];      <span class=\"comment\">//限制作用域只在当前块内</span></span><br><span class=\"line\">          <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">              showContent(item.content)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setContent()</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案4</strong>   &emsp; &emsp;     使用 forEach()来遍历helpText数组并给每一个<p>添加一个监听器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> infoArr = [&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;email&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;your email address&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;your name&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;age&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;your age&#x27;</span></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    infoArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(text.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            showContent(text.content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setContent()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"从堆栈的角度看待js函数\"><a href=\"#从堆栈的角度看待js函数\" class=\"headerlink\" title=\"从堆栈的角度看待js函数\"></a>从堆栈的角度看待js函数</h2><p>基本变量的值一般都是存在栈内存中，而对象类型的变量的值存储在堆内存中，栈内存存储对应空间地址。基本的数据类型: Number 、Boolean、Undefined、String、Null。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  a = <span class=\"number\">1</span>   <span class=\"comment\">//a是一个基本类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  b = &#123;<span class=\"attr\">m</span>: <span class=\"number\">20</span> &#125;   <span class=\"comment\">//b是一个对象</span></span><br></pre></td></tr></table></figure>\n<p>对应内存存储：<br><img src=\"https://img-blog.csdnimg.cn/20200520134555480.png\" alt=\"在这里插入图片描述\"><br>当我们执行 b={m:30}时，堆内存就有新的对象{m：30}，栈内存的b指向新的空间地址( 指向{m：30} )，而堆内存中原来的{m：20}就会被程序引擎垃圾回收掉，节约内存空间。我们知道js函数也是对象，它也是在堆与栈内存中存储的，我们来看一下转化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200520134802643.png\" alt=\"在这里插入图片描述\"><br><strong>栈是一种先进后出的数据结构：</strong><br><strong>1 在执行fn前，此时我们在全局执行环境(浏览器就是window作用域)，全局作用域里有个变量a；</strong></p>\n<p><strong>2 进入fn，此时栈内存就会push一个fn的执行环境，这个环境里有变量b和函数对象fn1，这里可以访问自身执行环境和全局执行环境所定义的变量</strong></p>\n<p><strong>3 进入fn1，此时栈内存就会push 一个fn1的执行环境，这里面没有定义其他变量，但是我们可以访问到fn和全局执行环境里面的变量，因为程序在访问变量时，是向底层栈一个个找，如果找到全局执行环境里都没有对应变量，则程序抛出underfined的错误。</strong></p>\n<p> <strong>4 随着fn1()执行完毕，fn1的执行环境被杯销毁，接着执行完fn()，fn的执行环境也会被销毁，只剩全局的执行环境下，现在没有b变量，和fn1函数对象了，只有a 和 fn(函数声明作用域是window下)</strong><br><br><br>在函数内访问某个变量是根据函数作用域链来判断变量是否存在的，而函数作用域链是程序根据函数所在的执行环境栈来初始化的，所以上面的例子，我们在fn1里面打印变量b，根据fn1的作用域链的找到对应fn执行环境下的变量b。所以当程序在调用某个函数时，做了一下的工作：准备执行环境，初始函数作用域链和arguments参数对象<br><br><br>我们现在看回最初的例子outer与inner</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span>  a = <span class=\"string\">&#x27;变量1&#x27;</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span>  inner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.info(a)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner    <span class=\"comment\">// inner 就是一个闭包函数，因为他能够访问到outer函数的作用域</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  inner = outer()   <span class=\"comment\">// 获得inner闭包函数</span></span><br><span class=\"line\">inner()   <span class=\"comment\">//&quot;变量1&quot;</span></span><br></pre></td></tr></table></figure>\n<p>当程序执行完var inner = outer()，其实outer的执行环境并没有被销毁，因为他里面的变量a仍然被被inner的函数作用域链所引用，当程序执行完inner(), 这时候，inner和outer的执行环境才会被销毁调；《JavaScript高级编程》书中建议：由于闭包会携带包含它的函数的作用域，因为会比其他函数占用更多内容，过度使用闭包，会导致内存占用过多。</p>\n<hr>\n<h2 id=\"js闭包的各种坑\"><a href=\"#js闭包的各种坑\" class=\"headerlink\" title=\"js闭包的各种坑\"></a>js闭包的各种坑</h2><p><strong>坑点1： 引用的变量可能发生变化</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">             result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">             &#125;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>看样子result每个闭包函数对打印对应数字，1,2,3,4,…,10, 实际不是，因为每个闭包函数访问变量i是outer执行环境下的变量i，随着循环的结束，i已经变成10了，所以每个函数内部的 i 值都是10，<br>怎么解决这个问题呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        result[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> num; <span class=\"comment\">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span></span><br><span class=\"line\">            &#125;();</span><br><span class=\"line\">        &#125;)(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(outer()); <span class=\"comment\">//0,1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure>\n<p>`我们没有直接把闭包赋值给数组，而是定义一个匿名函数，并立即执行该匿名函数的结果赋值给数组。我们在调用匿名函数时，我们传入的变量 i 。由于函数是按值传递的，所以将变量 i 的当前值复制给num。而这个匿名函数的内部，又创建并返回一个访问num的闭包。这样一来result数组中的每个函数都有自己的num变量的一个副本，因此返回不同的数值。</p>\n<br>\n\n<p><strong>坑点2: this指向问题</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">getNameFuce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFuce()()); <span class=\"comment\">// The Window</span></span><br></pre></td></tr></table></figure>\n<p>由于getNameFuce()返回的是一个函数，因此调用object.getNameFuce()()就会立即调用它返回的函数，所以它返回的函数就相当于Window调用的，结果就返回一个全局的字符串The Window”。<br><strong>因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</strong></p>\n<br>\n\n<p><strong>this和arguments。内部函数在搜索这两个对象时，只会搜索到其活动对象为止，因此永远不能直接访问外部函数中的这两个变量。如果想访问作用域中的 this 和 arguments 对象，必须将该对象的引用保存到另一个闭包能够访问的变量之中。</strong></p>\n<p>我们可以把外部作用域中的this对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">getNameFuce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFuce()()); <span class=\"comment\">// My Object</span></span><br></pre></td></tr></table></figure>\n<p>在定义匿名函数之前，我们把 this 对象赋值给一个名叫that的变量。而定义了闭包之后，闭包可以访问这变量，因为它是我们在包含函数中特意声明的变量。即使在函数返回之后，that 也仍然引用着 object ，所以调用object.getNameFuce()() 就返回了  “My Object”。</p>\n<p>下面几种特殊情况，this 的值也可能发生意外的改变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"> object = &#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>: <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(object.getName()); <span class=\"comment\">// My Object</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log((object.getName)()); <span class=\"comment\">// My Object</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log((object.getName = object.getName)()); <span class=\"comment\">// The Window 非严格模式下</span></span><br></pre></td></tr></table></figure>\n<p>第一行是代码正常调用。第二行(object.getName)()调用 和object.getName() 是一样的。我们看一下第三行，先执行一条赋值语句，再调用赋值后的结果。因为这个赋值表达式的值是函数本身所有 this 的值不能得到维持，结果就返回了”The Window”。<br>当然我们在开发的时候，不会用第二行和第三行代码，不过，这个例子有助于说明即使是语法的细微变化，都有可能意外的改变 this 值。</p>\n<br>\n\n<p><strong>坑点3：内存泄露问题</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">showId</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      aler(el.id)   <span class=\"comment\">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改成下面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">showId</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id  = el.id</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      aler(id) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    el = <span class=\"literal\">null</span>    <span class=\"comment\">// 主动释放el</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>闭包会引用包含函数的整个活动对象，而其中包含着el。即使闭包不直接引用el，包含函数的活动对象中也会保存一个引用，因此有必要吧el变量设置为null。</strong></p>\n<br>\n\n<p><strong>技巧1： 用闭包解决递归调用问题（当然现在大多用es6的let 和const 定义）</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * factorial(num - <span class=\"number\">1</span>); <span class=\"comment\">//会产生耦合</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>)); <span class=\"comment\">//报错 1.html:2030 Uncaught TypeError: factorial is not a function</span></span><br></pre></td></tr></table></figure>\n<p>以上代码先把 factorial() 函数保存到变量 f 中，然后将 factorial 变量设置为null。结果指向原始函数的引用就只有一个 f ，但接下来调用 f() 时，由于必须执行 factorial() ,而 factorial 已经不再是函数了，所以就会导致错误，在这种情况下可以使用 arguments.callee() 可以解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>)); <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<p> <strong>arguments.callee 是一个指向正在执行的函数的指针</strong>。但是在严格模式下，不能通过脚本访问 arguments.callee ，我们还可以用闭包的方式来解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> factorial = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * f(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>)); <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<p>这样就没有问题了，实际上起作用的是闭包函数f，而不是外面的函数newFactorial，这样在严格模式和非严格模式都能使用。</p>\n<br>\n\n<p><strong>技巧2：用闭包模仿块级作用域</strong></p>\n<p>es6没出来之前，用var定义变量存在变量提升问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)(); </span><br></pre></td></tr></table></figure>\n<p>这是立即调用一个匿名函数</p>\n<br>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先定义一个函数然后再立即调用它，定义函数的方式是创建一个匿名函数，并把匿名函数赋值给变量someFunction  。<br>那么是不是也可以用函数的值直接取代函数名呢？然而下面的代码会导致错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;();    <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<p>这段代码会导致语法错误，是因为JavaScript将function 关键字作为一个函数声明的开始，而函数声明后面不能跟圆括号。然而，<strong>函数表达式</strong>的后面可以跟圆括号，要将函数声明转化为函数表达式，加上圆括号即可。</p>\n<br>\n\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumber</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 报错 Uncaught ReferenceError: i is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outputNumber(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下闭包的好处与坏处</p>\n<p><strong>好处</strong></p>\n<p><strong>①保护函数内的变量安全 ，实现封装，防止变量流入其他环境发生命名冲突<br>②在内存中维持一个变量，可以做缓存（但使用多了同时也是一项缺点，消耗内存）<br>③匿名自执行函数可以减少内存消耗</strong></p>\n<p><strong>坏处</strong></p>\n<p><strong>①其中一点上面已经有体现了，就是被引用的私有变量不能被销毁，增大了内存消耗，造成内存泄漏，解决方法是可以在使用完变量后手动为它赋值为null；<br>②其次由于闭包涉及跨域访问，所以会导致性能损失，我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响</strong></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n\n\n","more":"<h2 id=\"闭包的几种概念理解：\"><a href=\"#闭包的几种概念理解：\" class=\"headerlink\" title=\"闭包的几种概念理解：\"></a>闭包的几种概念理解：</h2><ol>\n<li>能够访问另一个函数作用域的变量的函数。清晰的讲：<strong>闭包就是一个函数，这个函数能够访问其他函数的作用域中的变量</strong>。</li>\n<li>闭包是一种保护私有变量的机制，在函数执行时形成私有的作用域，保护里面的私有变量不受外界干扰。直观的说就是形成一个不销毁的栈环境。</li>\n<li>闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</li>\n<li><strong>闭包是指有权访问另一个函数作用域中的变量的函数</strong></li>\n<li>能够读取其他函数内部变量的函数。或简单理解为<strong>定义在一个函数内部的函数，内部函数持有外部函数内变量的引用。</strong></li>\n</ol>\n<p>我们都知道，js的作用域分两种，全局和局部，基于我们所熟悉的<a href=\"https://aqingya.cn/2020/05/19/twenty-eight/\">作用域链相关知识</a>，我们知道在js作用域环境中访问变量的权利是由内向外的，内部作用域可以获得当前作用域下的变量并且可以获得当前包含当前作用域的外层作用域下的变量，反之则不能，也就是说在外层作用域下无法获取内层作用域下的变量，同样在不同的函数作用域中也是不能相互访问彼此变量的，那么我们想在一个函数内部也有限权访问另一个函数内部的变量该怎么办呢？闭包就是用来解决这一需求的，闭包的本质就是在一个函数内部创建另一个函数。</p>\n<br>\n\n<p><strong>我们首先知道闭包有3个特性：</strong></p>\n<p><strong>①函数嵌套函数</strong></p>\n<p><strong>②函数内部可以引用函数外部的参数和变量</strong></p>\n<p><strong>③参数和变量不会被垃圾回收机制回收</strong></p>\n<hr>\n<h2 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h2><p><strong>例子1</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Chrome&quot;</span>;    <span class=\"comment\">//创建局部变量name和局部函数alertName</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertName</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//alertName()是函数内部方法，是一个闭包</span></span><br><span class=\"line\">        alert(name); <span class=\"comment\">//使用了外部函数声明的变量，内部函数可以访问外部函数的变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alertName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init();</span><br><span class=\"line\"><span class=\"comment\">//一个变量在源码中声明的位置作为它的作用域，同时嵌套的函数可以访问到其外层作用域中声明的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Chrome&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> alertName;   <span class=\"comment\">//alertName被外部函数作为返回值返回了,返回的是一个闭包</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFun = outFun();</span><br><span class=\"line\">myFun();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>闭包有函数+它的词法环境；词法环境指函数创建时可访问的所有变量。<br>myFun引用了一个闭包，闭包由alertName()和闭包创建时存在的“Chrome”字符串组成。<br>alertName（）持有了name的引用，<br>myFunc持有了alertName（）的的访问，<br>因此myFunc调用时，name还是处于可以访问的状态。</p>\n<hr>\n<p><strong>例子2</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inc();  </span><br><span class=\"line\">    inc(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<p><strong>例子3</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       n++; </span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a();</span><br><span class=\"line\">c();    <span class=\"comment\">//控制台输出1</span></span><br><span class=\"line\">c();    <span class=\"comment\">//控制台输出2</span></span><br></pre></td></tr></table></figure>\n<p>看看是怎么执行的：</p>\n<p>var c = a()，这一句 a()返回的是函数 inc，那这句等同于 var c = inc;<br>c()，这一句等同于 inc();  注意，函数名只是一个标识（指向函数的指针），而()才是执行函数。<br>后面三句翻译过来就是：  var c = inc;  inc();  inc();，跟第一段代码有区别吗？ 没有。</p>\n<p><strong>为啥要这样写？</strong><br><strong>我们知道，js的每个函数都是一个个小黑屋，它可以获取外界信息，但是外界却无法直接看到里面的内容。将变量 n 放进小黑屋里，除了 inc 函数之外，没有其他办法能接触到变量 n，而且在函数 a 外定义同名的变量 n 也是互不影响的，这就是所谓的增强“封装性”。</strong></p>\n<p><strong>而之所以要用 return 返回函数标识 inc，是因为在 a 函数外部无法直接调用 inc 函数，所以 return inc 与外部联系起来。</strong></p>\n<hr>\n<p><strong>例子4</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addFun1 = add(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> addFun2 = add(<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(addFun1(<span class=\"number\">2</span>)); <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(addFun2(<span class=\"number\">2</span>));  <span class=\"comment\">//11</span></span><br></pre></td></tr></table></figure>\n<p>add接受一个参数x，返回一个函数,它的参数是y，返回x+y。<br>add是一个函数工厂，传入一个参数，就可以创建一个参数和其他参数求值的函数。<br>addFun1和addFun2都是闭包。他们使用相同的函数定义，但词法环境不同，addFun1中x是4，后者是5。</p>\n<hr>\n<p><strong>例子5</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(++n);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(++num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = fn();</span><br><span class=\"line\">fn1(); <span class=\"comment\">// 1  4</span></span><br><span class=\"line\">fn1(); <span class=\"comment\">// 1  5</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下，在函数fn执行完后，就应该连同它里面的变量一同被销毁，但是在这个例子中，匿名函数作为fn的返回值被赋值给了fn1，这时候相当于fn1=function(){var n = 0 … }，并且匿名函数内部引用着fn里的变量num，所以变量num无法被销毁，而变量n是每次被调用时新创建的，所以每次fn1执行完后它就把属于自己的变量连同自己一起销毁，于是乎最后就剩下孤零零的num，于是这里就产生了内存消耗的问题。</p>\n<hr>\n<p><strong>例子6</strong><br>经典例子-定时器与闭包<br>写一个for循环，让它按顺序打印出当前循环次数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照预期它应该依次输出1 2 3 4 5，而结果它输出了五次5，这是为什么呢？原来<strong>由于js是单线程的，所以在执行for循环的时候定时器setTimeout被安排到任务队列中排队等待执行，而在等待过程中for循环就已经在执行，等到setTimeout可以执行的时候，for循环已经结束，i的值也已经编程5，所以打印出来五个5</strong>，那么我们为了实现预期结果应该怎么改这段代码呢？</p>\n<p><strong>解决办法：</strong><br>1、<span style=\"color:#f33b45;\" >（ps:如果把for循环里面的var变成let，也能实现预期结果  ES6新增 利用块级作用域(最简单，推荐)）</span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n<p>2、利用自执行函数，将i作为参数传入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        &#125;,  <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n<p>引入闭包来保存变量i，将setTimeout放入立即执行函数中，将for循环中的循环值i作为参数传递，100毫秒后同时打印出1 2 3 4 5。</p>\n<p>那如果我们想实现每隔100毫秒分别依次输出数字，又该怎么改呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        &#125;, i * <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n<p>在这段代码中，相当于同时启动3个定时器，i*100是为4个定时器分别设置了不同的时间，同时启动，但是执行时间不同，每个定时器间隔都是100毫秒，实现了每隔100毫秒就执行一次打印的效果。</p>\n<p>2、利用setTimeout的第三个参数，将i作为参数传入function</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  控制台输出  0,1,2,3,4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>例子7</strong><br>闭包作为函数传递</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; num) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">100</span>;</span><br><span class=\"line\">    fn2(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;(fn1);</span><br><span class=\"line\"><span class=\"comment\">//控制台打印  30</span></span><br></pre></td></tr></table></figure>\n<p>在这段代码中，函数fn1作为参数传入立即执行函数中，在执行到fn2(30)的时候，30作为参数传入fn1中，这时候if(x&gt;num)中的num取的并不是立即执行函数中的num，而是取创建函数的作用域中的num这里函数创建的作用域是全局作用域下，所以num取的是全局作用域中的值15，即30&gt;15，打印30</p>\n<hr>\n<h2 id=\"闭包应用场景\"><a href=\"#闭包应用场景\" class=\"headerlink\" title=\"闭包应用场景\"></a>闭包应用场景</h2><p><strong>1、闭包应用场景之回调</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span> href=<span class=\"string\">&quot;&quot;</span>&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        font-size: 12px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">1.</span>5rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    h2 &#123;</span><br><span class=\"line\">        font-size: <span class=\"number\">1.</span>2rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;欧力给&lt;/p&gt;</span><br><span class=\"line\">    &lt;h1&gt;嘤嘤嘤&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h2&gt;啊啊啊&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;#&quot;</span> id=<span class=\"string\">&quot;size-12&quot;</span>&gt;<span class=\"number\">12</span>&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;#&quot;</span> id=<span class=\"string\">&quot;size-14&quot;</span>&gt;<span class=\"number\">14</span>&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;#&quot;</span> id=<span class=\"string\">&quot;size-16&quot;</span>&gt;<span class=\"number\">16</span>&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">changeSize</span><span class=\"params\">(size)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> function() &#123;</span><br><span class=\"line\">                document.body.style.fontSize = size + <span class=\"string\">&#x27;px&#x27;</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> size12 = changeSize(<span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> size14 = changeSize(<span class=\"number\">14</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> size16 = changeSize(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        document.getElementById(<span class=\"string\">&#x27;size-12&#x27;</span>).onclick = size12;</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">&#x27;size-14&#x27;</span>).onclick = size14;</span><br><span class=\"line\">        document.getElementById(<span class=\"string\">&#x27;size-16&#x27;</span>).onclick = size16;</span><br><span class=\"line\">        <span class=\"comment\">//我们定义行为，然后把它关联到某个用户事件上（点击或者按键）。我们的代码通常会作为一个回调（事件触发时调用的函数）绑定到事件上</span></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p><strong>2、闭包应用场景之封装变量</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用闭包定义能访问私有函数和私有变量的公有函数。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> counter = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> privateCounter = <span class=\"number\">0</span>; <span class=\"comment\">//私有变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        privateCounter += val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//三个闭包共享一个词法环境</span></span><br><span class=\"line\">            change(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            change(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> privateCounter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">//0</span></span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">//1</span></span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p> 共享的环境创建在一个匿名函数体内，立即执行。<br> 环境中有一个局部变量一个局部函数，通过匿名函数返回的对象的三个公共函数访问。</p>\n<p><strong>3、闭包应用场景之为节点循环绑定click事件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p id=&quot;info&quot;&gt;123&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;E-mail: &lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;Name: &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;Age: &lt;input type=&quot;text&quot; id=&quot;age&quot; name=&quot;age&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    function showContent(content)&#123;</span><br><span class=\"line\">        document.getElementById(&#x27;info&#x27;).innerHTML = content;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    function setContent()&#123;</span><br><span class=\"line\">        var infoArr = [</span><br><span class=\"line\">            &#123;&#x27;id&#x27;:&#x27;email&#x27;,&#x27;content&#x27;:&#x27;your email address&#x27;&#125;,</span><br><span class=\"line\">            &#123;&#x27;id&#x27;:&#x27;name&#x27;,&#x27;content&#x27;:&#x27;your name&#x27;&#125;,</span><br><span class=\"line\">            &#123;&#x27;id&#x27;:&#x27;age&#x27;,&#x27;content&#x27;:&#x27;your age&#x27;&#125;</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        for (var i = 0; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">            var item = infoArr[i];</span><br><span class=\"line\">            document.getElementById(item.id).onfocus = function()&#123;</span><br><span class=\"line\">                showContent(item.content)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContent()</span><br><span class=\"line\">    //循环中创建了三个闭包，他们使用了相同的词法环境item，item.content是变化的变量</span><br><span class=\"line\">    //当onfocus执行时，item.content才确定，此时循环已经结束，三个闭包共享的item已经指向数组最后一项。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>解决方法1</strong>   &emsp;  &emsp;    通过函数工厂，则函数为每一个回调都创建一个新的词法环境</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解决方法1     通过函数工厂，则函数为每一个回调都创建一个新的词法环境</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callBack</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        showContent(content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> infoArr = [</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;email&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your email address&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your name&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your age&#x27;</span>&#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = infoArr[i];</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = callBack(item.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setContent()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>解决方法2</strong>    &emsp;  &emsp;      绑定事件放在立即执行函数中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解决方法2        绑定事件放在立即执行函数中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> infoArr = [</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;email&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your email address&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your name&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your age&#x27;</span>&#125;</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">            (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> item = infoArr[i];</span><br><span class=\"line\">                <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    showContent(item.content)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)()<span class=\"comment\">//放立即执行函数，立即绑定，用每次的值绑定到事件上，而不是循环结束的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContent()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><strong>解决方案3</strong>    &emsp;  &emsp;      用ES6声明，避免声明提前，作用域只在当前块内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 解决方案3        用ES6声明，避免声明提前，作用域只在当前块内</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> infoArr = [</span><br><span class=\"line\">          &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;email&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your email address&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your name&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"string\">&#x27;id&#x27;</span>:<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;content&#x27;</span>:<span class=\"string\">&#x27;your age&#x27;</span>&#125;</span><br><span class=\"line\">      ];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; infoArr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> item = infoArr[i];      <span class=\"comment\">//限制作用域只在当前块内</span></span><br><span class=\"line\">          <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">              showContent(item.content)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setContent()</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案4</strong>   &emsp; &emsp;     使用 forEach()来遍历helpText数组并给每一个<p>添加一个监听器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showContent</span>(<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;info&#x27;</span>).innerHTML = content;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setContent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> infoArr = [&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;email&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;your email address&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;name&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;your name&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;age&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;your age&#x27;</span></span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">    infoArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(text.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            showContent(text.content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setContent()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<br>\n\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"从堆栈的角度看待js函数\"><a href=\"#从堆栈的角度看待js函数\" class=\"headerlink\" title=\"从堆栈的角度看待js函数\"></a>从堆栈的角度看待js函数</h2><p>基本变量的值一般都是存在栈内存中，而对象类型的变量的值存储在堆内存中，栈内存存储对应空间地址。基本的数据类型: Number 、Boolean、Undefined、String、Null。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  a = <span class=\"number\">1</span>   <span class=\"comment\">//a是一个基本类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  b = &#123;<span class=\"attr\">m</span>: <span class=\"number\">20</span> &#125;   <span class=\"comment\">//b是一个对象</span></span><br></pre></td></tr></table></figure>\n<p>对应内存存储：<br><img src=\"https://img-blog.csdnimg.cn/20200520134555480.png\" alt=\"在这里插入图片描述\"><br>当我们执行 b={m:30}时，堆内存就有新的对象{m：30}，栈内存的b指向新的空间地址( 指向{m：30} )，而堆内存中原来的{m：20}就会被程序引擎垃圾回收掉，节约内存空间。我们知道js函数也是对象，它也是在堆与栈内存中存储的，我们来看一下转化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200520134802643.png\" alt=\"在这里插入图片描述\"><br><strong>栈是一种先进后出的数据结构：</strong><br><strong>1 在执行fn前，此时我们在全局执行环境(浏览器就是window作用域)，全局作用域里有个变量a；</strong></p>\n<p><strong>2 进入fn，此时栈内存就会push一个fn的执行环境，这个环境里有变量b和函数对象fn1，这里可以访问自身执行环境和全局执行环境所定义的变量</strong></p>\n<p><strong>3 进入fn1，此时栈内存就会push 一个fn1的执行环境，这里面没有定义其他变量，但是我们可以访问到fn和全局执行环境里面的变量，因为程序在访问变量时，是向底层栈一个个找，如果找到全局执行环境里都没有对应变量，则程序抛出underfined的错误。</strong></p>\n<p> <strong>4 随着fn1()执行完毕，fn1的执行环境被杯销毁，接着执行完fn()，fn的执行环境也会被销毁，只剩全局的执行环境下，现在没有b变量，和fn1函数对象了，只有a 和 fn(函数声明作用域是window下)</strong><br><br><br>在函数内访问某个变量是根据函数作用域链来判断变量是否存在的，而函数作用域链是程序根据函数所在的执行环境栈来初始化的，所以上面的例子，我们在fn1里面打印变量b，根据fn1的作用域链的找到对应fn执行环境下的变量b。所以当程序在调用某个函数时，做了一下的工作：准备执行环境，初始函数作用域链和arguments参数对象<br><br><br>我们现在看回最初的例子outer与inner</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span>  a = <span class=\"string\">&#x27;变量1&#x27;</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span>  inner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.info(a)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner    <span class=\"comment\">// inner 就是一个闭包函数，因为他能够访问到outer函数的作用域</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  inner = outer()   <span class=\"comment\">// 获得inner闭包函数</span></span><br><span class=\"line\">inner()   <span class=\"comment\">//&quot;变量1&quot;</span></span><br></pre></td></tr></table></figure>\n<p>当程序执行完var inner = outer()，其实outer的执行环境并没有被销毁，因为他里面的变量a仍然被被inner的函数作用域链所引用，当程序执行完inner(), 这时候，inner和outer的执行环境才会被销毁调；《JavaScript高级编程》书中建议：由于闭包会携带包含它的函数的作用域，因为会比其他函数占用更多内容，过度使用闭包，会导致内存占用过多。</p>\n<hr>\n<h2 id=\"js闭包的各种坑\"><a href=\"#js闭包的各种坑\" class=\"headerlink\" title=\"js闭包的各种坑\"></a>js闭包的各种坑</h2><p><strong>坑点1： 引用的变量可能发生变化</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">             result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">             &#125;;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>看样子result每个闭包函数对打印对应数字，1,2,3,4,…,10, 实际不是，因为每个闭包函数访问变量i是outer执行环境下的变量i，随着循环的结束，i已经变成10了，所以每个函数内部的 i 值都是10，<br>怎么解决这个问题呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        result[i] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> num; <span class=\"comment\">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span></span><br><span class=\"line\">            &#125;();</span><br><span class=\"line\">        &#125;)(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(outer()); <span class=\"comment\">//0,1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure>\n<p>`我们没有直接把闭包赋值给数组，而是定义一个匿名函数，并立即执行该匿名函数的结果赋值给数组。我们在调用匿名函数时，我们传入的变量 i 。由于函数是按值传递的，所以将变量 i 的当前值复制给num。而这个匿名函数的内部，又创建并返回一个访问num的闭包。这样一来result数组中的每个函数都有自己的num变量的一个副本，因此返回不同的数值。</p>\n<br>\n\n<p><strong>坑点2: this指向问题</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">getNameFuce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFuce()()); <span class=\"comment\">// The Window</span></span><br></pre></td></tr></table></figure>\n<p>由于getNameFuce()返回的是一个函数，因此调用object.getNameFuce()()就会立即调用它返回的函数，所以它返回的函数就相当于Window调用的，结果就返回一个全局的字符串The Window”。<br><strong>因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</strong></p>\n<br>\n\n<p><strong>this和arguments。内部函数在搜索这两个对象时，只会搜索到其活动对象为止，因此永远不能直接访问外部函数中的这两个变量。如果想访问作用域中的 this 和 arguments 对象，必须将该对象的引用保存到另一个闭包能够访问的变量之中。</strong></p>\n<p>我们可以把外部作用域中的this对象保存在一个闭包能够访问到的变量里，就可以让闭包访问该对象了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">getNameFuce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFuce()()); <span class=\"comment\">// My Object</span></span><br></pre></td></tr></table></figure>\n<p>在定义匿名函数之前，我们把 this 对象赋值给一个名叫that的变量。而定义了闭包之后，闭包可以访问这变量，因为它是我们在包含函数中特意声明的变量。即使在函数返回之后，that 也仍然引用着 object ，所以调用object.getNameFuce()() 就返回了  “My Object”。</p>\n<p>下面几种特殊情况，this 的值也可能发生意外的改变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;The Window&quot;</span>;</span><br><span class=\"line\"> object = &#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>: <span class=\"string\">&quot;My Object&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(object.getName()); <span class=\"comment\">// My Object</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log((object.getName)()); <span class=\"comment\">// My Object</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log((object.getName = object.getName)()); <span class=\"comment\">// The Window 非严格模式下</span></span><br></pre></td></tr></table></figure>\n<p>第一行是代码正常调用。第二行(object.getName)()调用 和object.getName() 是一样的。我们看一下第三行，先执行一条赋值语句，再调用赋值后的结果。因为这个赋值表达式的值是函数本身所有 this 的值不能得到维持，结果就返回了”The Window”。<br>当然我们在开发的时候，不会用第二行和第三行代码，不过，这个例子有助于说明即使是语法的细微变化，都有可能意外的改变 this 值。</p>\n<br>\n\n<p><strong>坑点3：内存泄露问题</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">showId</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      aler(el.id)   <span class=\"comment\">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改成下面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">showId</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id  = el.id</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      aler(id) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    el = <span class=\"literal\">null</span>    <span class=\"comment\">// 主动释放el</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>闭包会引用包含函数的整个活动对象，而其中包含着el。即使闭包不直接引用el，包含函数的活动对象中也会保存一个引用，因此有必要吧el变量设置为null。</strong></p>\n<br>\n\n<p><strong>技巧1： 用闭包解决递归调用问题（当然现在大多用es6的let 和const 定义）</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * factorial(num - <span class=\"number\">1</span>); <span class=\"comment\">//会产生耦合</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>)); <span class=\"comment\">//报错 1.html:2030 Uncaught TypeError: factorial is not a function</span></span><br></pre></td></tr></table></figure>\n<p>以上代码先把 factorial() 函数保存到变量 f 中，然后将 factorial 变量设置为null。结果指向原始函数的引用就只有一个 f ，但接下来调用 f() 时，由于必须执行 factorial() ,而 factorial 已经不再是函数了，所以就会导致错误，在这种情况下可以使用 arguments.callee() 可以解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>)); <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<p> <strong>arguments.callee 是一个指向正在执行的函数的指针</strong>。但是在严格模式下，不能通过脚本访问 arguments.callee ，我们还可以用闭包的方式来解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> factorial = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * f(num - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = factorial;</span><br><span class=\"line\">factorial = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>)); <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<p>这样就没有问题了，实际上起作用的是闭包函数f，而不是外面的函数newFactorial，这样在严格模式和非严格模式都能使用。</p>\n<br>\n\n<p><strong>技巧2：用闭包模仿块级作用域</strong></p>\n<p>es6没出来之前，用var定义变量存在变量提升问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;)(); </span><br></pre></td></tr></table></figure>\n<p>这是立即调用一个匿名函数</p>\n<br>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先定义一个函数然后再立即调用它，定义函数的方式是创建一个匿名函数，并把匿名函数赋值给变量someFunction  。<br>那么是不是也可以用函数的值直接取代函数名呢？然而下面的代码会导致错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里是块级作用域</span></span><br><span class=\"line\">&#125;();    <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<p>这段代码会导致语法错误，是因为JavaScript将function 关键字作为一个函数声明的开始，而函数声明后面不能跟圆括号。然而，<strong>函数表达式</strong>的后面可以跟圆括号，要将函数声明转化为函数表达式，加上圆括号即可。</p>\n<br>\n\n<p>无论在什么地方，只要临时需要一些变量，就可以使用私有作用域，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumber</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 报错 Uncaught ReferenceError: i is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">outputNumber(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下闭包的好处与坏处</p>\n<p><strong>好处</strong></p>\n<p><strong>①保护函数内的变量安全 ，实现封装，防止变量流入其他环境发生命名冲突<br>②在内存中维持一个变量，可以做缓存（但使用多了同时也是一项缺点，消耗内存）<br>③匿名自执行函数可以减少内存消耗</strong></p>\n<p><strong>坏处</strong></p>\n<p><strong>①其中一点上面已经有体现了，就是被引用的私有变量不能被销毁，增大了内存消耗，造成内存泄漏，解决方法是可以在使用完变量后手动为它赋值为null；<br>②其次由于闭包涉及跨域访问，所以会导致性能损失，我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响</strong></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}