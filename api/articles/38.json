{"title":"JavaScript 性能优化之函数绑定","slug":"38","date":"2020-06-04T02:41:38.000Z","updated":"2022-07-29T04:22:04.781Z","comments":true,"path":"api/articles/38.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/0a53b3c5738d4b368d5a6c9cc9d693c2.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/0a53b3c5738d4b368d5a6c9cc9d693c2.jpg\"></p>\n<span id=\"more\"></span>\n\n<p><span style=\"color:red\"><strong>函数绑定</strong>：在特定的 this 环境中，以指定参数调用另一个函数。常常与回调函数和事件处理程序一起使用一遍在将函数作为变量传递的同时保留代码执行环境。</span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&quot;click&quot;</span>, handler.sayName, <span class=\"literal\">false</span>) <span class=\"comment\">//undefiend</span></span><br></pre></td></tr></table></figure>\n<p>结果显示的是undefiend，这是因为没有保存handler .sayName() 的环境，所以 this 指向DOM按钮而非handler（在IE8中 this 指向window）。</p>\n<br>\n\n<p>解决方法：<br>ES5为所有的函数定义一个原生的 bind() 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;:&quot;</span> + event.type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&quot;click&quot;</span>, handler.sayName.bind(handler), <span class=\"literal\">false</span>) <span class=\"comment\">//阿清:click</span></span><br></pre></td></tr></table></figure>\n\n\n<p><span style=\"color:red\"><strong>bind函数接收一个参数：一个环境。在给定的环境中调用函数。</strong></span></p>\n<p>只要是将某个函数指针以值的形式进行传递，同时该函数必须在特定环境中执行，被绑定函数的效用就突显出来了。<strong>它们主要用于事件处理程序以及setTimeout() 和setInterval()。</strong> <strong>然而，被绑定函数与普通函数相比有更多的开销，它们需要更多内存，同时也因为多重函数调用稍微慢一点，所以最好只在必要时使用。</strong></p>\n<hr>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n\n\n","more":"<p><span style=\"color:red\"><strong>函数绑定</strong>：在特定的 this 环境中，以指定参数调用另一个函数。常常与回调函数和事件处理程序一起使用一遍在将函数作为变量传递的同时保留代码执行环境。</span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&quot;click&quot;</span>, handler.sayName, <span class=\"literal\">false</span>) <span class=\"comment\">//undefiend</span></span><br></pre></td></tr></table></figure>\n<p>结果显示的是undefiend，这是因为没有保存handler .sayName() 的环境，所以 this 指向DOM按钮而非handler（在IE8中 this 指向window）。</p>\n<br>\n\n<p>解决方法：<br>ES5为所有的函数定义一个原生的 bind() 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;:&quot;</span> + event.type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&quot;click&quot;</span>, handler.sayName.bind(handler), <span class=\"literal\">false</span>) <span class=\"comment\">//阿清:click</span></span><br></pre></td></tr></table></figure>\n\n\n<p><span style=\"color:red\"><strong>bind函数接收一个参数：一个环境。在给定的环境中调用函数。</strong></span></p>\n<p>只要是将某个函数指针以值的形式进行传递，同时该函数必须在特定环境中执行，被绑定函数的效用就突显出来了。<strong>它们主要用于事件处理程序以及setTimeout() 和setInterval()。</strong> <strong>然而，被绑定函数与普通函数相比有更多的开销，它们需要更多内存，同时也因为多重函数调用稍微慢一点，所以最好只在必要时使用。</strong></p>\n<hr>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"性能优化","path":"api/tags/性能优化.json"}]}