{"title":"webpack5简单介绍","slug":"59","date":"2020-07-17T06:31:49.000Z","updated":"2022-07-29T04:22:04.768Z","comments":true,"path":"api/articles/59.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/abcedf8e184a4a01ba2b256955d0ca3b.jpeg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/abcedf8e184a4a01ba2b256955d0ca3b.jpeg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"webpack5\"><a href=\"#webpack5\" class=\"headerlink\" title=\"webpack5\"></a>webpack5</h1><p>此版本重点关注以下内容:</p>\n<ul>\n<li>通过持久缓存提高构建性能.</li>\n<li>使用更好的算法和默认值来改善长期缓存.</li>\n<li>通过更好的树摇和代码生成来改善捆绑包大小.</li>\n<li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li>\n<li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ul>\n<li>npm i webpack@next webpack-cli -D</li>\n</ul>\n<h2 id=\"自动删除-Node-js-Polyfills\"><a href=\"#自动删除-Node-js-Polyfills\" class=\"headerlink\" title=\"自动删除 Node.js Polyfills\"></a>自动删除 Node.js Polyfills</h2><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p>\n<p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p>\n<p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p>\n<p>迁移：</p>\n<ul>\n<li>尽可能尝试使用与前端兼容的模块。</li>\n<li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li>\n</ul>\n<h2 id=\"Chunk-和模块-ID\"><a href=\"#Chunk-和模块-ID\" class=\"headerlink\" title=\"Chunk 和模块 ID\"></a>Chunk 和模块 ID</h2><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p>\n<p><code>chunkIds: &quot;deterministic&quot;, moduleIds: &quot;deterministic&quot;</code></p>\n<h2 id=\"Chunk-ID\"><a href=\"#Chunk-ID\" class=\"headerlink\" title=\"Chunk ID\"></a>Chunk ID</h2><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p>\n<p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p>\n<h2 id=\"Tree-Shaking\"><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree Shaking\"></a>Tree Shaking</h2><ol>\n<li>webpack 现在能够处理对嵌套模块的 tree shaking</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inner.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> inner <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./inner&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; inner &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// user.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"built_in\">module</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./module&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.inner.a);</span><br></pre></td></tr></table></figure>\n\n<p>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p>\n<ol start=\"2\">\n<li>webpack 现在能够多个模块之前的关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; something &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./something&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">usingSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> usingSomething();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当设置了<code>&quot;sideEffects&quot;: false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>&quot;./something&quot;</code></p>\n<ol start=\"3\">\n<li>webpack 现在能处理对 Commonjs 的 tree shaking</li>\n</ol>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>webpack 4 默认只能输出 ES5 代码</p>\n<p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p>\n<p>如：<code>output.ecmaVersion: 2015</code></p>\n<h2 id=\"SplitChunk\"><a href=\"#SplitChunk\" class=\"headerlink\" title=\"SplitChunk\"></a>SplitChunk</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack4</span></span><br><span class=\"line\"><span class=\"attr\">minSize</span>: <span class=\"number\">30000</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack5</span></span><br><span class=\"line\"><span class=\"attr\">minSize</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">javascript</span>: <span class=\"number\">30000</span>,</span><br><span class=\"line\">  <span class=\"attr\">style</span>: <span class=\"number\">50000</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置缓存</span></span><br><span class=\"line\"><span class=\"attr\">cache</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 磁盘存储</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;filesystem&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">buildDependencies</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当配置修改时，缓存失效</span></span><br><span class=\"line\">    <span class=\"attr\">config</span>: [__filename]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缓存将存储到 <code>node_modules/.cache/webpack</code></p>\n<h2 id=\"监视输出文件\"><a href=\"#监视输出文件\" class=\"headerlink\" title=\"监视输出文件\"></a>监视输出文件</h2><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p>\n<p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><ul>\n<li><code>entry: &quot;./src/index.js</code></li>\n<li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li>\n<li><code>output.filename: &quot;[name].js&quot;</code></li>\n</ul>\n<h2 id=\"更多内容\"><a href=\"#更多内容\" class=\"headerlink\" title=\"更多内容\"></a>更多内容</h2><p><a href=\"https://github.com/webpack/changelog-v5\">https://github.com/webpack/changelog-v5</a></p>\n","more":"<h1 id=\"webpack5\"><a href=\"#webpack5\" class=\"headerlink\" title=\"webpack5\"></a>webpack5</h1><p>此版本重点关注以下内容:</p>\n<ul>\n<li>通过持久缓存提高构建性能.</li>\n<li>使用更好的算法和默认值来改善长期缓存.</li>\n<li>通过更好的树摇和代码生成来改善捆绑包大小.</li>\n<li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</li>\n<li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ul>\n<li>npm i webpack@next webpack-cli -D</li>\n</ul>\n<h2 id=\"自动删除-Node-js-Polyfills\"><a href=\"#自动删除-Node-js-Polyfills\" class=\"headerlink\" title=\"自动删除 Node.js Polyfills\"></a>自动删除 Node.js Polyfills</h2><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途现在主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块的 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用。</p>\n<p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的。</p>\n<p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块。</p>\n<p>迁移：</p>\n<ul>\n<li>尽可能尝试使用与前端兼容的模块。</li>\n<li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标。</li>\n</ul>\n<h2 id=\"Chunk-和模块-ID\"><a href=\"#Chunk-和模块-ID\" class=\"headerlink\" title=\"Chunk 和模块 ID\"></a>Chunk 和模块 ID</h2><p>添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能。</p>\n<p><code>chunkIds: &quot;deterministic&quot;, moduleIds: &quot;deterministic&quot;</code></p>\n<h2 id=\"Chunk-ID\"><a href=\"#Chunk-ID\" class=\"headerlink\" title=\"Chunk ID\"></a>Chunk ID</h2><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p>\n<p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2)命名了</p>\n<h2 id=\"Tree-Shaking\"><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree Shaking\"></a>Tree Shaking</h2><ol>\n<li>webpack 现在能够处理对嵌套模块的 tree shaking</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inner.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> inner <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./inner&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; inner &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// user.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"built_in\">module</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./module&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.inner.a);</span><br></pre></td></tr></table></figure>\n\n<p>在生产环境中, inner 模块暴露的 <code>b</code> 会被删除</p>\n<ol start=\"2\">\n<li>webpack 现在能够多个模块之前的关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; something &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./something&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">usingSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> usingSomething();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当设置了<code>&quot;sideEffects&quot;: false</code>时，一旦发现<code>test</code>方法没有使用，不但删除<code>test</code>，还会删除<code>&quot;./something&quot;</code></p>\n<ol start=\"3\">\n<li>webpack 现在能处理对 Commonjs 的 tree shaking</li>\n</ol>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>webpack 4 默认只能输出 ES5 代码</p>\n<p>webpack 5 开始新增一个属性 output.ecmaVersion, 可以生成 ES5 和 ES6 / ES2015 代码.</p>\n<p>如：<code>output.ecmaVersion: 2015</code></p>\n<h2 id=\"SplitChunk\"><a href=\"#SplitChunk\" class=\"headerlink\" title=\"SplitChunk\"></a>SplitChunk</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack4</span></span><br><span class=\"line\"><span class=\"attr\">minSize</span>: <span class=\"number\">30000</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack5</span></span><br><span class=\"line\"><span class=\"attr\">minSize</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">javascript</span>: <span class=\"number\">30000</span>,</span><br><span class=\"line\">  <span class=\"attr\">style</span>: <span class=\"number\">50000</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置缓存</span></span><br><span class=\"line\"><span class=\"attr\">cache</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 磁盘存储</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;filesystem&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">buildDependencies</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当配置修改时，缓存失效</span></span><br><span class=\"line\">    <span class=\"attr\">config</span>: [__filename]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缓存将存储到 <code>node_modules/.cache/webpack</code></p>\n<h2 id=\"监视输出文件\"><a href=\"#监视输出文件\" class=\"headerlink\" title=\"监视输出文件\"></a>监视输出文件</h2><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时会只更新修改的文件。</p>\n<p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件。</p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><ul>\n<li><code>entry: &quot;./src/index.js</code></li>\n<li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li>\n<li><code>output.filename: &quot;[name].js&quot;</code></li>\n</ul>\n<h2 id=\"更多内容\"><a href=\"#更多内容\" class=\"headerlink\" title=\"更多内容\"></a>更多内容</h2><p><a href=\"https://github.com/webpack/changelog-v5\">https://github.com/webpack/changelog-v5</a></p>","categories":[{"name":"WebPack","path":"api/categories/WebPack.json"}],"tags":[{"name":"WebPack5","path":"api/tags/WebPack5.json"}]}