{"title":"ES6之Promise的使用","slug":"77","date":"2020-08-03T04:43:06.000Z","updated":"2022-07-29T04:22:04.764Z","comments":true,"path":"api/articles/77.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/256f40f171ae48459ab8e570c92a78db.jpeg","https://qny.aqingya.cn/img/20200803104903.png","https://qny.aqingya.cn/img/20200803120637.png","https://qny.aqingya.cn/img/20200803113004.png","https://qny.aqingya.cn/img/20200803121104.png","https://qny.aqingya.cn/img/20200803121151.png","https://qny.aqingya.cn/img/20200803124030.png","https://qny.aqingya.cn/img/20200803130143.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/256f40f171ae48459ab8e570c92a78db.jpeg\"></p>\n<span id=\"more\"></span>\n\n<br>\n\n\n\n<h2 id=\"Promise-的基本使用\"><a href=\"#Promise-的基本使用\" class=\"headerlink\" title=\"Promise 的基本使用\"></a>Promise 的基本使用</h2><p>🔷Promise到底是做什么的呢？</p>\n<p> &emsp;&emsp;🔹<span style=\"color:red\">Promise是异步编程的一种解决方案。</span></p>\n<br>\n\n<p>🔷那什么时候我们会来处理异步事件呢？</p>\n<p>&emsp;&emsp;🔹一种很常见的场景应该就是网络请求了。</p>\n<p>&emsp;&emsp;🔹 我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。</p>\n<p>&emsp;&emsp;🔹所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。</p>\n<p>&emsp;&emsp;🔹如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。</p>\n<p>但是，当网络请求非常复杂时，就会出现回调地狱。</p>\n<p>OK，我以一个非常夸张的案例来说明。</p>\n<p>🔷我们来考虑下面的场景(有夸张的成分)：</p>\n<p>&emsp;&emsp;🔹我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2</p>\n<p>&emsp;&emsp;🔹我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3</p>\n<p>&emsp;&emsp;🔹我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4</p>\n<p>&emsp;&emsp;🔹发送网络请求url4，获取最终的数据data4</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803104903.png\"></p>\n<p>🔷上面的代码有什么问题吗？</p>\n<p>&emsp;&emsp;🔹正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。</p>\n<p>&emsp;&emsp;🔹但是，这样额代码难看而且不容易维护。</p>\n<p>&emsp;&emsp;🔹我们更加期望的是一种更加优雅的方式来进行这种异步操作。</p>\n<p>🔷如何做呢？就是使用Promise。</p>\n<p>&emsp;&emsp;🔹Promise可以以一种非常优雅的方式来解决这个问题。</p>\n<p>我们先来看看Promise最基本的语法。</p>\n<p>这里，我们用一个定时器来模拟异步事件：</p>\n<p>假设下面的data是从网络上1秒后请求的数据</p>\n<p>console.log就是我们的处理方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>一般情况下是有异步操作时，使用Promise对这个异步操作进行封装，</p>\n<p>new-&gt; 构造函数（1.保存一些状态信息，2.执行传入的函数）</p>\n<p>在执行传入的回调函数的时候，会传入两个参数，resolve，reject，他们本身又是函数，</p>\n<p>当请求操作成功的时候，会调用resolve() 函数，拿到请求到的数据会在new Promise 出来的Promise对象的 then 方法中进行操作，then方法的参数又是一个函数。 </p>\n<p>当请求操作失败的时候，会调用reject() 函数，得到失败的信息，将会被new Promise 出来的Promise对象的 catch 方法捕获。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;hello Promise&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;error message!!!&quot;)</span></span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Promise三种状态\"><a href=\"#Promise三种状态\" class=\"headerlink\" title=\"Promise三种状态\"></a>Promise三种状态</h2><p>🔹pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p>\n<p>🔹fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p>\n<p>🔹reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p>\n<br>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200803120637.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803113004.png\"></p>\n<br>\n\n<h2 id=\"Promise链式调用\"><a href=\"#Promise链式调用\" class=\"headerlink\" title=\"Promise链式调用\"></a><strong>Promise链式调用</strong></h2><p>无论是then还是catch都可以返回一个Promise对象。所以，我们的代码其实是可以进行链式调用的：</p>\n<p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了</p>\n<p>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数</p>\n<p>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803121104.png\"></p>\n<br>\n\n<p><strong>链式调用简写</strong></p>\n<p>简化版代码：</p>\n<p>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据</p>\n<p>注意下面的代码中，我讲return Promise.resovle(data)改成了return data。结果依然是一样的</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803121151.png\"></p>\n<br>\n\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><p>Promise实例具有then方法，也就是说then方法时定义在原型对象上的。</p>\n<p>它的作用是为Promise实例添加状态改变时的回调函数。</p>\n<p>前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数（可选）。</p>\n<p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）因此可以采用链式写法，即then方法后面再调用另一个then方法。</p>\n<p>采用链式的then可以指定一组按照次序调用的回调函数。这时，前一个回调函数可能返回一个还是Promise对象（即有异步操作），这时候一个回调函数就会等该Promise对象的状态发生变化，才会被调用。</p>\n<br>\n\n<h2 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a><strong>Promise.prototype.catch()</strong></h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve(&quot;hello Promise&quot;)</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;error message!!!&quot;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);      <span class=\"comment\">// 打印错误信息</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p>Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</p>\n<p>当我们又这样的一个需求的时候：我们需要发两次请求或者多次请求，我们需要等这些请求都完成之后，再进行一个需求操作。那么这个时候我们如何来实现的？我们就可以使用 Promise.all() 。</p>\n<p>我们这里还是使用 setTimeout() 来模拟请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;  <span class=\"comment\">// 网络请求一</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;\t\t\t\t\t\t\t   <span class=\"comment\">//网络请求一得到的数据</span></span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,                      </span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;  <span class=\"comment\">//网络请求二</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;\t\t\t\t\t\t\t   <span class=\"comment\">//网络请求二得到的数据</span></span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;大大怪将军&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">19</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200803124030.png\"></p>\n<p>当网络请求都完成的时候，就会执行 Promise.all() 的then方法。网络请求的数据都会放在 results 数组中。然后我们就可以对其进行操作。</p>\n<p><span style=\"color:red\">需要特别注意的是，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即<em>请求1</em>的结果在前，即便<em>请求1</em>的结果获取的比<em>请求2</em>要晚。</span></p>\n<br>\n\n<h2 id=\"Promise-race的使用\"><a href=\"#Promise-race的使用\" class=\"headerlink\" title=\"Promise.race的使用\"></a><strong>Promise.race的使用</strong></h2><p>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p>\n<p>顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; <span class=\"comment\">// 网络请求一</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; <span class=\"comment\">//网络请求二</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;大大怪将军&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">19</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200803130143.png\"></p>\n<br>\n\n<p><a href=\"https://es6.ruanyifeng.com/#docs/promise\">es6 Promise教程 阮一峰</a></p>\n<br>\n\n<br>\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","more":"<br>\n\n\n\n<h2 id=\"Promise-的基本使用\"><a href=\"#Promise-的基本使用\" class=\"headerlink\" title=\"Promise 的基本使用\"></a>Promise 的基本使用</h2><p>🔷Promise到底是做什么的呢？</p>\n<p> &emsp;&emsp;🔹<span style=\"color:red\">Promise是异步编程的一种解决方案。</span></p>\n<br>\n\n<p>🔷那什么时候我们会来处理异步事件呢？</p>\n<p>&emsp;&emsp;🔹一种很常见的场景应该就是网络请求了。</p>\n<p>&emsp;&emsp;🔹 我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。</p>\n<p>&emsp;&emsp;🔹所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。</p>\n<p>&emsp;&emsp;🔹如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。</p>\n<p>但是，当网络请求非常复杂时，就会出现回调地狱。</p>\n<p>OK，我以一个非常夸张的案例来说明。</p>\n<p>🔷我们来考虑下面的场景(有夸张的成分)：</p>\n<p>&emsp;&emsp;🔹我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2</p>\n<p>&emsp;&emsp;🔹我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3</p>\n<p>&emsp;&emsp;🔹我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4</p>\n<p>&emsp;&emsp;🔹发送网络请求url4，获取最终的数据data4</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803104903.png\"></p>\n<p>🔷上面的代码有什么问题吗？</p>\n<p>&emsp;&emsp;🔹正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。</p>\n<p>&emsp;&emsp;🔹但是，这样额代码难看而且不容易维护。</p>\n<p>&emsp;&emsp;🔹我们更加期望的是一种更加优雅的方式来进行这种异步操作。</p>\n<p>🔷如何做呢？就是使用Promise。</p>\n<p>&emsp;&emsp;🔹Promise可以以一种非常优雅的方式来解决这个问题。</p>\n<p>我们先来看看Promise最基本的语法。</p>\n<p>这里，我们用一个定时器来模拟异步事件：</p>\n<p>假设下面的data是从网络上1秒后请求的数据</p>\n<p>console.log就是我们的处理方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;你好！！！&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>一般情况下是有异步操作时，使用Promise对这个异步操作进行封装，</p>\n<p>new-&gt; 构造函数（1.保存一些状态信息，2.执行传入的函数）</p>\n<p>在执行传入的回调函数的时候，会传入两个参数，resolve，reject，他们本身又是函数，</p>\n<p>当请求操作成功的时候，会调用resolve() 函数，拿到请求到的数据会在new Promise 出来的Promise对象的 then 方法中进行操作，then方法的参数又是一个函数。 </p>\n<p>当请求操作失败的时候，会调用reject() 函数，得到失败的信息，将会被new Promise 出来的Promise对象的 catch 方法捕获。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;hello Promise&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// reject(&quot;error message!!!&quot;)</span></span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Promise三种状态\"><a href=\"#Promise三种状态\" class=\"headerlink\" title=\"Promise三种状态\"></a>Promise三种状态</h2><p>🔹pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p>\n<p>🔹fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p>\n<p>🔹reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p>\n<br>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200803120637.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803113004.png\"></p>\n<br>\n\n<h2 id=\"Promise链式调用\"><a href=\"#Promise链式调用\" class=\"headerlink\" title=\"Promise链式调用\"></a><strong>Promise链式调用</strong></h2><p>无论是then还是catch都可以返回一个Promise对象。所以，我们的代码其实是可以进行链式调用的：</p>\n<p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了</p>\n<p>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数</p>\n<p>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803121104.png\"></p>\n<br>\n\n<p><strong>链式调用简写</strong></p>\n<p>简化版代码：</p>\n<p>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据</p>\n<p>注意下面的代码中，我讲return Promise.resovle(data)改成了return data。结果依然是一样的</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200803121151.png\"></p>\n<br>\n\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><p>Promise实例具有then方法，也就是说then方法时定义在原型对象上的。</p>\n<p>它的作用是为Promise实例添加状态改变时的回调函数。</p>\n<p>前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数（可选）。</p>\n<p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）因此可以采用链式写法，即then方法后面再调用另一个then方法。</p>\n<p>采用链式的then可以指定一组按照次序调用的回调函数。这时，前一个回调函数可能返回一个还是Promise对象（即有异步操作），这时候一个回调函数就会等该Promise对象的状态发生变化，才会被调用。</p>\n<br>\n\n<h2 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch()\"></a><strong>Promise.prototype.catch()</strong></h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve(&quot;hello Promise&quot;)</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;error message!!!&quot;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);      <span class=\"comment\">// 打印错误信息</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p>Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</p>\n<p>当我们又这样的一个需求的时候：我们需要发两次请求或者多次请求，我们需要等这些请求都完成之后，再进行一个需求操作。那么这个时候我们如何来实现的？我们就可以使用 Promise.all() 。</p>\n<p>我们这里还是使用 setTimeout() 来模拟请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;  <span class=\"comment\">// 网络请求一</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;\t\t\t\t\t\t\t   <span class=\"comment\">//网络请求一得到的数据</span></span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,                      </span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;  <span class=\"comment\">//网络请求二</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;\t\t\t\t\t\t\t   <span class=\"comment\">//网络请求二得到的数据</span></span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;大大怪将军&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">19</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200803124030.png\"></p>\n<p>当网络请求都完成的时候，就会执行 Promise.all() 的then方法。网络请求的数据都会放在 results 数组中。然后我们就可以对其进行操作。</p>\n<p><span style=\"color:red\">需要特别注意的是，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即<em>请求1</em>的结果在前，即便<em>请求1</em>的结果获取的比<em>请求2</em>要晚。</span></p>\n<br>\n\n<h2 id=\"Promise-race的使用\"><a href=\"#Promise-race的使用\" class=\"headerlink\" title=\"Promise.race的使用\"></a><strong>Promise.race的使用</strong></h2><p>Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p>\n<p>顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; <span class=\"comment\">// 网络请求一</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;阿清&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; <span class=\"comment\">//网络请求二</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;大大怪将军&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">19</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200803130143.png\"></p>\n<br>\n\n<p><a href=\"https://es6.ruanyifeng.com/#docs/promise\">es6 Promise教程 阮一峰</a></p>\n<br>\n\n<br>\n\n<br>","categories":[{"name":"ES6","path":"api/categories/ES6.json"}],"tags":[{"name":"Promise","path":"api/tags/Promise.json"},{"name":"ES6","path":"api/tags/ES6.json"}]}