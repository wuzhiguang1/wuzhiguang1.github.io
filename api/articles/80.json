{"title":"Vue之axios详解","slug":"80","date":"2020-08-07T12:44:49.000Z","updated":"2022-07-29T04:22:04.761Z","comments":true,"path":"api/articles/80.json","excerpt":" [Figure] ","covers":["https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.9/photo/IMG_0075.PNG","https://qny.aqingya.cn/img/20200807114603.png","https://qny.aqingya.cn/img/20200807115413.png","https://qny.aqingya.cn/img/20200807115332.png","https://qny.aqingya.cn/img/20200807134444.png","https://qny.aqingya.cn/img/20200807134521.png","https://qny.aqingya.cn/img/20200807134923.png","https://qny.aqingya.cn/img/20200807134943.png","https://qny.aqingya.cn/img/20200807140410.png","https://qny.aqingya.cn/img/20200807163535.png","https://qny.aqingya.cn/img/20200807163548.png","https://qny.aqingya.cn/img/20200807202022.png","https://qny.aqingya.cn/img/20200807203844.png","https://qny.aqingya.cn/img/20200807203333.png","https://qny.aqingya.cn/img/20200807204036.png","https://qny.aqingya.cn/img/20200807204024.png","https://qny.aqingya.cn/img/20200807204128.png"],"content":"<p><img src=\"https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.9/photo/IMG_0075.PNG\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"为什么选择axios\"><a href=\"#为什么选择axios\" class=\"headerlink\" title=\"为什么选择axios?\"></a>为什么选择axios?</h2><p>🔷 功能特点:</p>\n<p>&emsp;&emsp;🔹在浏览器中发送 XMLHttpRequests 请求</p>\n<p>&emsp;&emsp;🔹在 node.js 中发送 http请求</p>\n<p>&emsp;&emsp;🔹支持 Promise API</p>\n<p>&emsp;&emsp;🔹拦截请求和响应</p>\n<p>&emsp;&emsp;🔹转换请求和响应数据</p>\n<br>\n\n<h2 id=\"axios-的请求方式\"><a href=\"#axios-的请求方式\" class=\"headerlink\" title=\"axios 的请求方式\"></a>axios 的请求方式</h2><p>🔷 支持多种请求方式:</p>\n<p>&emsp;&emsp;🔹 axios(config)</p>\n<p>&emsp;&emsp;🔹 axios.request(config)</p>\n<p>&emsp;&emsp;🔹 axios.get(url[, config])</p>\n<p>&emsp;&emsp;🔹 axios.delete(url[, config])</p>\n<p>&emsp;&emsp;🔹 axios.head(url[, config])</p>\n<p>&emsp;&emsp;🔹 axios.post(url[, data[, config]])</p>\n<p>&emsp;&emsp;🔹 axios.put(url[, data[, config]])</p>\n<p>&emsp;&emsp;🔹 axios.patch(url[, data[, config]])</p>\n<br>\n\n<h2 id=\"axios-发送基本请求\"><a href=\"#axios-发送基本请求\" class=\"headerlink\" title=\"axios 发送基本请求\"></a>axios 发送基本请求</h2><p><img src=\"https://qny.aqingya.cn/img/20200807114603.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807115413.png\"></p>\n<p>这里我们使用了axios(config) 的请求方式。</p>\n<p><span style=\"color:red\"><strong>config是一个对象，它默认是采用 GET 请求的，当然如果想要使用POST请求，可以添加 <code>method：“POST” </code></strong></span></p>\n<p><span style=\"color:red\"><strong>axios 它返回的是一个Promise对象，可以直接在后面使用then catch等方法。</strong></span></p>\n<br>\n\n<p>使用  axios.get(url[, config]) 发送请求演示。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807115332.png\"></p>\n<br>\n\n<h2 id=\"发送并发请求\"><a href=\"#发送并发请求\" class=\"headerlink\" title=\"发送并发请求\"></a>发送并发请求</h2><p>有时候, 我们可能需求同时发送两个请求</p>\n<p>使用axios.all, 可以放入多个请求的数组.</p>\n<p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p>\n<br>\n\n<p>使用axios.all()</p>\n<p>使用格式： <code>axios.all([axios(config),axios(config)])</code></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134444.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134521.png\"></p>\n<br>\n\n<p>使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2 </p>\n<p>使用格式： <code>axios.all([axios(config),axios(config)]).then(axios.spread())</code></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134923.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134943.png\"></p>\n<br>\n\n<h2 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a><strong>全局配置</strong></h2><p>🔷在上面的示例中, 我们的BaseURL是固定的</p>\n<p>&emsp;&emsp;🔹 事实上, 在开发中可能很多参数都是固定的。</p>\n<p>&emsp;&emsp;🔹 这个时候我们可以进行一些抽取, 将一些公共的配置抽取出来，也可以利用axiox的全局配置。</p>\n<p><code>axios.defaults</code></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807140410.png\"></p>\n<br>\n\n<h2 id=\"常用的配置选项\"><a href=\"#常用的配置选项\" class=\"headerlink\" title=\"常用的配置选项\"></a>常用的配置选项</h2><hr>\n<p>🔷请求类型</p>\n<p>&emsp;&emsp;🔹 method: ‘get’,</p>\n<p>🔷URL查询对象</p>\n<p>&emsp;&emsp;🔹 params:{ id: 12 },</p>\n<hr>\n<p>🔷请求类型</p>\n<p>&emsp;&emsp;🔹 method: ‘post’,</p>\n<p>🔷request body</p>\n<p>&emsp;&emsp;🔹 data: { key: ‘aa’},          </p>\n<hr>\n<p>我们需要注意的是，如果请求类型的get，则后面添加的请求参数应该使用的是  params{ } 。如果请求类型的post，则后面添加的请求参数应该使用的是  data{ } 。</p>\n<br>\n\n<p>🔷请求地址</p>\n<p>&emsp;&emsp;🔹 url: ‘/user’,</p>\n<p>🔷请根路径</p>\n<p>&emsp;&emsp;🔹 baseURL: ‘<a href=\"http://www.mt.com/api&#39;\">http://www.mt.com/api&#39;</a>,</p>\n<p>🔷超时设置s</p>\n<p>&emsp;&emsp;🔹 timeout: 1000,</p>\n<p>🔷请求前的数据处理</p>\n<p>&emsp;&emsp;🔹 transformRequest:[function(data){}],</p>\n<p>🔷请求后的数据处理</p>\n<p>&emsp;&emsp;🔹 transformResponse: [function(data){}],</p>\n<p>🔷自定义的请求头</p>\n<p>&emsp;&emsp;🔹 headers:{‘x-Requested-With’:’XMLHttpRequest’},</p>\n<p>🔷查询对象序列化函数</p>\n<p>&emsp;&emsp;🔹 paramsSerializer: function(params){ }</p>\n<p>🔷跨域是否带Token</p>\n<p>&emsp;&emsp;🔹 withCredentials: false,</p>\n<p>🔷自定义请求处理</p>\n<p>&emsp;&emsp;🔹 adapter: function(resolve, reject, config){},</p>\n<p>🔷身份验证信息</p>\n<p>&emsp;&emsp;🔹 auth: { uname: ‘’, pwd: ‘12’},</p>\n<p>🔷响应的数据格式 json / blob /document /arraybuffer / text / stream</p>\n<p>&emsp;&emsp;🔹 responseType: ‘json’,</p>\n<br>\n\n<h2 id=\"axios-实例\"><a href=\"#axios-实例\" class=\"headerlink\" title=\"axios 实例\"></a>axios 实例</h2><p>🔷 为什么要创建axios的实例呢?</p>\n<p>&emsp;&emsp;🔹 当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p>\n<p>&emsp;&emsp;🔹 当给该实例设置一些默认配置时, 这些配置就被固定下来了.</p>\n<p>&emsp;&emsp;🔹 但是后续开发中, 某些配置可能会不太一样.</p>\n<p>&emsp;&emsp;🔹 比如某些请求需要使用特定的<strong>baseURL</strong>或者<strong>timeout</strong>或者<strong>content-Type</strong>等.</p>\n<p>&emsp;&emsp;🔹 这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p>\n<p>所以当我们的业务比较多的时候，请求接口比较多，我们使用上面的全局配置就不行了。这个时候我们就要使用axios实例了。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807163535.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807163548.png\"></p>\n<br>\n\n<h2 id=\"网络请求模块的封装\"><a href=\"#网络请求模块的封装\" class=\"headerlink\" title=\"网络请求模块的封装\"></a>网络请求模块的封装</h2><p>我们为什么要axios进行封装？</p>\n<p>如果我们使用的 axios 有一天不进行了维护，或者出现重大的bug ，我们需要换其他的第三方网络请求框架。那么我们需要在每一个组件中都需要修改，很是不好。所以我们对网络请求模块进行封装，即使有一个我们需要改换其他的第三方网络请求框架，就只对我们的网络请求模块进去修改即可。</p>\n<br>\n\n<p>创建一个network文件夹。这里面放对网络封装相关的文件。</p>\n<p>创建request.js</p>\n<br>\n\n<p>封装一：</p>\n<p>使用回调函数。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config, success, failure</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\">  instance(config)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      success(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">      failure(rej)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; request &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./newwork/request&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;home/multidata&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;api/z8/home/data&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;pop&#x27;</span>, <span class=\"attr\">page</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>封装二：</p>\n<p>使用回调函数。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\">  instance(config.baseConfig)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      config.success(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fonfig.failure(rej)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/home/multidata&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">failure</span>(<span class=\"params\">rej</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(rej);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>封装三：</p>\n<p>使用Promise。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\">    instance(config)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(rej)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; request &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./newwork/request&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;home/multidata&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rej);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>封装四：（最终方案）</p>\n<p>使用Promise。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// axios 实例本身返回是一个Promise对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance(config)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; request &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./newwork/request&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;home/multidata&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rej);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"axios-拦截器的使用\"><a href=\"#axios-拦截器的使用\" class=\"headerlink\" title=\"axios 拦截器的使用\"></a>axios 拦截器的使用</h2><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</p>\n<br>\n\n<h3 id=\"axios-请求拦截器\"><a href=\"#axios-请求拦截器\" class=\"headerlink\" title=\"axios 请求拦截器\"></a>axios 请求拦截器</h3><p>🔷 为什么要拦截请求呐。</p>\n<p>&emsp;&emsp;🔹 我们对请求的config进行一些修改。</p>\n<p>&emsp;&emsp;🔹 比如config中的一些信息不符合服务器的要求。</p>\n<p>&emsp;&emsp;🔹 比如每次发送网络请求的时候，都希望在界面中显示一个请求的图标。</p>\n<p>&emsp;&emsp;🔹 比如某些网络请求（比如 登陆（携带token）），必须携带一些特殊的信息。</p>\n<p><code>instance.interceptors.request.use(参数一，参数二)</code> 传入两个参数，拦截请求成功函数，和拦截请求失败函数。</p>\n<p>注意：我们拦截之后，对请求做完一系列修改，我们要返回请求，不然后面我们请求不到数据。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807202022.png\"></p>\n<br>\n\n<p>🔷 请求拦截可以做到的事情：</p>\n<p>&emsp;&emsp;🔹 请求拦截中错误拦截较少，通常都是配置相关的拦截。</p>\n<p>&emsp;&emsp;🔹 可能的拦截的错误：比如请求超时，可以将页面跳转到一个错误页面中。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807203844.png\"></p>\n<br>\n\n<h3 id=\"axios-响应拦截器\"><a href=\"#axios-响应拦截器\" class=\"headerlink\" title=\"axios 响应拦截器\"></a>axios 响应拦截器</h3><p><code>instance.interceptors.response.use()</code> 响应拦截也是两个参数。拦截响应成功函数，和拦截响应失败函数。</p>\n<p>同样我们拦截到响应之后，要返回响应，通常返回<code>return response.data</code> 即可，因为我们只要数据。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807203333.png\"></p>\n<br>\n\n<p>🔷 响应拦截中完成的事情：</p>\n<p>&emsp;&emsp;🔹 响应的成功拦截中，主要是对数据进行过滤。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807204036.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807204024.png\"></p>\n<br>\n\n\n\n<p>&emsp;&emsp;🔹  响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807204128.png\"></p>\n<p><br><br></p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://11.11.11.11:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 2.请求拦截</span></span><br><span class=\"line\">  instance.interceptors.request.use(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 响应拦截</span></span><br><span class=\"line\">  instance.interceptors.response.use(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> response.data</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 3、发送网络请求请求</span></span><br><span class=\"line\">    <span class=\"comment\">// axios 实例返回是一个Promise对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance(config)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n<br>\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","more":"<h2 id=\"为什么选择axios\"><a href=\"#为什么选择axios\" class=\"headerlink\" title=\"为什么选择axios?\"></a>为什么选择axios?</h2><p>🔷 功能特点:</p>\n<p>&emsp;&emsp;🔹在浏览器中发送 XMLHttpRequests 请求</p>\n<p>&emsp;&emsp;🔹在 node.js 中发送 http请求</p>\n<p>&emsp;&emsp;🔹支持 Promise API</p>\n<p>&emsp;&emsp;🔹拦截请求和响应</p>\n<p>&emsp;&emsp;🔹转换请求和响应数据</p>\n<br>\n\n<h2 id=\"axios-的请求方式\"><a href=\"#axios-的请求方式\" class=\"headerlink\" title=\"axios 的请求方式\"></a>axios 的请求方式</h2><p>🔷 支持多种请求方式:</p>\n<p>&emsp;&emsp;🔹 axios(config)</p>\n<p>&emsp;&emsp;🔹 axios.request(config)</p>\n<p>&emsp;&emsp;🔹 axios.get(url[, config])</p>\n<p>&emsp;&emsp;🔹 axios.delete(url[, config])</p>\n<p>&emsp;&emsp;🔹 axios.head(url[, config])</p>\n<p>&emsp;&emsp;🔹 axios.post(url[, data[, config]])</p>\n<p>&emsp;&emsp;🔹 axios.put(url[, data[, config]])</p>\n<p>&emsp;&emsp;🔹 axios.patch(url[, data[, config]])</p>\n<br>\n\n<h2 id=\"axios-发送基本请求\"><a href=\"#axios-发送基本请求\" class=\"headerlink\" title=\"axios 发送基本请求\"></a>axios 发送基本请求</h2><p><img src=\"https://qny.aqingya.cn/img/20200807114603.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807115413.png\"></p>\n<p>这里我们使用了axios(config) 的请求方式。</p>\n<p><span style=\"color:red\"><strong>config是一个对象，它默认是采用 GET 请求的，当然如果想要使用POST请求，可以添加 <code>method：“POST” </code></strong></span></p>\n<p><span style=\"color:red\"><strong>axios 它返回的是一个Promise对象，可以直接在后面使用then catch等方法。</strong></span></p>\n<br>\n\n<p>使用  axios.get(url[, config]) 发送请求演示。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807115332.png\"></p>\n<br>\n\n<h2 id=\"发送并发请求\"><a href=\"#发送并发请求\" class=\"headerlink\" title=\"发送并发请求\"></a>发送并发请求</h2><p>有时候, 我们可能需求同时发送两个请求</p>\n<p>使用axios.all, 可以放入多个请求的数组.</p>\n<p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p>\n<br>\n\n<p>使用axios.all()</p>\n<p>使用格式： <code>axios.all([axios(config),axios(config)])</code></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134444.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134521.png\"></p>\n<br>\n\n<p>使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2 </p>\n<p>使用格式： <code>axios.all([axios(config),axios(config)]).then(axios.spread())</code></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134923.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807134943.png\"></p>\n<br>\n\n<h2 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a><strong>全局配置</strong></h2><p>🔷在上面的示例中, 我们的BaseURL是固定的</p>\n<p>&emsp;&emsp;🔹 事实上, 在开发中可能很多参数都是固定的。</p>\n<p>&emsp;&emsp;🔹 这个时候我们可以进行一些抽取, 将一些公共的配置抽取出来，也可以利用axiox的全局配置。</p>\n<p><code>axios.defaults</code></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807140410.png\"></p>\n<br>\n\n<h2 id=\"常用的配置选项\"><a href=\"#常用的配置选项\" class=\"headerlink\" title=\"常用的配置选项\"></a>常用的配置选项</h2><hr>\n<p>🔷请求类型</p>\n<p>&emsp;&emsp;🔹 method: ‘get’,</p>\n<p>🔷URL查询对象</p>\n<p>&emsp;&emsp;🔹 params:{ id: 12 },</p>\n<hr>\n<p>🔷请求类型</p>\n<p>&emsp;&emsp;🔹 method: ‘post’,</p>\n<p>🔷request body</p>\n<p>&emsp;&emsp;🔹 data: { key: ‘aa’},          </p>\n<hr>\n<p>我们需要注意的是，如果请求类型的get，则后面添加的请求参数应该使用的是  params{ } 。如果请求类型的post，则后面添加的请求参数应该使用的是  data{ } 。</p>\n<br>\n\n<p>🔷请求地址</p>\n<p>&emsp;&emsp;🔹 url: ‘/user’,</p>\n<p>🔷请根路径</p>\n<p>&emsp;&emsp;🔹 baseURL: ‘<a href=\"http://www.mt.com/api&#39;\">http://www.mt.com/api&#39;</a>,</p>\n<p>🔷超时设置s</p>\n<p>&emsp;&emsp;🔹 timeout: 1000,</p>\n<p>🔷请求前的数据处理</p>\n<p>&emsp;&emsp;🔹 transformRequest:[function(data){}],</p>\n<p>🔷请求后的数据处理</p>\n<p>&emsp;&emsp;🔹 transformResponse: [function(data){}],</p>\n<p>🔷自定义的请求头</p>\n<p>&emsp;&emsp;🔹 headers:{‘x-Requested-With’:’XMLHttpRequest’},</p>\n<p>🔷查询对象序列化函数</p>\n<p>&emsp;&emsp;🔹 paramsSerializer: function(params){ }</p>\n<p>🔷跨域是否带Token</p>\n<p>&emsp;&emsp;🔹 withCredentials: false,</p>\n<p>🔷自定义请求处理</p>\n<p>&emsp;&emsp;🔹 adapter: function(resolve, reject, config){},</p>\n<p>🔷身份验证信息</p>\n<p>&emsp;&emsp;🔹 auth: { uname: ‘’, pwd: ‘12’},</p>\n<p>🔷响应的数据格式 json / blob /document /arraybuffer / text / stream</p>\n<p>&emsp;&emsp;🔹 responseType: ‘json’,</p>\n<br>\n\n<h2 id=\"axios-实例\"><a href=\"#axios-实例\" class=\"headerlink\" title=\"axios 实例\"></a>axios 实例</h2><p>🔷 为什么要创建axios的实例呢?</p>\n<p>&emsp;&emsp;🔹 当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p>\n<p>&emsp;&emsp;🔹 当给该实例设置一些默认配置时, 这些配置就被固定下来了.</p>\n<p>&emsp;&emsp;🔹 但是后续开发中, 某些配置可能会不太一样.</p>\n<p>&emsp;&emsp;🔹 比如某些请求需要使用特定的<strong>baseURL</strong>或者<strong>timeout</strong>或者<strong>content-Type</strong>等.</p>\n<p>&emsp;&emsp;🔹 这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p>\n<p>所以当我们的业务比较多的时候，请求接口比较多，我们使用上面的全局配置就不行了。这个时候我们就要使用axios实例了。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807163535.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807163548.png\"></p>\n<br>\n\n<h2 id=\"网络请求模块的封装\"><a href=\"#网络请求模块的封装\" class=\"headerlink\" title=\"网络请求模块的封装\"></a>网络请求模块的封装</h2><p>我们为什么要axios进行封装？</p>\n<p>如果我们使用的 axios 有一天不进行了维护，或者出现重大的bug ，我们需要换其他的第三方网络请求框架。那么我们需要在每一个组件中都需要修改，很是不好。所以我们对网络请求模块进行封装，即使有一个我们需要改换其他的第三方网络请求框架，就只对我们的网络请求模块进去修改即可。</p>\n<br>\n\n<p>创建一个network文件夹。这里面放对网络封装相关的文件。</p>\n<p>创建request.js</p>\n<br>\n\n<p>封装一：</p>\n<p>使用回调函数。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config, success, failure</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\">  instance(config)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      success(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">      failure(rej)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; request &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./newwork/request&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;home/multidata&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;api/z8/home/data&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;pop&#x27;</span>, <span class=\"attr\">page</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>封装二：</p>\n<p>使用回调函数。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\">  instance(config.baseConfig)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      config.success(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fonfig.failure(rej)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseConfig</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/home/multidata&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">success</span>(<span class=\"params\">res</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">failure</span>(<span class=\"params\">rej</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(rej);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>封装三：</p>\n<p>使用Promise。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\">    instance(config)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(rej)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; request &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./newwork/request&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;home/multidata&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rej);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p>封装四：（最终方案）</p>\n<p>使用Promise。</p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://111.111.111.111:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 2、发送网络请求请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// axios 实例本身返回是一个Promise对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance(config)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; request &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./newwork/request&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;home/multidata&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">rej</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rej);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"axios-拦截器的使用\"><a href=\"#axios-拦截器的使用\" class=\"headerlink\" title=\"axios 拦截器的使用\"></a>axios 拦截器的使用</h2><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</p>\n<br>\n\n<h3 id=\"axios-请求拦截器\"><a href=\"#axios-请求拦截器\" class=\"headerlink\" title=\"axios 请求拦截器\"></a>axios 请求拦截器</h3><p>🔷 为什么要拦截请求呐。</p>\n<p>&emsp;&emsp;🔹 我们对请求的config进行一些修改。</p>\n<p>&emsp;&emsp;🔹 比如config中的一些信息不符合服务器的要求。</p>\n<p>&emsp;&emsp;🔹 比如每次发送网络请求的时候，都希望在界面中显示一个请求的图标。</p>\n<p>&emsp;&emsp;🔹 比如某些网络请求（比如 登陆（携带token）），必须携带一些特殊的信息。</p>\n<p><code>instance.interceptors.request.use(参数一，参数二)</code> 传入两个参数，拦截请求成功函数，和拦截请求失败函数。</p>\n<p>注意：我们拦截之后，对请求做完一系列修改，我们要返回请求，不然后面我们请求不到数据。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807202022.png\"></p>\n<br>\n\n<p>🔷 请求拦截可以做到的事情：</p>\n<p>&emsp;&emsp;🔹 请求拦截中错误拦截较少，通常都是配置相关的拦截。</p>\n<p>&emsp;&emsp;🔹 可能的拦截的错误：比如请求超时，可以将页面跳转到一个错误页面中。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807203844.png\"></p>\n<br>\n\n<h3 id=\"axios-响应拦截器\"><a href=\"#axios-响应拦截器\" class=\"headerlink\" title=\"axios 响应拦截器\"></a>axios 响应拦截器</h3><p><code>instance.interceptors.response.use()</code> 响应拦截也是两个参数。拦截响应成功函数，和拦截响应失败函数。</p>\n<p>同样我们拦截到响应之后，要返回响应，通常返回<code>return response.data</code> 即可，因为我们只要数据。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807203333.png\"></p>\n<br>\n\n<p>🔷 响应拦截中完成的事情：</p>\n<p>&emsp;&emsp;🔹 响应的成功拦截中，主要是对数据进行过滤。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807204036.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807204024.png\"></p>\n<br>\n\n\n\n<p>&emsp;&emsp;🔹  响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200807204128.png\"></p>\n<p><br><br></p>\n<p>request.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.创建实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = axios.create(&#123;</span><br><span class=\"line\">      <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;http://11.11.11.11:8000&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 2.请求拦截</span></span><br><span class=\"line\">  instance.interceptors.request.use(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 响应拦截</span></span><br><span class=\"line\">  instance.interceptors.response.use(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> response.data</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 3、发送网络请求请求</span></span><br><span class=\"line\">    <span class=\"comment\">// axios 实例返回是一个Promise对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance(config)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n<br>\n\n<br>","categories":[{"name":"Vue","path":"api/categories/Vue.json"}],"tags":[{"name":"AJAX","path":"api/tags/AJAX.json"},{"name":"axios","path":"api/tags/axios.json"},{"name":"Vue","path":"api/tags/Vue.json"},{"name":"请求模块封装","path":"api/tags/请求模块封装.json"},{"name":"拦截器","path":"api/tags/拦截器.json"}]}