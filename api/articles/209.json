{"title":"git从已有分支拉新分支开发","slug":"209","date":"2022-07-15T03:57:57.000Z","updated":"2022-07-21T08:25:41.197Z","comments":true,"path":"api/articles/209.json","excerpt":null,"covers":null,"content":"<p>开发过程中经常用到从master分支copy一个开发分支，下面我们就用<a href=\"https://so.csdn.net/so/search?q=%E5%91%BD%E4%BB%A4%E8%A1%8C&spm=1001.2101.3001.7020\">命令行</a>完成这个操作</p>\n<h3 id=\"1-切换到被copy的分支（master），并且从远端拉取最新版本\"><a href=\"#1-切换到被copy的分支（master），并且从远端拉取最新版本\" class=\"headerlink\" title=\"1. 切换到被copy的分支（master），并且从远端拉取最新版本\"></a><strong>1. 切换到被copy的分支（master），并且从远端拉取最新版本</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout master</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull</span></span><br></pre></td></tr></table></figure>\n\n<p>其中git pull 标准或完整的命令是git pull remote_repository_name branch_name,他们执行效果都一样所以省略写。</p>\n<h3 id=\"2-从当前分支拉copy开发分支\"><a href=\"#2-从当前分支拉copy开发分支\" class=\"headerlink\" title=\"2. 从当前分支拉copy开发分支\"></a><strong>2. 从当前分支拉copy开发分支</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout -b dev</span></span><br><span class=\"line\"></span><br><span class=\"line\">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-把新建的分支push到远端\"><a href=\"#3-把新建的分支push到远端\" class=\"headerlink\" title=\"3. 把新建的分支push到远端\"></a><strong>3. 把新建的分支push到远端</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-拉取远端分支\"><a href=\"#4-拉取远端分支\" class=\"headerlink\" title=\"4. 拉取远端分支\"></a><strong>4. 拉取远端分支</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>There is no tracking information for the current branch.<br>Please specify which branch you want to merge with.<br>See git-pull(1) for details.</p>\n<p>git pull <remote> <branch></p>\n<p>If you wish to set tracking information for this branch you can do so with:</p>\n<p>git branch –set-upstream-to=origin/<branch> dev</p>\n<p>经过验证，当前的分支并没有和本地分支关联，根据提示进行下一步：</p>\n</blockquote>\n<h3 id=\"5-关联\"><a href=\"#5-关联\" class=\"headerlink\" title=\"5. 关联\"></a><strong>5. 关联</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git branch --set-upstream-to=origin/dev</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：这里branch之后都是没有空格的，如果有空格则是错误命令。</p>\n<p>看评论这里有歧义，branch命令后面没有空格是说–set-upstream-to=origin/dev 这一窜命令都是连续的，中间没有空格。</p>\n<h3 id=\"6-再次拉取-验证\"><a href=\"#6-再次拉取-验证\" class=\"headerlink\" title=\"6. 再次拉取 验证\"></a><strong>6. 再次拉取 验证</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull</span></span><br></pre></td></tr></table></figure>\n\n<p>OK 到此搞定 结束！</p>\n<p><strong>1、从远程拉取分支到本地(当远程已经有分支的时候可以这样用)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 本地分支名x origin/远程分支名x</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、提交本地test分支作为远程的test分支（合并分支后可以用）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin test:test   // 提交本地test分支 作为远程的test分支</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a><strong>7. 总结</strong></h3><p>其实在git中要注意如下几点：</p>\n<p>第一点就是分支:</p>\n<p>git因分支而强大，所以要理解git中的分支，我们在一个远程服务下可以拉多个分支，比如生产主分支、测试分支、每个人的开发分支。</p>\n<p>第二点就是本地和远程:</p>\n<p>当我们在本地建了一个新分支有，还要把新分支推到远程也就是在远程建立一样的一个分支。所以我们在本地和远程建立分支后还要把他们关联起来，这样才有意义！！！</p>\n<p>第三点 git远程服务和git远程分支:</p>\n<p>某一个或某几个分支是在一个服务下的，就好比A项目在远程的服务是a那么在a服务下我们可以创建 master、test、dev多个测试分支。其实一个远程服务就是一个project因为在github或gitlab都是创建project。</p>\n<p>第四点 当我们从master分支上拉开发分支:</p>\n<p>我们在自己的开发分支上pull的时候会吧别人提交到master分支的代码回pull下来，而push的时候还是提交到了自己的开发分支，除非你把自己的开发分支合并到了master分支上。</p>\n","more":"<p>开发过程中经常用到从master分支copy一个开发分支，下面我们就用<a href=\"https://so.csdn.net/so/search?q=%E5%91%BD%E4%BB%A4%E8%A1%8C&spm=1001.2101.3001.7020\">命令行</a>完成这个操作</p>\n<h3 id=\"1-切换到被copy的分支（master），并且从远端拉取最新版本\"><a href=\"#1-切换到被copy的分支（master），并且从远端拉取最新版本\" class=\"headerlink\" title=\"1. 切换到被copy的分支（master），并且从远端拉取最新版本\"></a><strong>1. 切换到被copy的分支（master），并且从远端拉取最新版本</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout master</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull</span></span><br></pre></td></tr></table></figure>\n\n<p>其中git pull 标准或完整的命令是git pull remote_repository_name branch_name,他们执行效果都一样所以省略写。</p>\n<h3 id=\"2-从当前分支拉copy开发分支\"><a href=\"#2-从当前分支拉copy开发分支\" class=\"headerlink\" title=\"2. 从当前分支拉copy开发分支\"></a><strong>2. 从当前分支拉copy开发分支</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git checkout -b dev</span></span><br><span class=\"line\"></span><br><span class=\"line\">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-把新建的分支push到远端\"><a href=\"#3-把新建的分支push到远端\" class=\"headerlink\" title=\"3. 把新建的分支push到远端\"></a><strong>3. 把新建的分支push到远端</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git push origin dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-拉取远端分支\"><a href=\"#4-拉取远端分支\" class=\"headerlink\" title=\"4. 拉取远端分支\"></a><strong>4. 拉取远端分支</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>There is no tracking information for the current branch.<br>Please specify which branch you want to merge with.<br>See git-pull(1) for details.</p>\n<p>git pull <remote> <branch></p>\n<p>If you wish to set tracking information for this branch you can do so with:</p>\n<p>git branch –set-upstream-to=origin/<branch> dev</p>\n<p>经过验证，当前的分支并没有和本地分支关联，根据提示进行下一步：</p>\n</blockquote>\n<h3 id=\"5-关联\"><a href=\"#5-关联\" class=\"headerlink\" title=\"5. 关联\"></a><strong>5. 关联</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git branch --set-upstream-to=origin/dev</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：这里branch之后都是没有空格的，如果有空格则是错误命令。</p>\n<p>看评论这里有歧义，branch命令后面没有空格是说–set-upstream-to=origin/dev 这一窜命令都是连续的，中间没有空格。</p>\n<h3 id=\"6-再次拉取-验证\"><a href=\"#6-再次拉取-验证\" class=\"headerlink\" title=\"6. 再次拉取 验证\"></a><strong>6. 再次拉取 验证</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">git pull</span></span><br></pre></td></tr></table></figure>\n\n<p>OK 到此搞定 结束！</p>\n<p><strong>1、从远程拉取分支到本地(当远程已经有分支的时候可以这样用)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b 本地分支名x origin/远程分支名x</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、提交本地test分支作为远程的test分支（合并分支后可以用）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin test:test   // 提交本地test分支 作为远程的test分支</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a><strong>7. 总结</strong></h3><p>其实在git中要注意如下几点：</p>\n<p>第一点就是分支:</p>\n<p>git因分支而强大，所以要理解git中的分支，我们在一个远程服务下可以拉多个分支，比如生产主分支、测试分支、每个人的开发分支。</p>\n<p>第二点就是本地和远程:</p>\n<p>当我们在本地建了一个新分支有，还要把新分支推到远程也就是在远程建立一样的一个分支。所以我们在本地和远程建立分支后还要把他们关联起来，这样才有意义！！！</p>\n<p>第三点 git远程服务和git远程分支:</p>\n<p>某一个或某几个分支是在一个服务下的，就好比A项目在远程的服务是a那么在a服务下我们可以创建 master、test、dev多个测试分支。其实一个远程服务就是一个project因为在github或gitlab都是创建project。</p>\n<p>第四点 当我们从master分支上拉开发分支:</p>\n<p>我们在自己的开发分支上pull的时候会吧别人提交到master分支的代码回pull下来，而push的时候还是提交到了自己的开发分支，除非你把自己的开发分支合并到了master分支上。</p>\n","categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}