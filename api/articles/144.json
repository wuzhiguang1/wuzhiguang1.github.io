{"title":"Promise总结","slug":"144","date":"2022-07-29T04:22:04.794Z","updated":"2022-07-29T04:22:04.794Z","comments":true,"path":"api/articles/144.json","excerpt":null,"covers":["https://qny.aqingya.cn/img/20210507143009.png"],"content":"<h2 id=\"同步回调\"><a href=\"#同步回调\" class=\"headerlink\" title=\"同步回调\"></a>同步回调</h2><p>理解：立即执行，完全执行完了才结束，不会放入到回调队列中。</p>\n<p>例子：数组遍历相关函数/Promise的执行函数</p>\n<h2 id=\"异步回调\"><a href=\"#异步回调\" class=\"headerlink\" title=\"异步回调\"></a>异步回调</h2><p>理解：不会立即执行，会放到回调队列中将来执行</p>\n<p>例子：定时器回调/ajax回调/Promisse的成功|失败的回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.同步函数回调</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;   <span class=\"comment\">//遍历回调，同步回调函数，不会放入队列中，一上来就执行完成。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;同步函数回调&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"comment\">// 同步函数回调</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.异步函数回调</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;      <span class=\"comment\">//异步回调函数会放到队列中将来执行。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setTimeout中的回调函数！！！&quot;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;异步函数回调！！&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// 异步函数回调！！</span></span><br><span class=\"line\"><span class=\"comment\">// test2.html:23 setTimeout中的回调函数！！！</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么要用-Promise\"><a href=\"#为什么要用-Promise\" class=\"headerlink\" title=\"为什么要用 Promise?\"></a>为什么要用 Promise?</h2><h3 id=\"指定回调函数的方式更加灵活\"><a href=\"#指定回调函数的方式更加灵活\" class=\"headerlink\" title=\"指定回调函数的方式更加灵活\"></a>指定回调函数的方式更加灵活</h3><ol>\n<li>旧的: 必须在启动异步任务前指定 </li>\n<li>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函 数(甚至可以在异步任务结束后指定/多个)</li>\n</ol>\n<h3 id=\"支持链式调用-可以解决回调地狱问题\"><a href=\"#支持链式调用-可以解决回调地狱问题\" class=\"headerlink\" title=\"支持链式调用, 可以解决回调地狱问题\"></a>支持链式调用, 可以解决回调地狱问题</h3><ol>\n<li><p>什么是回调地狱? </p>\n<p> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件 </p>\n</li>\n<li><p> 回调地狱的缺点?  </p>\n</li>\n</ol>\n<p>   不便于阅读 不便于异常处理 </p>\n<ol start=\"3\">\n<li><p>解决方案? </p>\n</li>\n<li><p>promise 链式调用</p>\n</li>\n</ol>\n<h2 id=\"Promise简单例子1\"><a href=\"#Promise简单例子1\" class=\"headerlink\" title=\"Promise简单例子1\"></a>Promise简单例子1</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rand</span>(<span class=\"params\">m,n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * (n-m+<span class=\"number\">1</span>)) + m-<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    点击按钮,  1s 后显示是否中奖(30%概率中奖)</span></span><br><span class=\"line\"><span class=\"comment\">        若中奖弹出    恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券</span></span><br><span class=\"line\"><span class=\"comment\">        若未中奖弹出  再接再厉</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//获取元素对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//绑定单击事件</span></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定时器</span></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     //30%  1-100  1 2 30</span></span><br><span class=\"line\">    <span class=\"comment\">//     //获取从1 - 100的一个随机数</span></span><br><span class=\"line\">    <span class=\"comment\">//     let n = rand(1, 100);</span></span><br><span class=\"line\">    <span class=\"comment\">//     //判断</span></span><br><span class=\"line\">    <span class=\"comment\">//     if(n &lt;= 30)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         alert(&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;else&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         alert(&#x27;再接再厉&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;, 1000);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Promise 形式实现</span></span><br><span class=\"line\">    <span class=\"comment\">// resolve 解决  函数类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// reject  拒绝  函数类型的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//30%  1-100  1 2 30</span></span><br><span class=\"line\">            <span class=\"comment\">//获取从1 - 100的一个随机数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> n = rand(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"comment\">//判断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">                resolve(n); <span class=\"comment\">// 将 promise 对象的状态设置为 『成功』</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                reject(n); <span class=\"comment\">// 将 promise 对象的状态设置为 『失败』</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">    <span class=\"comment\">//调用 then 方法</span></span><br><span class=\"line\">    <span class=\"comment\">// value 值</span></span><br><span class=\"line\">    <span class=\"comment\">// reason 理由</span></span><br><span class=\"line\">    p.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 &#x27;</span> + value);</span><br><span class=\"line\">    &#125;, <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;再接再厉, 您的号码为 &#x27;</span> + reason);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise简单例子2-fs模块读取文件\"><a href=\"#Promise简单例子2-fs模块读取文件\" class=\"headerlink\" title=\"Promise简单例子2 (fs模块读取文件)\"></a>Promise简单例子2 (fs模块读取文件)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//回调函数 形式</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFile(&#x27;./resource/content.txt&#x27;, (err, data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // 如果出错 则抛出错误</span></span><br><span class=\"line\"><span class=\"comment\">//     if(err)  throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//     //输出文件内容</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(data.toString());</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Promise 形式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve , reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./resource/content.tx&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果出错</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) reject(err);</span><br><span class=\"line\">        <span class=\"comment\">//如果成功</span></span><br><span class=\"line\">        resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用 then </span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise简单例子3-fs模块读取文件\"><a href=\"#Promise简单例子3-fs模块读取文件\" class=\"headerlink\" title=\"Promise简单例子3 (fs模块读取文件)\"></a>Promise简单例子3 (fs模块读取文件)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取元素对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建 Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        <span class=\"comment\">//2. 初始化</span></span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3. 发送</span></span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">//4. 处理响应结果</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断响应状态码 2xx   </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//控制台输出响应体</span></span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//控制台输出响应状态码</span></span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//调用then方法</span></span><br><span class=\"line\">    p.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">reason</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对Promise的简单封装-fs模块读取文件\"><a href=\"#对Promise的简单封装-fs模块读取文件\" class=\"headerlink\" title=\"对Promise的简单封装(fs模块读取文件)\"></a>对Promise的简单封装(fs模块读取文件)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装一个函数 mineReadFile 读取文件内容</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数:  path  文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回:  promise 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mineReadFile</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取文件</span></span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).readFile(path, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err) reject(err);</span><br><span class=\"line\">            <span class=\"comment\">//成功</span></span><br><span class=\"line\">            resolve(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mineReadFile(<span class=\"string\">&#x27;./resource/content.txt&#x27;</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//输出文件内容</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对Promise的简单封装-AJAX-请求\"><a href=\"#对Promise的简单封装-AJAX-请求\" class=\"headerlink\" title=\"对Promise的简单封装 AJAX 请求\"></a>对Promise的简单封装 AJAX 请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装一个函数 sendAJAX 发送 GET AJAX 请求</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数   URL</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回结果 Promise 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendAJAX</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.responseType = <span class=\"string\">&#x27;json&#x27;</span>;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">//处理结果</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断成功</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//成功的结果</span></span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sendAJAX(<span class=\"string\">&#x27;https://api.apiopen.top/getJok&#x27;</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pomise-的状态改变\"><a href=\"#Pomise-的状态改变\" class=\"headerlink\" title=\"Pomise 的状态改变\"></a>Pomise 的状态改变</h2><ol>\n<li><p>pending 变为 resolved </p>\n</li>\n<li><p>pending 变为 rejected </p>\n<p>说明: 只有这 2 种, 且一个 promise 对象只能改变一次 </p>\n<p>无论变为成功还是失败, 都会有一个结果数据 </p>\n<p>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</p>\n</li>\n</ol>\n<h2 id=\"Promise-的基本流程\"><a href=\"#Promise-的基本流程\" class=\"headerlink\" title=\"Promise 的基本流程\"></a>Promise 的基本流程</h2><p><img src=\"https://qny.aqingya.cn/img/20210507143009.png\"></p>\n<h2 id=\"Promise-API\"><a href=\"#Promise-API\" class=\"headerlink\" title=\"Promise API\"></a>Promise API</h2><ol>\n<li><p>Promise 构造函数: Promise (excutor) {} </p>\n<p>(1) executor 函数: 执行器 (resolve, reject) =&gt; {}  </p>\n<p>(2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {} </p>\n<p>(3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {} 说明: executor 会在 Promise 内部立即同步调用,异步操作在执行器中执行 </p>\n</li>\n<li><p>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</p>\n<p> (1) onResolved 函数: 成功的回调函数 (value) =&gt; {} </p>\n<p>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {} 说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调 返回一个新的 promise 对象 </p>\n</li>\n<li><p>Promise.prototype.catch 方法: (onRejected) =&gt; {}</p>\n<p> (1) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p>\n<p>说明: then()的语法糖, 相当于: then(undefined, onRejected)</p>\n</li>\n<li><p>Promise.resolve 方法: (value) =&gt; {} </p>\n<p>(1) value: 成功的数据或 promise 对象 说明: 返回一个成功/失败的 promise 对象</p>\n</li>\n<li><p>Promise.reject 方法: (reason) =&gt; {}</p>\n<p>(1) reason: 失败的原因 说明: 返回一个失败的 promise 对象 </p>\n</li>\n<li><p>Promise.all 方法: (promises) =&gt; {}</p>\n<p> (1) promises: 包含 n 个 promise 的数组 说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就 直接失败 </p>\n</li>\n<li><p>Promise.race 方法: (promises) =&gt; {}</p>\n<p> (1) promises: 包含 n 个 promise 的数组 说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态</p>\n</li>\n</ol>\n<h2 id=\"Promise-的几个关键问题\"><a href=\"#Promise-的几个关键问题\" class=\"headerlink\" title=\"Promise 的几个关键问题\"></a>Promise 的几个关键问题</h2><h3 id=\"如何改变-promise-的状态\"><a href=\"#如何改变-promise-的状态\" class=\"headerlink\" title=\"如何改变 promise 的状态?\"></a>如何改变 promise 的状态?</h3><p>(1) resolve(value): 如果当前是 pending 就会变为 resolved </p>\n<p>(2) reject(reason): 如果当前是 pending 就会变为 rejected </p>\n<p>(3) 抛出异常: 如果当前是 pending 就会变为 rejected</p>\n<h3 id=\"一个-promise-指定多个成功-失败回调函数-都会调用吗\"><a href=\"#一个-promise-指定多个成功-失败回调函数-都会调用吗\" class=\"headerlink\" title=\"一个 promise 指定多个成功/失败回调函数, 都会调用吗?\"></a>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</h3><p>当 promise 改变为对应状态时都会调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///指定回调 - 1</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定回调 - 2</span></span><br><span class=\"line\">p</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(value);</span><br><span class=\"line\">&#125;);                    <span class=\"comment\">//如果调用成功，then指定的每个回调函数都会成功。</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note green icon-padding simple\"><i class=\"note-icon fab fa-internet-explorer\"></i><h3 id=\"改变-promise-状态和指定回调函数谁先谁后\"><a href=\"#改变-promise-状态和指定回调函数谁先谁后\" class=\"headerlink\" title=\"改变 promise 状态和指定回调函数谁先谁后?\"></a>改变 promise 状态和指定回调函数谁先谁后?</h3></div>\n\n<p>(1) 都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调 </p>\n<p>(2) 如何先改状态再指定回调? </p>\n<p>  ① 在执行器中直接调用 resolve()/reject() </p>\n<p>  ② 延迟更长时间才调用 then() </p>\n<p>(3) 什么时候才能得到数据? </p>\n<p>  ① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据 </p>\n<p>  ② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p>\n<h3 id=\"promise-then-返回的新-promise-的结果状态由什么决定\"><a href=\"#promise-then-返回的新-promise-的结果状态由什么决定\" class=\"headerlink\" title=\"promise.then()返回的新 promise 的结果状态由什么决定?\"></a>promise.then()返回的新 promise 的结果状态由什么决定?</h3><p>(1) 简单表达: 由 then()指定的回调函数执行的结果决定 </p>\n<p>(2) 详细表达: </p>\n<p>​    ① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常 </p>\n<p>​    ② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值 </p>\n<p>​    ③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//执行 then 方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(value);</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 抛出错误</span></span><br><span class=\"line\">    <span class=\"comment\">// throw &#x27;出了问题&#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 返回结果是非 Promise 类型的对象</span></span><br><span class=\"line\">    <span class=\"comment\">// return 521;</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 返回结果是 Promise 对象</span></span><br><span class=\"line\">    <span class=\"comment\">// return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     // resolve(&#x27;success&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     reject(&#x27;error&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"promise-如何串连多个操作任务\"><a href=\"#promise-如何串连多个操作任务\" class=\"headerlink\" title=\"promise 如何串连多个操作任务?\"></a>promise 如何串连多个操作任务?</h3><p>(1) promise 的 then()返回一个新的 promise, 可以看成 then()的链式调用 </p>\n<p>(2) 通过 then 的链式调用串连多个同步/异步任务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);    <span class=\"comment\">//1秒之后输出success</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);    <span class=\"comment\">//输出undefined   因为上一个返回的不是一个Promise对象，默认为返回成功的undefined，输出为成功的promise值为undefined。</span></span><br><span class=\"line\">&#125;)                         </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"promise-异常传透\"><a href=\"#promise-异常传透\" class=\"headerlink\" title=\"promise 异常传透?\"></a>promise 异常传透?</h3><p> (1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调, </p>\n<p> (2) <strong>前面任何操作出了异常, 都会传到最后失败的回调中处理</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// reject(&#x27;Err&#x27;);</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(111);</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;失败啦!&#x27;</span>;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何中断-Promise-链\"><a href=\"#如何中断-Promise-链\" class=\"headerlink\" title=\"如何中断 Promise 链\"></a>如何中断 Promise 链</h3><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数 </p>\n<p>(2) <strong>办法: 在回调函数中返回一个 <code>pendding</code>状态的 promise 对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"comment\">//有且只有一个方式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;);    <span class=\"comment\">// -----------中断------------</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"async和await\"><a href=\"#async和await\" class=\"headerlink\" title=\"async和await\"></a>async和await</h2><h3 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h3><ol>\n<li>函数的返回值为 promise 对象 </li>\n<li>promise 对象的结果由 async 函数执行的返回值决定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 如果返回值是一个非Promise类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// return 521;</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 如果返回的是一个Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     // resolve(&#x27;OK&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     reject(&#x27;Error&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 抛出异常</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Oh NO&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = main();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"await-表达式\"><a href=\"#await-表达式\" class=\"headerlink\" title=\"await 表达式\"></a>await 表达式</h3><ol>\n<li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值 </li>\n<li> 如果表达式是 promise 对象, await 返回的是 promise 成功的值 </li>\n<li> 如果表达式是其它值, 直接将此值作为 await 的返回值</li>\n</ol>\n<div class=\"note green icon-padding simple\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>注意</p>\n</div>\n\n<ol>\n<li>await 必须写在 async 函数中, 但 async 函数中可以没有 await </li>\n<li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve(&#x27;OK&#x27;);</span></span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;Error&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//1. 右侧为promise的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// let res = await p;</span></span><br><span class=\"line\">    <span class=\"comment\">//console.log(res);</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 右侧为其他类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// let res2 = await 20;</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 如果promise是失败的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res3 = <span class=\"keyword\">await</span> p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e);    <span class=\"comment\">// da</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async与await的结合-案例1\"><a href=\"#async与await的结合-案例1\" class=\"headerlink\" title=\"async与await的结合 案例1\"></a>async与await的结合 案例1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * resource  1.html  2.html 3.html 文件内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mineReadFile = util.promisify(fs.readFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//回调函数的方式</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFile(&#x27;./resource/1.html&#x27;, (err, data1) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if(err) throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//     fs.readFile(&#x27;./resource/2.html&#x27;, (err, data2) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         if(err) throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//         fs.readFile(&#x27;./resource/3.html&#x27;, (err, data3) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             if(err) throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//             console.log(data1 + data2 + data3);</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//async 与 await</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取第一个文件的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> data1 = <span class=\"keyword\">await</span> mineReadFile(<span class=\"string\">&#x27;./resource/1.html&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data2 = <span class=\"keyword\">await</span> mineReadFile(<span class=\"string\">&#x27;./resource/2.html&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data3 = <span class=\"keyword\">await</span> mineReadFile(<span class=\"string\">&#x27;./resource/3.html&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data1 + data2 + data3);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async与await的结合-案例2-ajax\"><a href=\"#async与await的结合-案例2-ajax\" class=\"headerlink\" title=\"async与await的结合 案例2 (ajax )\"></a>async与await的结合 案例2 (ajax )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendAJAX</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.responseType = <span class=\"string\">&#x27;json&#x27;</span>;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">//处理结果</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断成功</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//成功的结果</span></span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//段子接口地址 https://api.apiopen.top/getJoke</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取段子信息</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> duanzi = <span class=\"keyword\">await</span> sendAJAX(<span class=\"string\">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(duanzi);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","more":"<h2 id=\"同步回调\"><a href=\"#同步回调\" class=\"headerlink\" title=\"同步回调\"></a>同步回调</h2><p>理解：立即执行，完全执行完了才结束，不会放入到回调队列中。</p>\n<p>例子：数组遍历相关函数/Promise的执行函数</p>\n<h2 id=\"异步回调\"><a href=\"#异步回调\" class=\"headerlink\" title=\"异步回调\"></a>异步回调</h2><p>理解：不会立即执行，会放到回调队列中将来执行</p>\n<p>例子：定时器回调/ajax回调/Promisse的成功|失败的回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.同步函数回调</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;   <span class=\"comment\">//遍历回调，同步回调函数，不会放入队列中，一上来就执行完成。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;同步函数回调&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"comment\">// 同步函数回调</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.异步函数回调</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;      <span class=\"comment\">//异步回调函数会放到队列中将来执行。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setTimeout中的回调函数！！！&quot;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;异步函数回调！！&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">// 异步函数回调！！</span></span><br><span class=\"line\"><span class=\"comment\">// test2.html:23 setTimeout中的回调函数！！！</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么要用-Promise\"><a href=\"#为什么要用-Promise\" class=\"headerlink\" title=\"为什么要用 Promise?\"></a>为什么要用 Promise?</h2><h3 id=\"指定回调函数的方式更加灵活\"><a href=\"#指定回调函数的方式更加灵活\" class=\"headerlink\" title=\"指定回调函数的方式更加灵活\"></a>指定回调函数的方式更加灵活</h3><ol>\n<li>旧的: 必须在启动异步任务前指定 </li>\n<li>promise: 启动异步任务 =&gt; 返回promie对象 =&gt; 给promise对象绑定回调函 数(甚至可以在异步任务结束后指定/多个)</li>\n</ol>\n<h3 id=\"支持链式调用-可以解决回调地狱问题\"><a href=\"#支持链式调用-可以解决回调地狱问题\" class=\"headerlink\" title=\"支持链式调用, 可以解决回调地狱问题\"></a>支持链式调用, 可以解决回调地狱问题</h3><ol>\n<li><p>什么是回调地狱? </p>\n<p> 回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件 </p>\n</li>\n<li><p> 回调地狱的缺点?  </p>\n</li>\n</ol>\n<p>   不便于阅读 不便于异常处理 </p>\n<ol start=\"3\">\n<li><p>解决方案? </p>\n</li>\n<li><p>promise 链式调用</p>\n</li>\n</ol>\n<h2 id=\"Promise简单例子1\"><a href=\"#Promise简单例子1\" class=\"headerlink\" title=\"Promise简单例子1\"></a>Promise简单例子1</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rand</span>(<span class=\"params\">m,n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * (n-m+<span class=\"number\">1</span>)) + m-<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    点击按钮,  1s 后显示是否中奖(30%概率中奖)</span></span><br><span class=\"line\"><span class=\"comment\">        若中奖弹出    恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券</span></span><br><span class=\"line\"><span class=\"comment\">        若未中奖弹出  再接再厉</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//获取元素对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//绑定单击事件</span></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定时器</span></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     //30%  1-100  1 2 30</span></span><br><span class=\"line\">    <span class=\"comment\">//     //获取从1 - 100的一个随机数</span></span><br><span class=\"line\">    <span class=\"comment\">//     let n = rand(1, 100);</span></span><br><span class=\"line\">    <span class=\"comment\">//     //判断</span></span><br><span class=\"line\">    <span class=\"comment\">//     if(n &lt;= 30)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         alert(&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;else&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         alert(&#x27;再接再厉&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;, 1000);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Promise 形式实现</span></span><br><span class=\"line\">    <span class=\"comment\">// resolve 解决  函数类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// reject  拒绝  函数类型的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//30%  1-100  1 2 30</span></span><br><span class=\"line\">            <span class=\"comment\">//获取从1 - 100的一个随机数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> n = rand(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"comment\">//判断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">                resolve(n); <span class=\"comment\">// 将 promise 对象的状态设置为 『成功』</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                reject(n); <span class=\"comment\">// 将 promise 对象的状态设置为 『失败』</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p);</span><br><span class=\"line\">    <span class=\"comment\">//调用 then 方法</span></span><br><span class=\"line\">    <span class=\"comment\">// value 值</span></span><br><span class=\"line\">    <span class=\"comment\">// reason 理由</span></span><br><span class=\"line\">    p.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;恭喜恭喜, 奖品为 10万 RMB 劳斯莱斯优惠券, 您的中奖数字为 &#x27;</span> + value);</span><br><span class=\"line\">    &#125;, <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;再接再厉, 您的号码为 &#x27;</span> + reason);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise简单例子2-fs模块读取文件\"><a href=\"#Promise简单例子2-fs模块读取文件\" class=\"headerlink\" title=\"Promise简单例子2 (fs模块读取文件)\"></a>Promise简单例子2 (fs模块读取文件)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//回调函数 形式</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFile(&#x27;./resource/content.txt&#x27;, (err, data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // 如果出错 则抛出错误</span></span><br><span class=\"line\"><span class=\"comment\">//     if(err)  throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//     //输出文件内容</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(data.toString());</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Promise 形式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve , reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./resource/content.tx&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果出错</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) reject(err);</span><br><span class=\"line\">        <span class=\"comment\">//如果成功</span></span><br><span class=\"line\">        resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用 then </span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise简单例子3-fs模块读取文件\"><a href=\"#Promise简单例子3-fs模块读取文件\" class=\"headerlink\" title=\"Promise简单例子3 (fs模块读取文件)\"></a>Promise简单例子3 (fs模块读取文件)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取元素对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建 Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        <span class=\"comment\">//2. 初始化</span></span><br><span class=\"line\">        xhr.open(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3. 发送</span></span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">//4. 处理响应结果</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断响应状态码 2xx   </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//控制台输出响应体</span></span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//控制台输出响应状态码</span></span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//调用then方法</span></span><br><span class=\"line\">    p.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">reason</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对Promise的简单封装-fs模块读取文件\"><a href=\"#对Promise的简单封装-fs模块读取文件\" class=\"headerlink\" title=\"对Promise的简单封装(fs模块读取文件)\"></a>对Promise的简单封装(fs模块读取文件)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装一个函数 mineReadFile 读取文件内容</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数:  path  文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回:  promise 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mineReadFile</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取文件</span></span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).readFile(path, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err) reject(err);</span><br><span class=\"line\">            <span class=\"comment\">//成功</span></span><br><span class=\"line\">            resolve(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mineReadFile(<span class=\"string\">&#x27;./resource/content.txt&#x27;</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//输出文件内容</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对Promise的简单封装-AJAX-请求\"><a href=\"#对Promise的简单封装-AJAX-请求\" class=\"headerlink\" title=\"对Promise的简单封装 AJAX 请求\"></a>对Promise的简单封装 AJAX 请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 封装一个函数 sendAJAX 发送 GET AJAX 请求</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数   URL</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回结果 Promise 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendAJAX</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.responseType = <span class=\"string\">&#x27;json&#x27;</span>;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">//处理结果</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断成功</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//成功的结果</span></span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sendAJAX(<span class=\"string\">&#x27;https://api.apiopen.top/getJok&#x27;</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pomise-的状态改变\"><a href=\"#Pomise-的状态改变\" class=\"headerlink\" title=\"Pomise 的状态改变\"></a>Pomise 的状态改变</h2><ol>\n<li><p>pending 变为 resolved </p>\n</li>\n<li><p>pending 变为 rejected </p>\n<p>说明: 只有这 2 种, 且一个 promise 对象只能改变一次 </p>\n<p>无论变为成功还是失败, 都会有一个结果数据 </p>\n<p>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason</p>\n</li>\n</ol>\n<h2 id=\"Promise-的基本流程\"><a href=\"#Promise-的基本流程\" class=\"headerlink\" title=\"Promise 的基本流程\"></a>Promise 的基本流程</h2><p><img src=\"https://qny.aqingya.cn/img/20210507143009.png\"></p>\n<h2 id=\"Promise-API\"><a href=\"#Promise-API\" class=\"headerlink\" title=\"Promise API\"></a>Promise API</h2><ol>\n<li><p>Promise 构造函数: Promise (excutor) {} </p>\n<p>(1) executor 函数: 执行器 (resolve, reject) =&gt; {}  </p>\n<p>(2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {} </p>\n<p>(3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {} 说明: executor 会在 Promise 内部立即同步调用,异步操作在执行器中执行 </p>\n</li>\n<li><p>Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</p>\n<p> (1) onResolved 函数: 成功的回调函数 (value) =&gt; {} </p>\n<p>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {} 说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调 返回一个新的 promise 对象 </p>\n</li>\n<li><p>Promise.prototype.catch 方法: (onRejected) =&gt; {}</p>\n<p> (1) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p>\n<p>说明: then()的语法糖, 相当于: then(undefined, onRejected)</p>\n</li>\n<li><p>Promise.resolve 方法: (value) =&gt; {} </p>\n<p>(1) value: 成功的数据或 promise 对象 说明: 返回一个成功/失败的 promise 对象</p>\n</li>\n<li><p>Promise.reject 方法: (reason) =&gt; {}</p>\n<p>(1) reason: 失败的原因 说明: 返回一个失败的 promise 对象 </p>\n</li>\n<li><p>Promise.all 方法: (promises) =&gt; {}</p>\n<p> (1) promises: 包含 n 个 promise 的数组 说明: 返回一个新的 promise, 只有所有的 promise 都成功才成功, 只要有一个失败了就 直接失败 </p>\n</li>\n<li><p>Promise.race 方法: (promises) =&gt; {}</p>\n<p> (1) promises: 包含 n 个 promise 的数组 说明: 返回一个新的 promise, 第一个完成的 promise 的结果状态就是最终的结果状态</p>\n</li>\n</ol>\n<h2 id=\"Promise-的几个关键问题\"><a href=\"#Promise-的几个关键问题\" class=\"headerlink\" title=\"Promise 的几个关键问题\"></a>Promise 的几个关键问题</h2><h3 id=\"如何改变-promise-的状态\"><a href=\"#如何改变-promise-的状态\" class=\"headerlink\" title=\"如何改变 promise 的状态?\"></a>如何改变 promise 的状态?</h3><p>(1) resolve(value): 如果当前是 pending 就会变为 resolved </p>\n<p>(2) reject(reason): 如果当前是 pending 就会变为 rejected </p>\n<p>(3) 抛出异常: 如果当前是 pending 就会变为 rejected</p>\n<h3 id=\"一个-promise-指定多个成功-失败回调函数-都会调用吗\"><a href=\"#一个-promise-指定多个成功-失败回调函数-都会调用吗\" class=\"headerlink\" title=\"一个 promise 指定多个成功/失败回调函数, 都会调用吗?\"></a>一个 promise 指定多个成功/失败回调函数, 都会调用吗?</h3><p>当 promise 改变为对应状态时都会调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///指定回调 - 1</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定回调 - 2</span></span><br><span class=\"line\">p</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(value);</span><br><span class=\"line\">&#125;);                    <span class=\"comment\">//如果调用成功，then指定的每个回调函数都会成功。</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note green icon-padding simple\"><i class=\"note-icon fab fa-internet-explorer\"></i><h3 id=\"改变-promise-状态和指定回调函数谁先谁后\"><a href=\"#改变-promise-状态和指定回调函数谁先谁后\" class=\"headerlink\" title=\"改变 promise 状态和指定回调函数谁先谁后?\"></a>改变 promise 状态和指定回调函数谁先谁后?</h3></div>\n\n<p>(1) 都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调 </p>\n<p>(2) 如何先改状态再指定回调? </p>\n<p>  ① 在执行器中直接调用 resolve()/reject() </p>\n<p>  ② 延迟更长时间才调用 then() </p>\n<p>(3) 什么时候才能得到数据? </p>\n<p>  ① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据 </p>\n<p>  ② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p>\n<h3 id=\"promise-then-返回的新-promise-的结果状态由什么决定\"><a href=\"#promise-then-返回的新-promise-的结果状态由什么决定\" class=\"headerlink\" title=\"promise.then()返回的新 promise 的结果状态由什么决定?\"></a>promise.then()返回的新 promise 的结果状态由什么决定?</h3><p>(1) 简单表达: 由 then()指定的回调函数执行的结果决定 </p>\n<p>(2) 详细表达: </p>\n<p>​    ① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常 </p>\n<p>​    ② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值 </p>\n<p>​    ③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//执行 then 方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(value);</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 抛出错误</span></span><br><span class=\"line\">    <span class=\"comment\">// throw &#x27;出了问题&#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 返回结果是非 Promise 类型的对象</span></span><br><span class=\"line\">    <span class=\"comment\">// return 521;</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 返回结果是 Promise 对象</span></span><br><span class=\"line\">    <span class=\"comment\">// return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     // resolve(&#x27;success&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     reject(&#x27;error&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"promise-如何串连多个操作任务\"><a href=\"#promise-如何串连多个操作任务\" class=\"headerlink\" title=\"promise 如何串连多个操作任务?\"></a>promise 如何串连多个操作任务?</h3><p>(1) promise 的 then()返回一个新的 promise, 可以看成 then()的链式调用 </p>\n<p>(2) 通过 then 的链式调用串连多个同步/异步任务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);    <span class=\"comment\">//1秒之后输出success</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);    <span class=\"comment\">//输出undefined   因为上一个返回的不是一个Promise对象，默认为返回成功的undefined，输出为成功的promise值为undefined。</span></span><br><span class=\"line\">&#125;)                         </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"promise-异常传透\"><a href=\"#promise-异常传透\" class=\"headerlink\" title=\"promise 异常传透?\"></a>promise 异常传透?</h3><p> (1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调, </p>\n<p> (2) <strong>前面任何操作出了异常, 都会传到最后失败的回调中处理</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// reject(&#x27;Err&#x27;);</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(111);</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;失败啦!&#x27;</span>;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何中断-Promise-链\"><a href=\"#如何中断-Promise-链\" class=\"headerlink\" title=\"如何中断 Promise 链\"></a>如何中断 Promise 链</h3><p>(1) 当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数 </p>\n<p>(2) <strong>办法: 在回调函数中返回一个 <code>pendding</code>状态的 promise 对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;OK&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"comment\">//有且只有一个方式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;);    <span class=\"comment\">// -----------中断------------</span></span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"async和await\"><a href=\"#async和await\" class=\"headerlink\" title=\"async和await\"></a>async和await</h2><h3 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h3><ol>\n<li>函数的返回值为 promise 对象 </li>\n<li>promise 对象的结果由 async 函数执行的返回值决定</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 如果返回值是一个非Promise类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// return 521;</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 如果返回的是一个Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     // resolve(&#x27;OK&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     reject(&#x27;Error&#x27;);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 抛出异常</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Oh NO&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = main();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"await-表达式\"><a href=\"#await-表达式\" class=\"headerlink\" title=\"await 表达式\"></a>await 表达式</h3><ol>\n<li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值 </li>\n<li> 如果表达式是 promise 对象, await 返回的是 promise 成功的值 </li>\n<li> 如果表达式是其它值, 直接将此值作为 await 的返回值</li>\n</ol>\n<div class=\"note green icon-padding simple\"><i class=\"note-icon fab fa-internet-explorer\"></i><p>注意</p>\n</div>\n\n<ol>\n<li>await 必须写在 async 函数中, 但 async 函数中可以没有 await </li>\n<li>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve(&#x27;OK&#x27;);</span></span><br><span class=\"line\">        reject(<span class=\"string\">&#x27;Error&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//1. 右侧为promise的情况</span></span><br><span class=\"line\">    <span class=\"comment\">// let res = await p;</span></span><br><span class=\"line\">    <span class=\"comment\">//console.log(res);</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 右侧为其他类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// let res2 = await 20;</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 如果promise是失败的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res3 = <span class=\"keyword\">await</span> p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e);    <span class=\"comment\">// da</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async与await的结合-案例1\"><a href=\"#async与await的结合-案例1\" class=\"headerlink\" title=\"async与await的结合 案例1\"></a>async与await的结合 案例1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * resource  1.html  2.html 3.html 文件内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mineReadFile = util.promisify(fs.readFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//回调函数的方式</span></span><br><span class=\"line\"><span class=\"comment\">// fs.readFile(&#x27;./resource/1.html&#x27;, (err, data1) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     if(err) throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//     fs.readFile(&#x27;./resource/2.html&#x27;, (err, data2) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         if(err) throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//         fs.readFile(&#x27;./resource/3.html&#x27;, (err, data3) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//             if(err) throw err;</span></span><br><span class=\"line\"><span class=\"comment\">//             console.log(data1 + data2 + data3);</span></span><br><span class=\"line\"><span class=\"comment\">//         &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//async 与 await</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取第一个文件的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> data1 = <span class=\"keyword\">await</span> mineReadFile(<span class=\"string\">&#x27;./resource/1.html&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data2 = <span class=\"keyword\">await</span> mineReadFile(<span class=\"string\">&#x27;./resource/2.html&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data3 = <span class=\"keyword\">await</span> mineReadFile(<span class=\"string\">&#x27;./resource/3.html&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data1 + data2 + data3);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async与await的结合-案例2-ajax\"><a href=\"#async与await的结合-案例2-ajax\" class=\"headerlink\" title=\"async与await的结合 案例2 (ajax )\"></a>async与await的结合 案例2 (ajax )</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendAJAX</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.responseType = <span class=\"string\">&#x27;json&#x27;</span>;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>, url);</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        <span class=\"comment\">//处理结果</span></span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断成功</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//成功的结果</span></span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//段子接口地址 https://api.apiopen.top/getJoke</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取段子信息</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> duanzi = <span class=\"keyword\">await</span> sendAJAX(<span class=\"string\">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(duanzi);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"ES6","path":"api/categories/ES6.json"}],"tags":[{"name":"Promise","path":"api/tags/Promise.json"}]}