{"title":"JavaScript --- DOM  document类型","slug":"22","date":"2020-05-22T10:01:03.000Z","updated":"2022-07-29T04:22:04.783Z","comments":true,"path":"api/articles/22.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/4df0ccaef34647639f98b30bcc5b27d8.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/4df0ccaef34647639f98b30bcc5b27d8.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Document-对象\"><a href=\"#Document-对象\" class=\"headerlink\" title=\"Document 对象\"></a>Document 对象</h2><p>每个载入浏览器的 HTML 文档都会成为 Document 对象。</p>\n<p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p>\n<p>提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。</p>\n<hr>\n<p><strong>一、文档子节点</strong></p>\n<p>1、在document中有一个属性body，它保存的是body的引用（<strong>比通过childNodes列表访问的更快，更直接）</strong><br>&emsp;&emsp;Var body = document.body;</p>\n<p>2、Doucument.doucumentElement保存的是html根标签<br>&emsp;&emsp;Var html = document.documentElenmet;</p>\n<p>3、Document.all 代表页面中的所有元素<br>&emsp;&emsp;var all = document.all;<br>&emsp;&emsp;（var all = document.getElementsByTagName(“*”)）效果一样。<br>&emsp;&emsp;它返回一个数组</p>\n<p>4、根据元素的class属性查询一组元素节点对象<br>&emsp;&emsp;GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>&emsp;&emsp;但是该方法 不支持IE8及以下浏览器。</p>\n<p>5、documen.querySelector()<br>&emsp;&emsp; 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>&emsp;&emsp; 虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>&emsp;&emsp; 使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p>\n<p>6、documen.querySelectorAll()<br>&emsp;&emsp;该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>&emsp;&emsp;即使符合条件的元素只有一个，他也会返回数组。</p>\n<hr>\n<p><strong>二、文档信息</strong></p>\n<p>1.document.title<br>&emsp;&emsp;可以取得当前界面的标题，也可以修改当前界面的标题并反映给浏览器的标题栏中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.title)  <span class=\"comment\">//查看标题</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">&quot;aqing&quot;</span>     <span class=\"comment\">//修改标题</span></span><br></pre></td></tr></table></figure>\n\n\n<p>2.属性 URL、domain、referrer  都和网页请求有关。<br>&emsp;&emsp;URL属性包含完整的URL<br>&emsp;&emsp;domain属性中只包含了页面的域名。<br>&emsp;&emsp;referrer属性中保存着连接到当前页面的哪个页面的URL，在没有来源页面的情况下，referrer属性中可能会包含空字符串</p>\n<hr>\n<p><strong>三、查找元素</strong></p>\n<p>1.getElementById()<br>&emsp;&emsp;通过id属性来获取一个元素节点的对象</p>\n<p>2.getElementsByTagName()<br>&emsp;&emsp;可以根据标签名来获取一组元素节点对象<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<p>3.getElementsByName()<br>&emsp;&emsp;通过name属性来获取一组元素节点对象。<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<hr>\n<p><strong>四、特殊集合</strong></p>\n<p>1、document.anchors<br>&emsp;&emsp;包含文档中所有带name特性的 a 元素</p>\n<p>2、document.forms<br>&emsp;&emsp;包含文档中所有的<form>元素，与documen.getElementByTagName（“form”）结果相同。</p>\n<p>3、document.images<br>&emsp;&emsp;包含文档中所有的<img>元素，与documen.getElementByTagName（“img”）结果相同。</p>\n<p>4、document.links<br>&emsp;&emsp;包含文档中所带href特性的 a 元素</p>\n<p><strong>集合中的项也会随着当前文档内容的更新而更新</strong></p>\n<hr>\n<p><strong>五、DOM一致性检测</strong></p>\n<p>hasFeature()<br>&emsp;&emsp;这个方法有两个参数：要检测的DOM功能的名称及版本号。如果浏览器支持给定的名称和版本的功能，则该方法会返回 true 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.implementation.hasFeature(<span class=\"string\">&quot;XML&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>六、文档写入</strong></p>\n<p><strong>1、write()方法</strong><br>定义和用法<br>&emsp;&emsp;write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。</p>\n<p>可列出多个参数(exp1,exp2,exp3,…) ，它们将按顺序被追加到文档中。</p>\n<p>语法<br>&emsp;&emsp;document.write(exp1,exp2,exp3,….)</p>\n<p>说明<br>&emsp;&emsp;虽然根据 DOM 标准，该方法只接受单个字符串作为参数。不过根据经验，write() 可接受任何多个参数。</p>\n<p>我们通常按照两种的方式使用 write() 方法：一是在使用该方在文档中输出 HTML，另一种是在调用该方法的的窗口之外的窗口、框架中产生新文档。在第二种情况中，请务必使用 close() 方法来关闭文档。</p>\n<p><strong>2、writeln() 方法</strong></p>\n<p>定义和用法<br>&emsp;&emsp;writeln() 方法与 write() 方法作用相同，外加可在每个表达式后写一个换行符。</p>\n<p>3、open()方法</p>\n<p>定义和用法<br>&emsp;&emsp;open() 方法可打开一个新文档，并擦除当前文档的内容。</p>\n<p>语法<br>&emsp;&emsp;document.open(mimetype,replace)<br>|参数| 描述 |<br>|–|–|<br>| mimetype |可选。规定正在写的文档的类型。默认值是 “text/html”。  |<br>|replace|可选。当此参数设置后，可引起新文档从父文档继承历史条目。|</p>\n<p>说明<br>&emsp;&emsp;该方法将擦除当前 HTML 文档的内容，开始一个新的文档，新文档用 write() 方法或 writeln() 方法编写。</p>\n<p>提示和注释<br>&emsp;&emsp;重要事项：调用 open() 方法打开一个新文档并且用 write() 方法设置文档内容后，必须记住用 close 方法关闭文档，并迫使其内容显示出来。</p>\n<p>注释：属于被覆盖的文档的一部分的脚本或事件句柄不能调用该方法，因为脚本或事件句柄自身也会被覆盖。</p>\n<p>4、close() 方法</p>\n<p>定义和用法<br>&emsp;&emsp;close() 方法可关闭一个由 document.open 方法打开的输出流，并显示选定的数据。</p>\n<p>语法<br>&emsp;&emsp;document.close()<br>说明<br>&emsp;&emsp;该方法将关闭 open() 方法打开的文档流，并强制地显示出所有缓存的输出内容。如果您使用 write() 方法动态地输出一个文档，必须记住当你这么做的时候要调用 close() 方法，以确保所有文档内容都能显示。</p>\n<p>&emsp;&emsp;一旦调用了 close()，就不应该再次调用 write()，因为这会隐式地调用 open() 来擦除当前文档并开始一个新的文档。</p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n","more":"<h2 id=\"Document-对象\"><a href=\"#Document-对象\" class=\"headerlink\" title=\"Document 对象\"></a>Document 对象</h2><p>每个载入浏览器的 HTML 文档都会成为 Document 对象。</p>\n<p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p>\n<p>提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。</p>\n<hr>\n<p><strong>一、文档子节点</strong></p>\n<p>1、在document中有一个属性body，它保存的是body的引用（<strong>比通过childNodes列表访问的更快，更直接）</strong><br>&emsp;&emsp;Var body = document.body;</p>\n<p>2、Doucument.doucumentElement保存的是html根标签<br>&emsp;&emsp;Var html = document.documentElenmet;</p>\n<p>3、Document.all 代表页面中的所有元素<br>&emsp;&emsp;var all = document.all;<br>&emsp;&emsp;（var all = document.getElementsByTagName(“*”)）效果一样。<br>&emsp;&emsp;它返回一个数组</p>\n<p>4、根据元素的class属性查询一组元素节点对象<br>&emsp;&emsp;GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>&emsp;&emsp;但是该方法 不支持IE8及以下浏览器。</p>\n<p>5、documen.querySelector()<br>&emsp;&emsp; 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>&emsp;&emsp; 虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>&emsp;&emsp; 使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p>\n<p>6、documen.querySelectorAll()<br>&emsp;&emsp;该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>&emsp;&emsp;即使符合条件的元素只有一个，他也会返回数组。</p>\n<hr>\n<p><strong>二、文档信息</strong></p>\n<p>1.document.title<br>&emsp;&emsp;可以取得当前界面的标题，也可以修改当前界面的标题并反映给浏览器的标题栏中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.title)  <span class=\"comment\">//查看标题</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.title = <span class=\"string\">&quot;aqing&quot;</span>     <span class=\"comment\">//修改标题</span></span><br></pre></td></tr></table></figure>\n\n\n<p>2.属性 URL、domain、referrer  都和网页请求有关。<br>&emsp;&emsp;URL属性包含完整的URL<br>&emsp;&emsp;domain属性中只包含了页面的域名。<br>&emsp;&emsp;referrer属性中保存着连接到当前页面的哪个页面的URL，在没有来源页面的情况下，referrer属性中可能会包含空字符串</p>\n<hr>\n<p><strong>三、查找元素</strong></p>\n<p>1.getElementById()<br>&emsp;&emsp;通过id属性来获取一个元素节点的对象</p>\n<p>2.getElementsByTagName()<br>&emsp;&emsp;可以根据标签名来获取一组元素节点对象<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<p>3.getElementsByName()<br>&emsp;&emsp;通过name属性来获取一组元素节点对象。<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<hr>\n<p><strong>四、特殊集合</strong></p>\n<p>1、document.anchors<br>&emsp;&emsp;包含文档中所有带name特性的 a 元素</p>\n<p>2、document.forms<br>&emsp;&emsp;包含文档中所有的<form>元素，与documen.getElementByTagName（“form”）结果相同。</p>\n<p>3、document.images<br>&emsp;&emsp;包含文档中所有的<img>元素，与documen.getElementByTagName（“img”）结果相同。</p>\n<p>4、document.links<br>&emsp;&emsp;包含文档中所带href特性的 a 元素</p>\n<p><strong>集合中的项也会随着当前文档内容的更新而更新</strong></p>\n<hr>\n<p><strong>五、DOM一致性检测</strong></p>\n<p>hasFeature()<br>&emsp;&emsp;这个方法有两个参数：要检测的DOM功能的名称及版本号。如果浏览器支持给定的名称和版本的功能，则该方法会返回 true 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.implementation.hasFeature(<span class=\"string\">&quot;XML&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>六、文档写入</strong></p>\n<p><strong>1、write()方法</strong><br>定义和用法<br>&emsp;&emsp;write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。</p>\n<p>可列出多个参数(exp1,exp2,exp3,…) ，它们将按顺序被追加到文档中。</p>\n<p>语法<br>&emsp;&emsp;document.write(exp1,exp2,exp3,….)</p>\n<p>说明<br>&emsp;&emsp;虽然根据 DOM 标准，该方法只接受单个字符串作为参数。不过根据经验，write() 可接受任何多个参数。</p>\n<p>我们通常按照两种的方式使用 write() 方法：一是在使用该方在文档中输出 HTML，另一种是在调用该方法的的窗口之外的窗口、框架中产生新文档。在第二种情况中，请务必使用 close() 方法来关闭文档。</p>\n<p><strong>2、writeln() 方法</strong></p>\n<p>定义和用法<br>&emsp;&emsp;writeln() 方法与 write() 方法作用相同，外加可在每个表达式后写一个换行符。</p>\n<p>3、open()方法</p>\n<p>定义和用法<br>&emsp;&emsp;open() 方法可打开一个新文档，并擦除当前文档的内容。</p>\n<p>语法<br>&emsp;&emsp;document.open(mimetype,replace)<br>|参数| 描述 |<br>|–|–|<br>| mimetype |可选。规定正在写的文档的类型。默认值是 “text/html”。  |<br>|replace|可选。当此参数设置后，可引起新文档从父文档继承历史条目。|</p>\n<p>说明<br>&emsp;&emsp;该方法将擦除当前 HTML 文档的内容，开始一个新的文档，新文档用 write() 方法或 writeln() 方法编写。</p>\n<p>提示和注释<br>&emsp;&emsp;重要事项：调用 open() 方法打开一个新文档并且用 write() 方法设置文档内容后，必须记住用 close 方法关闭文档，并迫使其内容显示出来。</p>\n<p>注释：属于被覆盖的文档的一部分的脚本或事件句柄不能调用该方法，因为脚本或事件句柄自身也会被覆盖。</p>\n<p>4、close() 方法</p>\n<p>定义和用法<br>&emsp;&emsp;close() 方法可关闭一个由 document.open 方法打开的输出流，并显示选定的数据。</p>\n<p>语法<br>&emsp;&emsp;document.close()<br>说明<br>&emsp;&emsp;该方法将关闭 open() 方法打开的文档流，并强制地显示出所有缓存的输出内容。如果您使用 write() 方法动态地输出一个文档，必须记住当你这么做的时候要调用 close() 方法，以确保所有文档内容都能显示。</p>\n<p>&emsp;&emsp;一旦调用了 close()，就不应该再次调用 write()，因为这会隐式地调用 open() 来擦除当前文档并开始一个新的文档。</p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"DOM","path":"api/categories/DOM.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"DOM","path":"api/tags/DOM.json"}]}