{"title":"JavaScript 性能优化之安全类型检测","slug":"36","date":"2020-06-03T14:43:47.000Z","updated":"2022-07-29T04:22:04.781Z","comments":true,"path":"api/articles/36.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/ebe11dec2238427496340fe86c4f5d61.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/ebe11dec2238427496340fe86c4f5d61.jpg\"></p>\n<span id=\"more\"></span>\n\n<p>JavaScript内置的类型检测机制并非完全可靠。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isArray = value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码要返回true,value必须是一个数组，而且还必须与Array构造函数在同个全局作用域中。(别忘了，Array是window的属性。)如果value是在另个frame中定义的数组，那么以上代码就会返回false。</p>\n<p><strong>解决方法：</strong> 众所周知，在任何值上调用Object原生的toString()方法，都会返回一个[obj ect NativeConstructorName] 格式的字符串。每个类在内部都有一个[ [Class]]属性，这个属性中就指定了上述字符串中的构造函数名。</p>\n<p>由于原生数组的构造函数名与全局作用域无关，因此使用toString()就能保证返回一致的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测是否是原生数组</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(value) == <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"comment\">//检测是否是原生函数\t</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(value) == <span class=\"string\">&quot;[object Function]&quot;</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"comment\">//检测是否是原生正则</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRegExp</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(value) == <span class=\"string\">&quot;[object RegExp]&quot;</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"comment\">//检测是否是原生JSON</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> isNativeJSON = <span class=\"built_in\">window</span>.JSON &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">JSON</span>) == <span class=\"string\">&quot;[object JSON]&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">有一点我们要注意object . prototpye. toString()本身也可能会被修改。所以我们讨论的技巧是假设0bject. prototpye. toString()是未被修改过的原生版本的情况下。</span></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n","more":"<p>JavaScript内置的类型检测机制并非完全可靠。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isArray = value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码要返回true,value必须是一个数组，而且还必须与Array构造函数在同个全局作用域中。(别忘了，Array是window的属性。)如果value是在另个frame中定义的数组，那么以上代码就会返回false。</p>\n<p><strong>解决方法：</strong> 众所周知，在任何值上调用Object原生的toString()方法，都会返回一个[obj ect NativeConstructorName] 格式的字符串。每个类在内部都有一个[ [Class]]属性，这个属性中就指定了上述字符串中的构造函数名。</p>\n<p>由于原生数组的构造函数名与全局作用域无关，因此使用toString()就能保证返回一致的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检测是否是原生数组</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(value) == <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"comment\">//检测是否是原生函数\t</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(value) == <span class=\"string\">&quot;[object Function]&quot;</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"comment\">//检测是否是原生正则</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRegExp</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(value) == <span class=\"string\">&quot;[object RegExp]&quot;</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"><span class=\"comment\">//检测是否是原生JSON</span></span><br><span class=\"line\">         <span class=\"keyword\">var</span> isNativeJSON = <span class=\"built_in\">window</span>.JSON &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">JSON</span>) == <span class=\"string\">&quot;[object JSON]&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">有一点我们要注意object . prototpye. toString()本身也可能会被修改。所以我们讨论的技巧是假设0bject. prototpye. toString()是未被修改过的原生版本的情况下。</span></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"性能优化","path":"api/tags/性能优化.json"}]}