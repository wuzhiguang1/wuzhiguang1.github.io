{"title":"React中setState异步更新","slug":"266","date":"2023-04-18T12:48:19.000Z","updated":"2023-04-18T12:51:28.682Z","comments":true,"path":"api/articles/266.json","excerpt":null,"covers":null,"content":"<p>React核心成员（Redux的作者）Dan Abramov也有对应的回复 <a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">https://github.com/facebook/react/issues/11527#issuecomment-360199710</a></p>\n<p>总结：</p>\n<p>1、setState设计为异步，可以显著的提升性能；</p>\n<ul>\n<li>如果每次调用 setState都进行一次更新，那么意味着render函数会被频繁调用，界面重新渲染，这样效率是很低的；</li>\n<li>最好的办法应该是获取到多个更新，之后进行批量更新；</li>\n</ul>\n<p>2、如果同步更新了state，但是还没有执行render函数，那么state和props不能保持同步；</p>\n<ul>\n<li>state和props不能保持一致性，会在开发中产生很多的问题</li>\n</ul>\n","more":"<p>React核心成员（Redux的作者）Dan Abramov也有对应的回复 <a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">https://github.com/facebook/react/issues/11527#issuecomment-360199710</a></p>\n<p>总结：</p>\n<p>1、setState设计为异步，可以显著的提升性能；</p>\n<ul>\n<li>如果每次调用 setState都进行一次更新，那么意味着render函数会被频繁调用，界面重新渲染，这样效率是很低的；</li>\n<li>最好的办法应该是获取到多个更新，之后进行批量更新；</li>\n</ul>\n<p>2、如果同步更新了state，但是还没有执行render函数，那么state和props不能保持同步；</p>\n<ul>\n<li>state和props不能保持一致性，会在开发中产生很多的问题</li>\n</ul>\n","categories":[{"name":"React","path":"api/categories/React.json"}],"tags":[{"name":"React","path":"api/tags/React.json"}]}