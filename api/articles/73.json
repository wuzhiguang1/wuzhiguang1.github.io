{"title":"关于setInterval和setTImeout中的this指向问题","slug":"73","date":"2020-07-30T00:53:35.000Z","updated":"2022-07-29T04:22:04.764Z","comments":true,"path":"api/articles/73.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/79053597563864302.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/79053597563864302.jpg\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p><strong>setInterval和setTimeout中传入函数时，函数中的this会指向window对象</strong></p>\n<br>\n\n<p>我们先来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　这里打印的是obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//0　　这里打印的是window.num，值为0</span></span><br></pre></td></tr></table></figure>\n\n<p>从上述例子中可以看到<strong>setTimeout中函数内的this是指向了window对象</strong>，<span style=\"color:red\"><strong>这是由于setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致这些代码中包含的 this 关键字会指向 window (或全局)对象。</strong></span>具体可参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout\">MDN setTimeout</a></p>\n<br>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>若想要让setTimeout中的this指向正确的值，可以使用以下三种比较常用的方法来使this指向正确的值：</p>\n<br>\n\n<h3 id=\"（1）-将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：\"><a href=\"#（1）-将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：\" class=\"headerlink\" title=\"（1） 将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：\"></a><strong>（1） 将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量</strong>，如下：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;    <span class=\"comment\">//将this存为一个变量，赋值给that，此时的this指向obj</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(that.num);    <span class=\"comment\">//利用闭包访问that，that是一个指向obj的指针</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这种方法是将当前对象的引用放在一个变量里，定时器内部的函数来访问到这个变量，自然就可以得到当前的对象。</strong></p>\n<br>\n\n<h3 id=\"（2）利用bind-方法\"><a href=\"#（2）利用bind-方法\" class=\"headerlink\" title=\"（2）利用bind()方法\"></a><strong>（2）利用bind()方法</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">        &#125;.bind(<span class=\"built_in\">this</span>), <span class=\"number\">1000</span>)    <span class=\"comment\">//利用bind()将this绑定到这个函数上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　打印的为obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//1　　打印的为obj.num，值为1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>bind()方法是在Function.prototype上的一个方法，当被绑定函数执行时，bind方法会创建一个新函数，并将第一个参数作为新函数运行时的this。在这个例子中，在调用setTimeout中的函数时，bind方法创建了一个新的函数，并将this传进新的函数，执行的结果也就是正确的了。关于bind方法可参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">MDN bind</a></strong></p>\n<br>\n\n<h3 id=\"（3）-箭头函数\"><a href=\"#（3）-箭头函数\" class=\"headerlink\" title=\"（3） 箭头函数\"></a>（3） 箭头函数</h3><p>使用es6的箭头函数，最为常用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)    <span class=\"comment\">//箭头函数中的this总是指向外层调用者，也就是Obj,</span></span><br><span class=\"line\">        \t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>ES6中的箭头函数完全修复了this的指向，<span style=\"color:red\"><strong>向外层定义域中，一层一层的查找 this ，直到有 this 的定义。</strong></span>因此利用箭头函数就可以轻松解决这个问题。</p>\n<p><br><br><br></p>\n","more":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p><strong>setInterval和setTimeout中传入函数时，函数中的this会指向window对象</strong></p>\n<br>\n\n<p>我们先来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　这里打印的是obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//0　　这里打印的是window.num，值为0</span></span><br></pre></td></tr></table></figure>\n\n<p>从上述例子中可以看到<strong>setTimeout中函数内的this是指向了window对象</strong>，<span style=\"color:red\"><strong>这是由于setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致这些代码中包含的 this 关键字会指向 window (或全局)对象。</strong></span>具体可参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout\">MDN setTimeout</a></p>\n<br>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>若想要让setTimeout中的this指向正确的值，可以使用以下三种比较常用的方法来使this指向正确的值：</p>\n<br>\n\n<h3 id=\"（1）-将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：\"><a href=\"#（1）-将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：\" class=\"headerlink\" title=\"（1） 将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量，如下：\"></a><strong>（1） 将当前对象的this存为一个变量，定时器内的函数利用闭包来访问这个变量</strong>，如下：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;    <span class=\"comment\">//将this存为一个变量，赋值给that，此时的this指向obj</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(that.num);    <span class=\"comment\">//利用闭包访问that，that是一个指向obj的指针</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这种方法是将当前对象的引用放在一个变量里，定时器内部的函数来访问到这个变量，自然就可以得到当前的对象。</strong></p>\n<br>\n\n<h3 id=\"（2）利用bind-方法\"><a href=\"#（2）利用bind-方法\" class=\"headerlink\" title=\"（2）利用bind()方法\"></a><strong>（2）利用bind()方法</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">        &#125;.bind(<span class=\"built_in\">this</span>), <span class=\"number\">1000</span>)    <span class=\"comment\">//利用bind()将this绑定到这个函数上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　打印的为obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//1　　打印的为obj.num，值为1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>bind()方法是在Function.prototype上的一个方法，当被绑定函数执行时，bind方法会创建一个新函数，并将第一个参数作为新函数运行时的this。在这个例子中，在调用setTimeout中的函数时，bind方法创建了一个新的函数，并将this传进新的函数，执行的结果也就是正确的了。关于bind方法可参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">MDN bind</a></strong></p>\n<br>\n\n<h3 id=\"（3）-箭头函数\"><a href=\"#（3）-箭头函数\" class=\"headerlink\" title=\"（3） 箭头函数\"></a>（3） 箭头函数</h3><p>使用es6的箭头函数，最为常用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.num = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getNumLater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.num);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)    <span class=\"comment\">//箭头函数中的this总是指向外层调用者，也就是Obj,</span></span><br><span class=\"line\">        \t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Obj; </span><br><span class=\"line\">obj.getNum();<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br><span class=\"line\">obj.getNumLater()<span class=\"comment\">//1　　打印的是obj.num，值为1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>ES6中的箭头函数完全修复了this的指向，<span style=\"color:red\"><strong>向外层定义域中，一层一层的查找 this ，直到有 this 的定义。</strong></span>因此利用箭头函数就可以轻松解决这个问题。</p>\n<p><br><br><br></p>","categories":[{"name":"this","path":"api/categories/this.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"ES6","path":"api/tags/ES6.json"},{"name":"this","path":"api/tags/this.json"}]}