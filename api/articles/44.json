{"title":"es6之 Object.assign()详解","slug":"44","date":"2020-06-27T06:29:36.000Z","updated":"2022-07-29T04:22:04.779Z","comments":true,"path":"api/articles/44.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/172a2a72642a945e.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/172a2a72642a945e.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"es6之-Object-assign\"><a href=\"#es6之-Object-assign\" class=\"headerlink\" title=\"es6之 Object.assign()\"></a>es6之 Object.assign()</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p>\n<p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p>\n<!--more-->\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target) <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们需要注意的是，如果目标对象和源对象有同名属性。或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">100</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(obj) === obj) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果该参数不是对象，则会先转成对象，然后返回。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign(<span class=\"number\">2</span>)) <span class=\"comment\">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>由于<code>undefined</code>和<code>null</code>无法转成对象，所以如果它们作为参数，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果非对象参数出现在源对象的位置（即不是第一个参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果<code>undefined</code>和<code>null</code>不在首参数，就不会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">undefined</span>) === obj <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">null</span>) === obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>v1</code>、<code>v2</code>、<code>v3</code>分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。<strong>这是因为只有字符串的包装对象，会产生可枚举属性。</strong></p>\n<p>我们还要注意一点：<code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。举个栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;<span class=\"attr\">b</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">&#x27;invisible&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// &#123; b: &#x27;c&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>属性名为 Symbol 值的属性，也会被<code>Object.assign</code>拷贝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;b&#x27;</span> &#125;, &#123; [<span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;c&#x27;</span>)]: <span class=\"string\">&#x27;d&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#x27;b&#x27;, Symbol(c): &#x27;d&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p><strong>浅拷贝</strong></p>\n<p><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，<strong>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.a.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，源对象<code>obj1</code>的<code>a</code>属性的值是一个对象，<code>Object.assign</code>拷贝得到的是这个对象的引用。这个对象的任何变化，都会影响到目标对象上面。这一点我们要万分注意。</p>\n<p>对比一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//  &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj2.b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//  &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//  &#123;a: 1, b: 3&#125;               </span></span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子扩展运算符拷贝的对象是<strong>基础数据类型</strong>，因此对<code>obj2</code>的修改并不会影响<code>obj1</code> .</p>\n<p>也就是说，<strong>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</strong> 如果是<strong>基础数据类型</strong>，这类变量的拷贝的时候会完整的复制一份。</p>\n</li>\n<li><p><strong>数组的处理</strong></p>\n<p><code>Object.assign</code>会把数组视为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>])  <span class=\"comment\">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>Object.assign</code>把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性<code>4</code>覆盖了目标数组的 0 号属性<code>1</code>。</p>\n</li>\n<li><p><strong>同名属性的替换</strong></p>\n<p>对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aqing&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source)  </span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#123; name: &#x27;小明&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>target</code>对象的<code>name</code>属性被<code>source</code>对象的<code>name</code>属性整个替换掉了，而不会得到<code>&#123; a: &#123; name: &#39;小明&#39;, age: 12 &#125; &#125;</code>的结果。这并不是我们想要的结果，我们需要特别注意。</p>\n</li>\n<li><p><strong>取值函数的处理</strong></p>\n<p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。举个栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(target, source))  <span class=\"comment\">//&#123;age: 20&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，<code>source</code>对象的<code>age</code>取值函数，<code>Object.assign</code>不会复制这个取值函数，只会拿到值以后，将这个值复制过去。</p>\n</li>\n</ul>\n<h2 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h2><ul>\n<li><p><strong>为对象添加属性</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x, y</span>)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aqing&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);   <span class=\"comment\">//Person &#123;name: &quot;aqing&quot;, age: 12&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面方法通过<code>Object.assign</code>方法，将<code>x</code>属性和<code>y</code>属性添加到<code>Point</code>类的对象实例</p>\n</li>\n<li><p><strong>为对象添加方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">someMethod</span>(<span class=\"params\">arg1, arg2</span>)</span> &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">anotherMethod</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></span><br><span class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用<code>assign</code>方法添加到<code>SomeClass.prototype</code>之中。</p>\n</li>\n<li><p><strong>合并多个对象</strong></p>\n<p>将多个对象合并到某个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>克隆对象</strong></p>\n<p>举个简单的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;aqing&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">obj1 = <span class=\"built_in\">Object</span>.setPrototypeOf(obj1, obj); <span class=\"comment\">//将obj1的原型设置为obj</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj1.c = <span class=\"number\">3</span>; <span class=\"comment\">//为obj1添加属性c</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1); <span class=\"comment\">//克隆obj1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码将<code>obj1</code>对象拷贝到一个<code>obj2</code>，就得到了<code>obj1</code>的克隆。不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如 <code>obj2.a</code>的值为<code>undefined</code>如果想要保持继承链，可以采用下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看上面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;aqing&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">obj1 = <span class=\"built_in\">Object</span>.setPrototypeOf(obj1, obj); <span class=\"comment\">//将obj1的原型设置为obj</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj1.c = <span class=\"number\">3</span>; <span class=\"comment\">//为obj1添加属性c</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1); <span class=\"comment\">//克隆obj1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，因为<code>obj2 </code>保持了 <code>obj1</code>的原型链，所以<code>obj2.a</code>的值为<code>1</code>。</p>\n</li>\n</ul>\n<p><br><br><br>愿你的坚持终有收获。</p>\n<p><br><br></p>\n","more":"<h1 id=\"es6之-Object-assign\"><a href=\"#es6之-Object-assign\" class=\"headerlink\" title=\"es6之 Object.assign()\"></a>es6之 Object.assign()</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p>\n<p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p>\n<!--more-->\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target) <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们需要注意的是，如果目标对象和源对象有同名属性。或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">100</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(obj) === obj) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果该参数不是对象，则会先转成对象，然后返回。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign(<span class=\"number\">2</span>)) <span class=\"comment\">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>由于<code>undefined</code>和<code>null</code>无法转成对象，所以如果它们作为参数，就会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果非对象参数出现在源对象的位置（即不是第一个参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果<code>undefined</code>和<code>null</code>不在首参数，就不会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">undefined</span>) === obj <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">null</span>) === obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v3 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>v1</code>、<code>v2</code>、<code>v3</code>分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。<strong>这是因为只有字符串的包装对象，会产生可枚举属性。</strong></p>\n<p>我们还要注意一点：<code>Object.assign</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。举个栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;<span class=\"attr\">b</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">&#x27;invisible&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// &#123; b: &#x27;c&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>属性名为 Symbol 值的属性，也会被<code>Object.assign</code>拷贝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;b&#x27;</span> &#125;, &#123; [<span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;c&#x27;</span>)]: <span class=\"string\">&#x27;d&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#x27;b&#x27;, Symbol(c): &#x27;d&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p><strong>浅拷贝</strong></p>\n<p><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，<strong>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.a.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，源对象<code>obj1</code>的<code>a</code>属性的值是一个对象，<code>Object.assign</code>拷贝得到的是这个对象的引用。这个对象的任何变化，都会影响到目标对象上面。这一点我们要万分注意。</p>\n<p>对比一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//  &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj2.b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//  &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//  &#123;a: 1, b: 3&#125;               </span></span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子扩展运算符拷贝的对象是<strong>基础数据类型</strong>，因此对<code>obj2</code>的修改并不会影响<code>obj1</code> .</p>\n<p>也就是说，<strong>如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</strong> 如果是<strong>基础数据类型</strong>，这类变量的拷贝的时候会完整的复制一份。</p>\n</li>\n<li><p><strong>数组的处理</strong></p>\n<p><code>Object.assign</code>会把数组视为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>])  <span class=\"comment\">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>Object.assign</code>把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性<code>4</code>覆盖了目标数组的 0 号属性<code>1</code>。</p>\n</li>\n<li><p><strong>同名属性的替换</strong></p>\n<p>对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aqing&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source)  </span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#123; name: &#x27;小明&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>target</code>对象的<code>name</code>属性被<code>source</code>对象的<code>name</code>属性整个替换掉了，而不会得到<code>&#123; a: &#123; name: &#39;小明&#39;, age: 12 &#125; &#125;</code>的结果。这并不是我们想要的结果，我们需要特别注意。</p>\n</li>\n<li><p><strong>取值函数的处理</strong></p>\n<p><code>Object.assign</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。举个栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">age</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(target, source))  <span class=\"comment\">//&#123;age: 20&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，<code>source</code>对象的<code>age</code>取值函数，<code>Object.assign</code>不会复制这个取值函数，只会拿到值以后，将这个值复制过去。</p>\n</li>\n</ul>\n<h2 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h2><ul>\n<li><p><strong>为对象添加属性</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x, y</span>)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;aqing&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">age</span>: <span class=\"number\">12</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);   <span class=\"comment\">//Person &#123;name: &quot;aqing&quot;, age: 12&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面方法通过<code>Object.assign</code>方法，将<code>x</code>属性和<code>y</code>属性添加到<code>Point</code>类的对象实例</p>\n</li>\n<li><p><strong>为对象添加方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">someMethod</span>(<span class=\"params\">arg1, arg2</span>)</span> &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">anotherMethod</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></span><br><span class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用<code>assign</code>方法添加到<code>SomeClass.prototype</code>之中。</p>\n</li>\n<li><p><strong>合并多个对象</strong></p>\n<p>将多个对象合并到某个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>克隆对象</strong></p>\n<p>举个简单的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;aqing&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">obj1 = <span class=\"built_in\">Object</span>.setPrototypeOf(obj1, obj); <span class=\"comment\">//将obj1的原型设置为obj</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj1.c = <span class=\"number\">3</span>; <span class=\"comment\">//为obj1添加属性c</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1); <span class=\"comment\">//克隆obj1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码将<code>obj1</code>对象拷贝到一个<code>obj2</code>，就得到了<code>obj1</code>的克隆。不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如 <code>obj2.a</code>的值为<code>undefined</code>如果想要保持继承链，可以采用下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看上面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;aqing&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">obj1 = <span class=\"built_in\">Object</span>.setPrototypeOf(obj1, obj); <span class=\"comment\">//将obj1的原型设置为obj</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">obj1.c = <span class=\"number\">3</span>; <span class=\"comment\">//为obj1添加属性c</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = clone(obj1); <span class=\"comment\">//克隆obj1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//&#123;c: 3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，因为<code>obj2 </code>保持了 <code>obj1</code>的原型链，所以<code>obj2.a</code>的值为<code>1</code>。</p>\n</li>\n</ul>\n<p><br><br><br>愿你的坚持终有收获。</p>\n<p><br><br></p>","categories":[{"name":"ES6","path":"api/categories/ES6.json"}],"tags":[{"name":"ES6","path":"api/tags/ES6.json"}]}