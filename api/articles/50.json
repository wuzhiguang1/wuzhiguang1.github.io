{"title":"node.js系列之简单操作","slug":"50","date":"2020-07-11T12:04:17.000Z","updated":"2022-07-29T04:22:04.776Z","comments":true,"path":"api/articles/50.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/173319aacabd9c01.png","https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTUzNS5wbmc?x-oss-process=image/format,png","https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE4MTQyNi5wbmc?x-oss-process=image/format,png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/173319aacabd9c01.png\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"1、什么是node-js\"><a href=\"#1、什么是node-js\" class=\"headerlink\" title=\"1、什么是node.js\"></a>1、什么是node.js</h2><p>简单说一下什么是node.js</p>\n<ul>\n<li>Node.js 是什么<ul>\n<li>JavaScript 运行时环境</li>\n<li>既不是语言，也不是框架，它是一个平台</li>\n</ul>\n</li>\n<li>Node.js 中的 JavaScript<ul>\n<li>没有 BOM、DOM</li>\n<li>EcmaScript 基本的 JavaScript 语言部分</li>\n<li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul>\n<li>文件操作的能力</li>\n<li>http 服务的能力</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"2、nodejs-–-简单读写文件\"><a href=\"#2、nodejs-–-简单读写文件\" class=\"headerlink\" title=\"2、nodejs – 简单读写文件\"></a>2、nodejs – 简单读写文件</h2><p>浏览器中的 JavaScript 是没有文件操作的能力的<br>但是 Node 中的 JavaScript 具有文件操作的能力<br>fs 是 file-system 的简写，就是文件系统的意思<br>在 Node 中如果想要进行文件操作，就必须引入 fs 这个核心模块<br>在 fs 这个核心模块中，就提供了所有的文件操作相关的 API<br>例如：fs.readFile 就是用来读取文件的</p>\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p> 第一个参数就是要读取的文件路径<br> 第二个参数是一个回调函数<br>       成功<br>     &emsp; &emsp;     data 数据<br>    &emsp; &emsp;      error null<br>       失败<br>   &emsp; &emsp;       data undefined没有数据<br>   &emsp; &emsp;       error 错误对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ <span class=\"number\">1.</span> 使用 <span class=\"built_in\">require</span> 方法加载 fs 核心模块</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">&#x27;./data/a.txt&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// &lt;Buffer 68 65 6c 6c 6f 20 6e 6f 64 65 6a 73 0d 0a&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 文件中存储的其实都是二进制数据 0 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里为什么看到的不是 0 和 1 呢？原因是二进制转为 16 进制了</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是无论是二进制01还是16进制，人类都不认识</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以我们可以通过 toString 方法把其转为我们能认识的字符</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在这里就可以通过判断 error 来确认是否有错误发生</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;读取文件失败了&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h3><p>第一个参数：文件路径<br>第二个参数：文件内容<br>第三个参数：回调函数 — error</p>\n<p>成功<br>        &emsp; &emsp;文件写入成功<br>       &emsp; &emsp;error 是 null<br>       失败<br>        &emsp; &emsp;  文件写入失败<br>         &emsp; &emsp;error 就是错误对象</p>\n<p>​        </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">&#x27;./data/你好.txt&#x27;</span>, <span class=\"string\">&#x27;大家好，我是阿清大大&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;文件写入成功&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(error)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;写入失败&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;写入成功了&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、简单的http服务\"><a href=\"#3、简单的http服务\" class=\"headerlink\" title=\"3、简单的http服务\"></a>3、简单的http服务</h2><p>你可以使用 Node 非常轻松的构建一个 Web 服务器。<br>服务器要干嘛？<br> 提供服务：对数据的服务<br> 发请求<br> 接收请求<br> 处理请求<br> 给个反馈（发送响应）</p>\n<p>在 Node 中专门提供了一个核心模块：http<br>http 这个模块的职责就是帮你创建编写服务器的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 加载 http 核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 使用 http.createServer() 方法创建一个 Web 服务器</span></span><br><span class=\"line\"><span class=\"comment\">//    返回一个 Server 实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    注册 request 请求事件</span></span><br><span class=\"line\"><span class=\"comment\">//    当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到客户端的请求了&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 绑定端口号，启动服务器</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>request 请求事件处理函数，需要接收两个参数：<br>   Request 请求对象<br>       请求对象可以用来获取客户端的一些请求信息，例如请求路径<br>   Response 响应对象<br>       响应对象可以用来给客户端发送响应消息</p>\n<p> response 对象有一个方法：write 可以用来给客户端发送响应数据<br> write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// http://127.0.0.1:3000/ /</span></span><br><span class=\"line\">    <span class=\"comment\">// http://127.0.0.1:3000/a /a</span></span><br><span class=\"line\">    <span class=\"comment\">// http://127.0.0.1:3000/foo/b /foo/b</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到客户端的请求了，请求路径是：&#x27;</span> + request.url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// response 对象有一个方法：write 可以用来给客户端发送响应数据</span></span><br><span class=\"line\">    <span class=\"comment\">// write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</span></span><br><span class=\"line\">    response.write(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    response.write(<span class=\"string\">&#x27; nodejs&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 告诉客户端，我的话说完了，你可以呈递给用户了</span></span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 上面的方式比较麻烦，推荐使用更简单的方式，直接 end 的同时发送响应数据<br><code>  res.end(&#39;hello nodejs&#39;)</code></p>\n<p>  根据不同的请求路径发送不同的响应结果</p>\n<ol>\n<li>获取请求路径<br>req.url 获取到的是端口号之后的那一部分路径<br>也就是说所有的 url 都是以 / 开头的</li>\n<li>判断路径处理响应</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建 Server</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 监听 request 请求事件，设置请求处理函数</span></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到请求了，请求路径是：&#x27;</span> + req.url)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请求我的客户端的地址是：&#x27;</span>, req.socket.remoteAddress, req.socket.remotePort)</span><br><span class=\"line\">    <span class=\"comment\">//req.socket.remoteAddress, req.socket.remotePort 别人访问时的IP地址和端口号</span></span><br><span class=\"line\">    <span class=\"comment\">//ip 地址用来定位计算机</span></span><br><span class=\"line\">\t<span class=\"comment\">//端口号用来定位具体的应用程序</span></span><br><span class=\"line\">\t<span class=\"comment\">//所有需要联网通信的应用程序都会占用一个端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = req.url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;index page&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;login page&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/products&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> products = [&#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;苹果&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;香蕉&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">price</span>: <span class=\"number\">20</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;榴莲&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 响应内容只能是二进制数据或者字符串</span></span><br><span class=\"line\">        <span class=\"comment\">//  数字</span></span><br><span class=\"line\">        <span class=\"comment\">//  对象</span></span><br><span class=\"line\">        <span class=\"comment\">//  数组</span></span><br><span class=\"line\">        <span class=\"comment\">//  布尔值</span></span><br><span class=\"line\">        res.end(<span class=\"built_in\">JSON</span>.stringify(products))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;404 Not Found.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 绑定端口号，启动服务</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功，可以访问了。。。&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们就可以通过访问不同的地址 来响应不同的内容。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTUzNS5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTk1MC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"require-方法有两个作用：\"><a href=\"#require-方法有两个作用：\" class=\"headerlink\" title=\"require 方法有两个作用：\"></a>require 方法有两个作用：</h3><pre><code>1. 加载文件模块并执行里面的代码\n2. 拿到被加载文件模块导出的接口对象\n</code></pre>\n<ul>\n<li>在 Node 中没有全局作用域的概念</li>\n<li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li>\n<li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul>\n<li>模块完全是封闭的</li>\n<li>外部无法访问内部</li>\n<li>内部也无法访问外部</li>\n</ul>\n</li>\n<li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li>\n<li>但是某些情况下，模块与模块是需要进行通信的</li>\n<li>在每个模块中，都提供了一个对象：<code>exports</code></li>\n<li>该对象默认是一个空对象</li>\n<li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li>\n<li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li>\n</ul>\n<p><strong>注意：</strong><br><strong>相对路径必须加 ./<br>可以省略后缀名<br>相对路径中的 ./ 不能省略，否则报错</strong></p>\n<br>\na.js\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bExports = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.foo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.add(<span class=\"number\">10</span>, <span class=\"number\">30</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.age)</span><br><span class=\"line\"></span><br><span class=\"line\">bExports.readFile(<span class=\"string\">&#x27;./a.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>b.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;bbb&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(exports)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.foo = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;文件路径：&#x27;</span>, path)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.age = age</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>运行服务a.js结果：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE4MTQyNi5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><br>会输出<code>hello</code> ，因为b.js中挂载的属性<code>foo</code> 的值是<code>hello</code>。同理 <code>add函数</code>和属性<code>age</code>。</p>\n<h3 id=\"这里关于中文乱码的问题：\"><a href=\"#这里关于中文乱码的问题：\" class=\"headerlink\" title=\"这里关于中文乱码的问题：\"></a>这里关于中文乱码的问题：</h3><p> 在服务端默认发送的数据，其实是 utf8 编码的内容<br>  但是浏览器不知道你是 utf8 编码的内容<br>  浏览器在不知道服务器响应内容的编码的情况下会按照当前操作系统的默认编码去解析<br>  中文操作系统默认是 gbk<br>  解决方法就是正确的告诉浏览器我给你发送的内容是什么编码的<br>  在 http 协议中，Content-Type 就是用来告知对方我给你发送的数据内容是什么类型<br>  <code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;)</code><br><code>  res.end(&#39;hello 世界&#39;)</code></p>\n<p>不同的资源对应的 Content-Type 是不一样，具体照：<a href=\"http://tool.oschina.net/commons\">http://tool.oschina.net/commons</a><br>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</p>\n<p><code>text/plain </code>就是普通文本<br>果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 <code>text/html</code> 格式的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 结合 fs 发送文件中的数据</span></span><br><span class=\"line\"><span class=\"comment\">// 2. Content-Type</span></span><br><span class=\"line\"><span class=\"comment\">//    http://tool.oschina.net/commons</span></span><br><span class=\"line\"><span class=\"comment\">//    不同的资源对应的 Content-Type 是不一样的</span></span><br><span class=\"line\"><span class=\"comment\">//    图片不需要指定编码</span></span><br><span class=\"line\"><span class=\"comment\">//    一般只为字符数据才指定编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// / index.html</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = req.url</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 我们要发送的还是在文件中的内容</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./resource/index.html&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;文件读取失败，请稍后重试！&#x27;</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data 默认是二进制数据，可以通过 .toString 转为咱们能识别的字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// res.end() 支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/xiaoming&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// url：统一资源定位符</span></span><br><span class=\"line\">    <span class=\"comment\">// 一个 url 最终其实是要对应到一个资源的</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./resource/ab2.jpg&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;文件读取失败，请稍后重试！&#x27;</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data 默认是二进制数据，可以通过 .toString 转为咱们能识别的字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// res.end() 支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// 图片就不需要指定编码了，因为我们常说的编码一般指的是：字符编码</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;image/jpeg&#x27;</span>)</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running...&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单http服务器总结\"><a href=\"#简单http服务器总结\" class=\"headerlink\" title=\"简单http服务器总结\"></a>简单http服务器总结</h3><ul>\n<li>require<ul>\n<li>  1、加载文件模块并执行里面的代码</li>\n<li>2、拿到被加载文件模块导出的接口对象</li>\n</ul>\n</li>\n<li>端口号<ul>\n<li>ip 地址定位计算机</li>\n<li>端口号定位具体的应用程序</li>\n</ul>\n</li>\n<li>Content-Type<ul>\n<li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li>\n<li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href=\"http://tool.oschina.net/commons\">http://tool.oschina.net/commons</a></li>\n<li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li>\n</ul>\n</li>\n<li>通过网络发送文件<ul>\n<li>发送的并不是文件，本质上来讲发送是文件的内容</li>\n<li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、核心模块\"><a href=\"#4、核心模块\" class=\"headerlink\" title=\"4、核心模块\"></a>4、核心模块</h2><ul>\n<li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul>\n<li>fs 文件操作模块</li>\n<li>http 网络服务构建模块</li>\n<li>os 操作系统信息模块</li>\n<li>path 路径处理模块</li>\n<li>。。。。</li>\n</ul>\n</li>\n<li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul>\n<li><code>var fs = require(&#39;fs&#39;)</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n愿你的坚持总有收获\n<br><br>","more":"<h2 id=\"1、什么是node-js\"><a href=\"#1、什么是node-js\" class=\"headerlink\" title=\"1、什么是node.js\"></a>1、什么是node.js</h2><p>简单说一下什么是node.js</p>\n<ul>\n<li>Node.js 是什么<ul>\n<li>JavaScript 运行时环境</li>\n<li>既不是语言，也不是框架，它是一个平台</li>\n</ul>\n</li>\n<li>Node.js 中的 JavaScript<ul>\n<li>没有 BOM、DOM</li>\n<li>EcmaScript 基本的 JavaScript 语言部分</li>\n<li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul>\n<li>文件操作的能力</li>\n<li>http 服务的能力</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<h2 id=\"2、nodejs-–-简单读写文件\"><a href=\"#2、nodejs-–-简单读写文件\" class=\"headerlink\" title=\"2、nodejs – 简单读写文件\"></a>2、nodejs – 简单读写文件</h2><p>浏览器中的 JavaScript 是没有文件操作的能力的<br>但是 Node 中的 JavaScript 具有文件操作的能力<br>fs 是 file-system 的简写，就是文件系统的意思<br>在 Node 中如果想要进行文件操作，就必须引入 fs 这个核心模块<br>在 fs 这个核心模块中，就提供了所有的文件操作相关的 API<br>例如：fs.readFile 就是用来读取文件的</p>\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p> 第一个参数就是要读取的文件路径<br> 第二个参数是一个回调函数<br>       成功<br>     &emsp; &emsp;     data 数据<br>    &emsp; &emsp;      error null<br>       失败<br>   &emsp; &emsp;       data undefined没有数据<br>   &emsp; &emsp;       error 错误对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ <span class=\"number\">1.</span> 使用 <span class=\"built_in\">require</span> 方法加载 fs 核心模块</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">&#x27;./data/a.txt&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// &lt;Buffer 68 65 6c 6c 6f 20 6e 6f 64 65 6a 73 0d 0a&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 文件中存储的其实都是二进制数据 0 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里为什么看到的不是 0 和 1 呢？原因是二进制转为 16 进制了</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是无论是二进制01还是16进制，人类都不认识</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以我们可以通过 toString 方法把其转为我们能认识的字符</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在这里就可以通过判断 error 来确认是否有错误发生</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;读取文件失败了&#x27;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h3><p>第一个参数：文件路径<br>第二个参数：文件内容<br>第三个参数：回调函数 — error</p>\n<p>成功<br>        &emsp; &emsp;文件写入成功<br>       &emsp; &emsp;error 是 null<br>       失败<br>        &emsp; &emsp;  文件写入失败<br>         &emsp; &emsp;error 就是错误对象</p>\n<p>​        </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fs.writeFile(<span class=\"string\">&#x27;./data/你好.txt&#x27;</span>, <span class=\"string\">&#x27;大家好，我是阿清大大&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;文件写入成功&#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(error)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;写入失败&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;写入成功了&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、简单的http服务\"><a href=\"#3、简单的http服务\" class=\"headerlink\" title=\"3、简单的http服务\"></a>3、简单的http服务</h2><p>你可以使用 Node 非常轻松的构建一个 Web 服务器。<br>服务器要干嘛？<br> 提供服务：对数据的服务<br> 发请求<br> 接收请求<br> 处理请求<br> 给个反馈（发送响应）</p>\n<p>在 Node 中专门提供了一个核心模块：http<br>http 这个模块的职责就是帮你创建编写服务器的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 加载 http 核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 使用 http.createServer() 方法创建一个 Web 服务器</span></span><br><span class=\"line\"><span class=\"comment\">//    返回一个 Server 实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    注册 request 请求事件</span></span><br><span class=\"line\"><span class=\"comment\">//    当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到客户端的请求了&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 绑定端口号，启动服务器</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>request 请求事件处理函数，需要接收两个参数：<br>   Request 请求对象<br>       请求对象可以用来获取客户端的一些请求信息，例如请求路径<br>   Response 响应对象<br>       响应对象可以用来给客户端发送响应消息</p>\n<p> response 对象有一个方法：write 可以用来给客户端发送响应数据<br> write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// http://127.0.0.1:3000/ /</span></span><br><span class=\"line\">    <span class=\"comment\">// http://127.0.0.1:3000/a /a</span></span><br><span class=\"line\">    <span class=\"comment\">// http://127.0.0.1:3000/foo/b /foo/b</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到客户端的请求了，请求路径是：&#x27;</span> + request.url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// response 对象有一个方法：write 可以用来给客户端发送响应数据</span></span><br><span class=\"line\">    <span class=\"comment\">// write 可以使用多次，但是最后一定要使用 end 来结束响应，否则客户端会一直等待</span></span><br><span class=\"line\">    response.write(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">    response.write(<span class=\"string\">&#x27; nodejs&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 告诉客户端，我的话说完了，你可以呈递给用户了</span></span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p> 上面的方式比较麻烦，推荐使用更简单的方式，直接 end 的同时发送响应数据<br><code>  res.end(&#39;hello nodejs&#39;)</code></p>\n<p>  根据不同的请求路径发送不同的响应结果</p>\n<ol>\n<li>获取请求路径<br>req.url 获取到的是端口号之后的那一部分路径<br>也就是说所有的 url 都是以 / 开头的</li>\n<li>判断路径处理响应</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建 Server</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 监听 request 请求事件，设置请求处理函数</span></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到请求了，请求路径是：&#x27;</span> + req.url)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;请求我的客户端的地址是：&#x27;</span>, req.socket.remoteAddress, req.socket.remotePort)</span><br><span class=\"line\">    <span class=\"comment\">//req.socket.remoteAddress, req.socket.remotePort 别人访问时的IP地址和端口号</span></span><br><span class=\"line\">    <span class=\"comment\">//ip 地址用来定位计算机</span></span><br><span class=\"line\">\t<span class=\"comment\">//端口号用来定位具体的应用程序</span></span><br><span class=\"line\">\t<span class=\"comment\">//所有需要联网通信的应用程序都会占用一个端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = req.url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;index page&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;login page&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/products&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> products = [&#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;苹果&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;香蕉&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">price</span>: <span class=\"number\">20</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;榴莲&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 响应内容只能是二进制数据或者字符串</span></span><br><span class=\"line\">        <span class=\"comment\">//  数字</span></span><br><span class=\"line\">        <span class=\"comment\">//  对象</span></span><br><span class=\"line\">        <span class=\"comment\">//  数组</span></span><br><span class=\"line\">        <span class=\"comment\">//  布尔值</span></span><br><span class=\"line\">        res.end(<span class=\"built_in\">JSON</span>.stringify(products))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;404 Not Found.&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 绑定端口号，启动服务</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功，可以访问了。。。&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们就可以通过访问不同的地址 来响应不同的内容。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTUzNS5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE3NTk1MC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"require-方法有两个作用：\"><a href=\"#require-方法有两个作用：\" class=\"headerlink\" title=\"require 方法有两个作用：\"></a>require 方法有两个作用：</h3><pre><code>1. 加载文件模块并执行里面的代码\n2. 拿到被加载文件模块导出的接口对象\n</code></pre>\n<ul>\n<li>在 Node 中没有全局作用域的概念</li>\n<li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li>\n<li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul>\n<li>模块完全是封闭的</li>\n<li>外部无法访问内部</li>\n<li>内部也无法访问外部</li>\n</ul>\n</li>\n<li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li>\n<li>但是某些情况下，模块与模块是需要进行通信的</li>\n<li>在每个模块中，都提供了一个对象：<code>exports</code></li>\n<li>该对象默认是一个空对象</li>\n<li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li>\n<li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li>\n</ul>\n<p><strong>注意：</strong><br><strong>相对路径必须加 ./<br>可以省略后缀名<br>相对路径中的 ./ 不能省略，否则报错</strong></p>\n<br>\na.js\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bExports = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.foo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.add(<span class=\"number\">10</span>, <span class=\"number\">30</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.age)</span><br><span class=\"line\"></span><br><span class=\"line\">bExports.readFile(<span class=\"string\">&#x27;./a.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>b.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;bbb&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(exports)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.foo = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;文件路径：&#x27;</span>, path)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.age = age</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>运行服务a.js结果：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd3VfemhpZ3VhbmcvYmxvZy9yYXcvbWFzdGVyL2ltZy8yMDIwMDcxMTE4MTQyNi5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><br>会输出<code>hello</code> ，因为b.js中挂载的属性<code>foo</code> 的值是<code>hello</code>。同理 <code>add函数</code>和属性<code>age</code>。</p>\n<h3 id=\"这里关于中文乱码的问题：\"><a href=\"#这里关于中文乱码的问题：\" class=\"headerlink\" title=\"这里关于中文乱码的问题：\"></a>这里关于中文乱码的问题：</h3><p> 在服务端默认发送的数据，其实是 utf8 编码的内容<br>  但是浏览器不知道你是 utf8 编码的内容<br>  浏览器在不知道服务器响应内容的编码的情况下会按照当前操作系统的默认编码去解析<br>  中文操作系统默认是 gbk<br>  解决方法就是正确的告诉浏览器我给你发送的内容是什么编码的<br>  在 http 协议中，Content-Type 就是用来告知对方我给你发送的数据内容是什么类型<br>  <code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;)</code><br><code>  res.end(&#39;hello 世界&#39;)</code></p>\n<p>不同的资源对应的 Content-Type 是不一样，具体照：<a href=\"http://tool.oschina.net/commons\">http://tool.oschina.net/commons</a><br>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</p>\n<p><code>text/plain </code>就是普通文本<br>果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 <code>text/html</code> 格式的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 结合 fs 发送文件中的数据</span></span><br><span class=\"line\"><span class=\"comment\">// 2. Content-Type</span></span><br><span class=\"line\"><span class=\"comment\">//    http://tool.oschina.net/commons</span></span><br><span class=\"line\"><span class=\"comment\">//    不同的资源对应的 Content-Type 是不一样的</span></span><br><span class=\"line\"><span class=\"comment\">//    图片不需要指定编码</span></span><br><span class=\"line\"><span class=\"comment\">//    一般只为字符数据才指定编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&#x27;request&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// / index.html</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = req.url</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 我们要发送的还是在文件中的内容</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./resource/index.html&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;文件读取失败，请稍后重试！&#x27;</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data 默认是二进制数据，可以通过 .toString 转为咱们能识别的字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// res.end() 支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url === <span class=\"string\">&#x27;/xiaoming&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// url：统一资源定位符</span></span><br><span class=\"line\">    <span class=\"comment\">// 一个 url 最终其实是要对应到一个资源的</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./resource/ab2.jpg&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/plain; charset=utf-8&#x27;</span>)</span><br><span class=\"line\">        res.end(<span class=\"string\">&#x27;文件读取失败，请稍后重试！&#x27;</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data 默认是二进制数据，可以通过 .toString 转为咱们能识别的字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// res.end() 支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class=\"line\">        <span class=\"comment\">// 图片就不需要指定编码了，因为我们常说的编码一般指的是：字符编码</span></span><br><span class=\"line\">        res.setHeader(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;image/jpeg&#x27;</span>)</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Server is running...&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单http服务器总结\"><a href=\"#简单http服务器总结\" class=\"headerlink\" title=\"简单http服务器总结\"></a>简单http服务器总结</h3><ul>\n<li>require<ul>\n<li>  1、加载文件模块并执行里面的代码</li>\n<li>2、拿到被加载文件模块导出的接口对象</li>\n</ul>\n</li>\n<li>端口号<ul>\n<li>ip 地址定位计算机</li>\n<li>端口号定位具体的应用程序</li>\n</ul>\n</li>\n<li>Content-Type<ul>\n<li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li>\n<li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href=\"http://tool.oschina.net/commons\">http://tool.oschina.net/commons</a></li>\n<li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li>\n</ul>\n</li>\n<li>通过网络发送文件<ul>\n<li>发送的并不是文件，本质上来讲发送是文件的内容</li>\n<li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、核心模块\"><a href=\"#4、核心模块\" class=\"headerlink\" title=\"4、核心模块\"></a>4、核心模块</h2><ul>\n<li>核心模块是由 Node 提供的一个个的具名的模块，它们都有自己特殊的名称标识，例如<ul>\n<li>fs 文件操作模块</li>\n<li>http 网络服务构建模块</li>\n<li>os 操作系统信息模块</li>\n<li>path 路径处理模块</li>\n<li>。。。。</li>\n</ul>\n</li>\n<li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul>\n<li><code>var fs = require(&#39;fs&#39;)</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n愿你的坚持总有收获\n<br><br>","categories":[{"name":"nodeJs","path":"api/categories/nodeJs.json"}],"tags":[{"name":"nodeJs","path":"api/tags/nodeJs.json"}]}