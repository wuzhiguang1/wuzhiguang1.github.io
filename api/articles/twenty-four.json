{"title":"JavaScript中正则表达式--  (?=a)、先行断言、现行否定断言","slug":"twenty-four","date":"2020-05-10T09:23:34.000Z","updated":"2022-07-29T04:22:04.750Z","comments":true,"path":"api/articles/twenty-four.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/d702ed22f9ac4156b9b1c6c596d1a950.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/d702ed22f9ac4156b9b1c6c596d1a950.jpg\"></p>\n<span id=\"more\"></span>\n\n<p>(?=a) 代表什么意思！</p>\n<blockquote>\n<p>(?=a)非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</p>\n</blockquote>\n<p>还有四个和这个相近的:</p>\n<blockquote>\n<p>(?!a)非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。<br>(?:a)非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。<br>(?&lt;=a)非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。<br>(?&lt;!a)非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。</p>\n</blockquote>\n<p>以上是官方的定义，比较难懂，我用自己的理解翻译了一下：</p>\n<blockquote>\n<p>(?=a) 表示我们需要匹配某样东西的前面。<br>(?!a) 表示我们需要不匹配某样东西。<br>(?:a) 表示我们需要匹配某样东西本身。<br>(?&lt;=a) 表示我们需要匹配某样东西的后面。<br>(?&lt;!a) 表示我们需要不匹配某样东西，与(?!a)方向相反。</p>\n</blockquote>\n<p>我的翻译可能还是不太容易理解，我们用代码来解释一下！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/我是(?=中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出： &#x27;rr中国人&#x27;，匹配的是中国前面的&#x27;我是&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?!中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;rr我是中国人&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?:中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;我是rr人&#x27;，匹配&#x27;中国&#x27;本身</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?&lt;=中国)人/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;我是中国rr&#x27;，匹配的是中国后面的&#x27;人&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?&lt;!中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;rr我是中国人&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Tips：(?!a)和(?&lt;!a)都是输出的 ‘rr我是中国人’，我的理解是，replace替换的时候匹配得是不包含中国的字符串，但是这个字符串又没有，那么js自动给加前面去了。</p>\n<hr>\n<h2 id=\"先行断言\"><a href=\"#先行断言\" class=\"headerlink\" title=\"先行断言\"></a>先行断言</h2><p>x(?=y)称为先行断言（Positive look-ahead），x只有在y前面才匹配，y不会被计入返回结果。比如，要匹配后面跟着百分号的数字，可以写成/\\d+(?=%)/。</p>\n<p>“先行断言”中，括号里的部分是不会返回的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"string\">&#x27;abc&#x27;</span>.match(<span class=\"regexp\">/b(?=c)/</span>);</span><br><span class=\"line\">m <span class=\"comment\">// [&quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码使用了先行断言，b在c前面所以被匹配，但是括号对应的c不会被返回。</p>\n<h2 id=\"先行否定断言\"><a href=\"#先行否定断言\" class=\"headerlink\" title=\"先行否定断言\"></a>先行否定断言</h2><p>x(?!y)称为先行否定断言（Negative look-ahead），x只有不在y前面才匹配，y不会被计入返回结果。比如，要匹配后面跟的不是百分号的数字，就要写成/\\d+(?!%)/。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d+(?!\\.)/.exec(<span class=\"string\">&#x27;3.14&#x27;</span>) <span class=\"comment\">// [&quot;14&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;14&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，正则表达式指定，只有不在小数点前面的数字才会被匹配，因此返回的结果就是14。</p>\n<p>“先行否定断言”中，括号里的部分是不会返回的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"string\">&#x27;abd&#x27;</span>.match(<span class=\"regexp\">/b(?!c)/</span>);</span><br><span class=\"line\">m <span class=\"comment\">// [&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码使用了先行否定断言，b不在c前面所以被匹配，而且括号对应的d不会被返回。</p>\n<p>参考链接<a href=\"https://wangdoc.com/javascript/stdlib/regexp.html\">JavaScript教程</a></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n","more":"<p>(?=a) 代表什么意思！</p>\n<blockquote>\n<p>(?=a)非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</p>\n</blockquote>\n<p>还有四个和这个相近的:</p>\n<blockquote>\n<p>(?!a)非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。<br>(?:a)非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。<br>(?&lt;=a)非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。<br>(?&lt;!a)非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。</p>\n</blockquote>\n<p>以上是官方的定义，比较难懂，我用自己的理解翻译了一下：</p>\n<blockquote>\n<p>(?=a) 表示我们需要匹配某样东西的前面。<br>(?!a) 表示我们需要不匹配某样东西。<br>(?:a) 表示我们需要匹配某样东西本身。<br>(?&lt;=a) 表示我们需要匹配某样东西的后面。<br>(?&lt;!a) 表示我们需要不匹配某样东西，与(?!a)方向相反。</p>\n</blockquote>\n<p>我的翻译可能还是不太容易理解，我们用代码来解释一下！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/我是(?=中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出： &#x27;rr中国人&#x27;，匹配的是中国前面的&#x27;我是&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?!中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;rr我是中国人&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?:中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;我是rr人&#x27;，匹配&#x27;中国&#x27;本身</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?&lt;=中国)人/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;我是中国rr&#x27;，匹配的是中国后面的&#x27;人&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是中国人&quot;</span>.replace(<span class=\"regexp\">/(?&lt;!中国)/</span>, <span class=\"string\">&quot;rr&quot;</span>)) <span class=\"comment\">// 输出：&#x27;rr我是中国人&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Tips：(?!a)和(?&lt;!a)都是输出的 ‘rr我是中国人’，我的理解是，replace替换的时候匹配得是不包含中国的字符串，但是这个字符串又没有，那么js自动给加前面去了。</p>\n<hr>\n<h2 id=\"先行断言\"><a href=\"#先行断言\" class=\"headerlink\" title=\"先行断言\"></a>先行断言</h2><p>x(?=y)称为先行断言（Positive look-ahead），x只有在y前面才匹配，y不会被计入返回结果。比如，要匹配后面跟着百分号的数字，可以写成/\\d+(?=%)/。</p>\n<p>“先行断言”中，括号里的部分是不会返回的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"string\">&#x27;abc&#x27;</span>.match(<span class=\"regexp\">/b(?=c)/</span>);</span><br><span class=\"line\">m <span class=\"comment\">// [&quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码使用了先行断言，b在c前面所以被匹配，但是括号对应的c不会被返回。</p>\n<h2 id=\"先行否定断言\"><a href=\"#先行否定断言\" class=\"headerlink\" title=\"先行否定断言\"></a>先行否定断言</h2><p>x(?!y)称为先行否定断言（Negative look-ahead），x只有不在y前面才匹配，y不会被计入返回结果。比如，要匹配后面跟的不是百分号的数字，就要写成/\\d+(?!%)/。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d+(?!\\.)/.exec(<span class=\"string\">&#x27;3.14&#x27;</span>) <span class=\"comment\">// [&quot;14&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;14&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，正则表达式指定，只有不在小数点前面的数字才会被匹配，因此返回的结果就是14。</p>\n<p>“先行否定断言”中，括号里的部分是不会返回的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"string\">&#x27;abd&#x27;</span>.match(<span class=\"regexp\">/b(?!c)/</span>);</span><br><span class=\"line\">m <span class=\"comment\">// [&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码使用了先行否定断言，b不在c前面所以被匹配，而且括号对应的d不会被返回。</p>\n<p>参考链接<a href=\"https://wangdoc.com/javascript/stdlib/regexp.html\">JavaScript教程</a></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"正则表达式","path":"api/categories/正则表达式.json"}],"tags":[{"name":"正则表达式","path":"api/tags/正则表达式.json"}]}