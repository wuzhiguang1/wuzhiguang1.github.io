{"title":"JavaScript 性能优化之惰性加载函数","slug":"34","date":"2020-06-03T09:21:53.000Z","updated":"2022-07-29T04:22:04.783Z","comments":true,"path":"api/articles/34.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/f9878666c86e49efa8e6.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/f9878666c86e49efa8e6.jpg\"></p>\n<span id=\"more\"></span>\n\n<p>在实际开发中，我们编写的大多数JavaScript代码包含大量的 if…else语句或者 try… catch 语句来做功能检测。<br>举一个简单的例子：事件的绑定，我们会首先想到下列的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addHandler= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">                  element.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">                  element.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  element[<span class=\"string\">&quot;on&quot;</span> + type] = handler;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<p>分析以上代码，为了兼容不同浏览器，每次执行 <strong>addHandler</strong> 时我们会去做功能检测，逐一去走 <strong>addHandler</strong> 中的if，获取到可以兼容的代码块。无可厚非，我们通过这两三个判断保证了每次都能使用到兼容浏览器的代码，注意到，我用了“每次”这个词。是的，以上代码每次调用 <strong>addHandler</strong> 都要做功能检测，而我们知道，当我们用某个浏览器打开网页时，其实就已经确定了哪个if/try可用了，完全没必要每次调用都检测。因此，我们引入了惰性加载函数的概念。</p>\n<p><span style=\"color:red\"><strong>惰性加载表示函数执行的分支仅会发生一次。有两种实现惰性加载的方式：在函数被调用时再处理函数；在声明函数时就指定适当函数。</strong></span></p>\n<p>我们来优化一下addHandler 函数：</p>\n<p>1、在函数被调用时再处理函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addHandler= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">                  addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">                      element.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">                  addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">                      element.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">                      element[<span class=\"string\">&quot;on&quot;</span> + type] = handler;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> addHandler(element, type, handler);</span><br><span class=\"line\">          &#125;,</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">if语句中的每一个分支都会给addHandler 变量赋值，有效覆盖了原有的函数，最后一步就是调用新赋的函数。下一次就会直接调用新赋的函数。</span></p>\n<br>\n\n<p>2、在声明函数时就指定适当的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent2 = (<span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            element.addEventListener(type, fun, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">&#x27;on&#x27;</span> + type, fun);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&#x27;on&#x27;</span> + type] = fun;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>我们发现第二种方法在此例中并不适用，因为它是一个立即执行函数，带参显然并不合适（各种undefined），那么我们可以用 JavaScript高级程序设计 中的一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> createXHR = ( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest != <span class=\"string\">&#x27;undefined&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ActiveXobject != <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p><strong>可以总结到，所谓在声明函数时就指定适当函数，即声明函数为匿名、立即执行函数，根据功能检测（if/try判断）结果指定函数体，当然，既然是一个立即执行函数，我们得注意使用场合。</strong></p>\n<p><strong>以上两种方式都只在第一次执行函数时做了性能检测，省去了后续调用时多余的操作，优化了性能。</strong><br><br><br><br><br>愿你的坚持终有收获。<br><br><br><br></p>\n","more":"<p>在实际开发中，我们编写的大多数JavaScript代码包含大量的 if…else语句或者 try… catch 语句来做功能检测。<br>举一个简单的例子：事件的绑定，我们会首先想到下列的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addHandler= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">                  element.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">                  element.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  element[<span class=\"string\">&quot;on&quot;</span> + type] = handler;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<p>分析以上代码，为了兼容不同浏览器，每次执行 <strong>addHandler</strong> 时我们会去做功能检测，逐一去走 <strong>addHandler</strong> 中的if，获取到可以兼容的代码块。无可厚非，我们通过这两三个判断保证了每次都能使用到兼容浏览器的代码，注意到，我用了“每次”这个词。是的，以上代码每次调用 <strong>addHandler</strong> 都要做功能检测，而我们知道，当我们用某个浏览器打开网页时，其实就已经确定了哪个if/try可用了，完全没必要每次调用都检测。因此，我们引入了惰性加载函数的概念。</p>\n<p><span style=\"color:red\"><strong>惰性加载表示函数执行的分支仅会发生一次。有两种实现惰性加载的方式：在函数被调用时再处理函数；在声明函数时就指定适当函数。</strong></span></p>\n<p>我们来优化一下addHandler 函数：</p>\n<p>1、在函数被调用时再处理函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> addHandler= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">                  addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">                      element.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">                  addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">                      element.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  addHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">                      element[<span class=\"string\">&quot;on&quot;</span> + type] = handler;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> addHandler(element, type, handler);</span><br><span class=\"line\">          &#125;,</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">if语句中的每一个分支都会给addHandler 变量赋值，有效覆盖了原有的函数，最后一步就是调用新赋的函数。下一次就会直接调用新赋的函数。</span></p>\n<br>\n\n<p>2、在声明函数时就指定适当的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent2 = (<span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.addEventListener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            element.addEventListener(type, fun, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">&#x27;on&#x27;</span> + type, fun);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">type, element, fun</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&#x27;on&#x27;</span> + type] = fun;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>我们发现第二种方法在此例中并不适用，因为它是一个立即执行函数，带参显然并不合适（各种undefined），那么我们可以用 JavaScript高级程序设计 中的一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> createXHR = ( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest != <span class=\"string\">&#x27;undefined&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ActiveXobject != <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p><strong>可以总结到，所谓在声明函数时就指定适当函数，即声明函数为匿名、立即执行函数，根据功能检测（if/try判断）结果指定函数体，当然，既然是一个立即执行函数，我们得注意使用场合。</strong></p>\n<p><strong>以上两种方式都只在第一次执行函数时做了性能检测，省去了后续调用时多余的操作，优化了性能。</strong><br><br><br><br><br>愿你的坚持终有收获。<br><br><br><br></p>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"性能优化","path":"api/tags/性能优化.json"}]}