{"title":"JavaScript  ---  DOM简介 和  DOM Node节点的增删改查","slug":"21","date":"2020-05-22T06:39:42.000Z","updated":"2022-07-29T04:22:04.783Z","comments":true,"path":"api/articles/21.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/3714a171b95a4f2b9148de6aa84ffef4.jpg","https://img-blog.csdnimg.cn/20200522094310145.gif","https://img-blog.csdnimg.cn/20200522141013494.png","https://img-blog.csdnimg.cn/20200522143355678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70"],"content":"<p><img src=\"https://qny.aqingya.cn/img/3714a171b95a4f2b9148de6aa84ffef4.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"DOM简介：\"><a href=\"#DOM简介：\" class=\"headerlink\" title=\"DOM简介：\"></a>DOM简介：</h2><p><strong>通过 HTML DOM，JavaScript 能够访问和改变 HTML 文档的所有元素。</strong></p>\n<hr>\n<p><strong>HTML DOM（文档对象模型）</strong><br>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p>\n<p><strong>HTML DOM</strong> 模型被结构化为<strong>对象树</strong>：</p>\n<p><strong>对象的 HTML DOM 树</strong><br><img src=\"https://img-blog.csdnimg.cn/20200522094310145.gif\" alt=\"在这里插入图片描述\"></p>\n<p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p>\n<ul>\n<li>JavaScript 能改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能删除已有的 HTML 元素和属性</li>\n<li>JavaScript 能添加新的 HTML 元素和属性</li>\n<li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li>\n<li>JavaScript 能在页面中创建新的 HTML 事件</li>\n</ul>\n<hr>\n<p><strong>什么是 DOM？</strong><br>DOM 是一项 W3C (World Wide Web Consortium) 标准。</p>\n<p>DOM 定义了访问文档的标准：</p>\n<p>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”<br>W3C DOM 标准被分为 3 个不同的部分：</p>\n<ul>\n<li>Core DOM - 所有文档类型的标准模型</li>\n<li>XML DOM - XML 文档的标准模型</li>\n<li>HTML DOM - HTML 文档的标准模型</li>\n</ul>\n<hr>\n<p><strong>什么是 HTML DOM？</strong><br>HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：</p>\n<p>作为对象的 HTML 元素</p>\n<ul>\n<li>所有 HTML 元素的属性</li>\n<li>访问所有 HTML 元素的方法</li>\n<li>所有 HTML 元素的事件</li>\n</ul>\n<p><span style=\"color: red;\">换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。</span></p>\n<hr>\n<p>HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。<br>Document对象是我们可以从脚本中对HTML页面中的所有元素进行访问</p>\n<p>节点：Node——构成HTML文档最基本的单元。<br>常用节点分为4类：</p>\n<ul>\n<li>文档节点：整个HTML文档</li>\n<li>元素节点：HTML文档中的HTML标签</li>\n<li>属性节点：元素的属性</li>\n<li>文本节点：HTML标签中的文本内容</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200522141013494.png\" alt=\"在这里插入图片描述\"><br>文档的加载：<br>&emsp;&emsp;&emsp;&emsp;浏览器在加载一个页面的时候，是按照自上向下的顺序加载的<br>&emsp;&emsp;&emsp;&emsp;读取到一行就运行一行，如果将script标签写到页面的上边，<br>&emsp;&emsp;&emsp;&emsp;在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载<br>&emsp;&emsp;&emsp;&emsp;会导致无法获取到DOM对象</p>\n<p>Onload事件在整个 页面加载完成之后才触发<br>&emsp;&emsp;&emsp;&emsp;为window绑定一个onload事件<br>&emsp;&emsp;&emsp;&emsp;该事件对应的响应函数，将会在页面加载完成之后执行，<br>&emsp;&emsp;&emsp;&emsp;这样可以确保我们的代码执行时所有的DOM对象已经加载完成。</p>\n<hr>\n<p> <strong>获取元素节点</strong></p>\n<p>通过document对象调用</p>\n<p>1.getElementById()<br>&emsp;&emsp;通过id属性来获取一个元素节点的对象</p>\n<p>2.getElementsByTagName()<br>&emsp;&emsp;可以根据标签名来获取一组元素节点对象<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<p>3.getElementsByName()<br>&emsp;&emsp;通过name属性来获取一组元素节点对象。<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<p><strong>InnerHTML 通过这个属性可以获取到元素内部的html代码<br>&emsp;&emsp;Bj.innerHTML<br>&emsp;&emsp;对于自结束标签没有意义，会返回为空。<br>&emsp;&emsp;如果需要读取元素节点属性，<br>&emsp;&emsp;直接使用 元素.属性名<br>&emsp;&emsp;例子： 元素.id   元素.name  元素.value<br>&emsp;&emsp;<span style=\"color: red;\">注意：class属性不能采用这种方式，（主要用于表单中）<br>&emsp;&emsp;读取class属性需要使用 元素. className</span><br>innerText<br>&emsp;&emsp;该属性可以获取元素内部中的文本内容。<br>&emsp;&emsp;他和innerHTML类似，不同的是他会自动将html标签去除。</strong></p>\n<hr>\n<p><strong>获取元素节点的子节点</strong><br>通过具体的元素节点调用<br>1.getElementByTagName()<br>&emsp;&emsp;是一个方法，方法返回当前的指定标签名后代节点</p>\n<p>2.childNodes<br>&emsp;&emsp;是一个属性 表示当前节点的所有子节点<br>&emsp;&emsp;childNodes属性会获取包括文本节点在内的所有节点<br>&emsp;&emsp;<strong>根据DOM标签与标签间的空白也会当成文本节点</strong><br><span style=\"color: red;\">注意：IE8及以下的浏览器中不会将空白文本当成子节点，<br>children属性可以获取当前元素的所有子元素。标签与标签间的空白不会当成文本节点。</span></p>\n<p>3.firstChild<br>&emsp;&emsp; 属性，表示当前节点的第一个子节点。<br>&emsp;&emsp;可以获取当前元素的第一个子节点（<strong>包含空白文本节点和注释</strong>）。</p>\n<p>&emsp;&emsp;<strong><span style=\"color: red;\">firstElementChild:指向第一个元素；（不包括文本节点和注释）</span></strong></p>\n<p>4.lastChile<br>&emsp;&emsp; 属性，表示当前节点的最后一个子节点<br>&emsp;&emsp;可以获取当前元素的最后一个子节点（<strong>包含空白文本节点和注释</strong>）。</p>\n<p>&emsp;&emsp;<strong><span style=\"color: red;\">lastElementChild:指向最后一个子元素；（不包括文本节点和注释）</span></strong></p>\n<br>\n\n<p>遍历元素<br>&emsp;&emsp;<strong><span style=\"color: red;\">childElementCount:返回子元素的个数（不包括文本节点和注释）</span></strong></p>\n<hr>\n<p><strong>获取父节点和兄弟节点</strong></p>\n<p>通过具体的节点调用<br>1.parentNode<br>&emsp;&emsp; 属性，表示当前节点的父节点</p>\n<p>2.previousSibling<br>&emsp;&emsp; 属性，表示当前节点的前一个兄弟节点</p>\n<p>&emsp;&emsp;<span style=\"color: red;\">previousSibling 属性返回元素节点之前的兄弟节点（包括文本节点、注释节点）；</span><br>&emsp;&emsp;<span style=\"color: red;\">previousElementSibling 属性只返回元素节点之前的兄弟元素节点（不包括文本节点、注释节点）；</span></p>\n<p>3.nextSibling<br>&emsp;&emsp; 属性，表示当前节点的后一个兄弟节点</p>\n<p>&emsp;&emsp;<span style=\"color: red;\">nextSibling 属性返回元素节点之后的兄弟节点（包括文本节点、注释节点）；</span><br>&emsp;&emsp;<span style=\"color: red;\">nextElementSibling 属性只返回元素节点之后的兄弟元素节点（不包括文本节点、注释节点）。</span></p>\n<hr>\n<p>1、在document中有一个属性body，它保存的是body的引用<br>&emsp;&emsp;Var body = document.body;</p>\n<p>2、Doucument.doucumentElement保存的是html根标签<br>&emsp;&emsp;Var html = document.documentElenmet;</p>\n<p>3、Document.all 代表页面中的所有元素<br>&emsp;&emsp;var all = document.all;<br>&emsp;&emsp;（var all = document.getElementsByTagName(“*”)）效果一样。<br>&emsp;&emsp;它返回一个数组</p>\n<p>4、根据元素的class属性查询一组元素节点对象<br>&emsp;&emsp;GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>&emsp;&emsp;但是该方法 不支持IE8及以下浏览器。</p>\n<p>5、documen.querySelector()<br>&emsp;&emsp; 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>&emsp;&emsp; 虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>&emsp;&emsp; 使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p>\n<p>6、documen.querySelectorAll()<br>&emsp;&emsp;该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>&emsp;&emsp;即使符合条件的元素只有一个，他也会返回数组。</p>\n<hr>\n<p><strong>DOM增删改查：</strong></p>\n<p>1.Document.createElement()<br>&emsp;&emsp;可以用于创建一个元素节点对象，<br>&emsp;&emsp;它需要一个标签名作为参数，将会根据标签名创建元素节点对象<br>&emsp;&emsp;并将创建好的对象作为返回值返回。<br>&emsp;&emsp;它可以个innerHTML结合使用。<br><img src=\"https://img-blog.csdnimg.cn/20200522143355678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>2.document.createTextNode()<br>&emsp;&emsp;可以用来创建一个文本节点对象<br>&emsp;&emsp;需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回。</p>\n<p>3.appendChild()<br>&emsp;&emsp;向一个父节点中添加一个新的子节点<br>&emsp;&emsp;用法：父节点.appendChild(子节点)；</p>\n<p>4.insertBefore()<br>&emsp;&emsp;可以在指定的子节点前插入新的子节点<br>&emsp;&emsp;语法：<br>&emsp;&emsp;父节点.insertBefore(新节点，旧节点);</p>\n<p>5.replaceChild()<br>&emsp;&emsp;可以使用指定的子节点替换已有的子节点<br>&emsp;&emsp;语法：<br>&emsp;&emsp;父节点.replaceChile(新节点，旧节点)</p>\n<p>6.removeChild()<br>&emsp;&emsp;可以删除一个子节点<br>&emsp;&emsp;语法：父节点.removeChild(子节点)；<br>&emsp;&emsp;但是：<br>&emsp;&emsp;<span style=\"color: red;\">常用：子节点.parentNode.removeChild(子节点)</span></p>\n<hr>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n","more":"<h2 id=\"DOM简介：\"><a href=\"#DOM简介：\" class=\"headerlink\" title=\"DOM简介：\"></a>DOM简介：</h2><p><strong>通过 HTML DOM，JavaScript 能够访问和改变 HTML 文档的所有元素。</strong></p>\n<hr>\n<p><strong>HTML DOM（文档对象模型）</strong><br>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p>\n<p><strong>HTML DOM</strong> 模型被结构化为<strong>对象树</strong>：</p>\n<p><strong>对象的 HTML DOM 树</strong><br><img src=\"https://img-blog.csdnimg.cn/20200522094310145.gif\" alt=\"在这里插入图片描述\"></p>\n<p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p>\n<ul>\n<li>JavaScript 能改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能删除已有的 HTML 元素和属性</li>\n<li>JavaScript 能添加新的 HTML 元素和属性</li>\n<li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li>\n<li>JavaScript 能在页面中创建新的 HTML 事件</li>\n</ul>\n<hr>\n<p><strong>什么是 DOM？</strong><br>DOM 是一项 W3C (World Wide Web Consortium) 标准。</p>\n<p>DOM 定义了访问文档的标准：</p>\n<p>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”<br>W3C DOM 标准被分为 3 个不同的部分：</p>\n<ul>\n<li>Core DOM - 所有文档类型的标准模型</li>\n<li>XML DOM - XML 文档的标准模型</li>\n<li>HTML DOM - HTML 文档的标准模型</li>\n</ul>\n<hr>\n<p><strong>什么是 HTML DOM？</strong><br>HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：</p>\n<p>作为对象的 HTML 元素</p>\n<ul>\n<li>所有 HTML 元素的属性</li>\n<li>访问所有 HTML 元素的方法</li>\n<li>所有 HTML 元素的事件</li>\n</ul>\n<p><span style=\"color: red;\">换言之：HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。</span></p>\n<hr>\n<p>HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。<br>Document对象是我们可以从脚本中对HTML页面中的所有元素进行访问</p>\n<p>节点：Node——构成HTML文档最基本的单元。<br>常用节点分为4类：</p>\n<ul>\n<li>文档节点：整个HTML文档</li>\n<li>元素节点：HTML文档中的HTML标签</li>\n<li>属性节点：元素的属性</li>\n<li>文本节点：HTML标签中的文本内容</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200522141013494.png\" alt=\"在这里插入图片描述\"><br>文档的加载：<br>&emsp;&emsp;&emsp;&emsp;浏览器在加载一个页面的时候，是按照自上向下的顺序加载的<br>&emsp;&emsp;&emsp;&emsp;读取到一行就运行一行，如果将script标签写到页面的上边，<br>&emsp;&emsp;&emsp;&emsp;在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载<br>&emsp;&emsp;&emsp;&emsp;会导致无法获取到DOM对象</p>\n<p>Onload事件在整个 页面加载完成之后才触发<br>&emsp;&emsp;&emsp;&emsp;为window绑定一个onload事件<br>&emsp;&emsp;&emsp;&emsp;该事件对应的响应函数，将会在页面加载完成之后执行，<br>&emsp;&emsp;&emsp;&emsp;这样可以确保我们的代码执行时所有的DOM对象已经加载完成。</p>\n<hr>\n<p> <strong>获取元素节点</strong></p>\n<p>通过document对象调用</p>\n<p>1.getElementById()<br>&emsp;&emsp;通过id属性来获取一个元素节点的对象</p>\n<p>2.getElementsByTagName()<br>&emsp;&emsp;可以根据标签名来获取一组元素节点对象<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<p>3.getElementsByName()<br>&emsp;&emsp;通过name属性来获取一组元素节点对象。<br>&emsp;&emsp;这个方法会给我们返回一个类数组对象，所有查询到的元素都会在封装到对象。<br>&emsp;&emsp;即使查询到的元素只有一个，也会封装到数组中返回。</p>\n<p><strong>InnerHTML 通过这个属性可以获取到元素内部的html代码<br>&emsp;&emsp;Bj.innerHTML<br>&emsp;&emsp;对于自结束标签没有意义，会返回为空。<br>&emsp;&emsp;如果需要读取元素节点属性，<br>&emsp;&emsp;直接使用 元素.属性名<br>&emsp;&emsp;例子： 元素.id   元素.name  元素.value<br>&emsp;&emsp;<span style=\"color: red;\">注意：class属性不能采用这种方式，（主要用于表单中）<br>&emsp;&emsp;读取class属性需要使用 元素. className</span><br>innerText<br>&emsp;&emsp;该属性可以获取元素内部中的文本内容。<br>&emsp;&emsp;他和innerHTML类似，不同的是他会自动将html标签去除。</strong></p>\n<hr>\n<p><strong>获取元素节点的子节点</strong><br>通过具体的元素节点调用<br>1.getElementByTagName()<br>&emsp;&emsp;是一个方法，方法返回当前的指定标签名后代节点</p>\n<p>2.childNodes<br>&emsp;&emsp;是一个属性 表示当前节点的所有子节点<br>&emsp;&emsp;childNodes属性会获取包括文本节点在内的所有节点<br>&emsp;&emsp;<strong>根据DOM标签与标签间的空白也会当成文本节点</strong><br><span style=\"color: red;\">注意：IE8及以下的浏览器中不会将空白文本当成子节点，<br>children属性可以获取当前元素的所有子元素。标签与标签间的空白不会当成文本节点。</span></p>\n<p>3.firstChild<br>&emsp;&emsp; 属性，表示当前节点的第一个子节点。<br>&emsp;&emsp;可以获取当前元素的第一个子节点（<strong>包含空白文本节点和注释</strong>）。</p>\n<p>&emsp;&emsp;<strong><span style=\"color: red;\">firstElementChild:指向第一个元素；（不包括文本节点和注释）</span></strong></p>\n<p>4.lastChile<br>&emsp;&emsp; 属性，表示当前节点的最后一个子节点<br>&emsp;&emsp;可以获取当前元素的最后一个子节点（<strong>包含空白文本节点和注释</strong>）。</p>\n<p>&emsp;&emsp;<strong><span style=\"color: red;\">lastElementChild:指向最后一个子元素；（不包括文本节点和注释）</span></strong></p>\n<br>\n\n<p>遍历元素<br>&emsp;&emsp;<strong><span style=\"color: red;\">childElementCount:返回子元素的个数（不包括文本节点和注释）</span></strong></p>\n<hr>\n<p><strong>获取父节点和兄弟节点</strong></p>\n<p>通过具体的节点调用<br>1.parentNode<br>&emsp;&emsp; 属性，表示当前节点的父节点</p>\n<p>2.previousSibling<br>&emsp;&emsp; 属性，表示当前节点的前一个兄弟节点</p>\n<p>&emsp;&emsp;<span style=\"color: red;\">previousSibling 属性返回元素节点之前的兄弟节点（包括文本节点、注释节点）；</span><br>&emsp;&emsp;<span style=\"color: red;\">previousElementSibling 属性只返回元素节点之前的兄弟元素节点（不包括文本节点、注释节点）；</span></p>\n<p>3.nextSibling<br>&emsp;&emsp; 属性，表示当前节点的后一个兄弟节点</p>\n<p>&emsp;&emsp;<span style=\"color: red;\">nextSibling 属性返回元素节点之后的兄弟节点（包括文本节点、注释节点）；</span><br>&emsp;&emsp;<span style=\"color: red;\">nextElementSibling 属性只返回元素节点之后的兄弟元素节点（不包括文本节点、注释节点）。</span></p>\n<hr>\n<p>1、在document中有一个属性body，它保存的是body的引用<br>&emsp;&emsp;Var body = document.body;</p>\n<p>2、Doucument.doucumentElement保存的是html根标签<br>&emsp;&emsp;Var html = document.documentElenmet;</p>\n<p>3、Document.all 代表页面中的所有元素<br>&emsp;&emsp;var all = document.all;<br>&emsp;&emsp;（var all = document.getElementsByTagName(“*”)）效果一样。<br>&emsp;&emsp;它返回一个数组</p>\n<p>4、根据元素的class属性查询一组元素节点对象<br>&emsp;&emsp;GetElementsByClassNmae() 可以根据class属性值获取一组元素节点对象（类数组）<br>&emsp;&emsp;但是该方法 不支持IE8及以下浏览器。</p>\n<p>5、documen.querySelector()<br>&emsp;&emsp; 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象<br>&emsp;&emsp; 虽然IE8中没有getElementByTagName() 但是可以使用querySelector，他可以支持IE8.<br>&emsp;&emsp; 使用该方法总会返回<strong>一个唯一的一个元素</strong>，如果满足条件的元素有多个，那么它会返回第一个。</p>\n<p>6、documen.querySelectorAll()<br>&emsp;&emsp;该方法和querySelector()用法类似，不同的是他会将符合条件的元素<strong>封装到一个数组中</strong>。<br>&emsp;&emsp;即使符合条件的元素只有一个，他也会返回数组。</p>\n<hr>\n<p><strong>DOM增删改查：</strong></p>\n<p>1.Document.createElement()<br>&emsp;&emsp;可以用于创建一个元素节点对象，<br>&emsp;&emsp;它需要一个标签名作为参数，将会根据标签名创建元素节点对象<br>&emsp;&emsp;并将创建好的对象作为返回值返回。<br>&emsp;&emsp;它可以个innerHTML结合使用。<br><img src=\"https://img-blog.csdnimg.cn/20200522143355678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>2.document.createTextNode()<br>&emsp;&emsp;可以用来创建一个文本节点对象<br>&emsp;&emsp;需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回。</p>\n<p>3.appendChild()<br>&emsp;&emsp;向一个父节点中添加一个新的子节点<br>&emsp;&emsp;用法：父节点.appendChild(子节点)；</p>\n<p>4.insertBefore()<br>&emsp;&emsp;可以在指定的子节点前插入新的子节点<br>&emsp;&emsp;语法：<br>&emsp;&emsp;父节点.insertBefore(新节点，旧节点);</p>\n<p>5.replaceChild()<br>&emsp;&emsp;可以使用指定的子节点替换已有的子节点<br>&emsp;&emsp;语法：<br>&emsp;&emsp;父节点.replaceChile(新节点，旧节点)</p>\n<p>6.removeChild()<br>&emsp;&emsp;可以删除一个子节点<br>&emsp;&emsp;语法：父节点.removeChild(子节点)；<br>&emsp;&emsp;但是：<br>&emsp;&emsp;<span style=\"color: red;\">常用：子节点.parentNode.removeChild(子节点)</span></p>\n<hr>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"DOM","path":"api/categories/DOM.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"DOM","path":"api/tags/DOM.json"}]}