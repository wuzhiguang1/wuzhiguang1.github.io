{"title":"JavaScript中的原型和原型链（图解）","slug":"twenty-six","date":"2020-05-15T07:52:16.000Z","updated":"2022-07-29T04:22:04.750Z","comments":true,"path":"api/articles/twenty-six.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/9e59b1cfbfef402e9f1e7b01fbe72497.jpg","https://img-blog.csdnimg.cn/20200515132717836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515152136840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515153434949.png","https://img-blog.csdnimg.cn/20200515154607459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515154638561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515154725474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515154808226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/2020051515495623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515145330972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200515150503562.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/9e59b1cfbfef402e9f1e7b01fbe72497.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"JS中的原型和原型链\"><a href=\"#JS中的原型和原型链\" class=\"headerlink\" title=\"JS中的原型和原型链\"></a>JS中的原型和原型链</h2><p>讲原型的时候，我们应该先要记住以下几个要点，这几个要点是理解原型的关键：</p>\n<p>1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）。</p>\n<p>2、所有的引用类型都有一个’_ _ proto_ _’属性(也叫隐式原型，它是一个普通的对象)。</p>\n<p>3、所有的函数都有一个’prototype’属性(这也叫显式原型，它也是一个普通的对象)。</p>\n<p>4、所有引用类型，它的’_ _ proto_ _’属性指向它的构造函数的’prototype’属性。</p>\n<p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _’属性(也就是它的构造函数的’prototype’属性)中去寻找。</p>\n<hr>\n<p>那么要点说完了，我们就根据这些要点来理解原型和原型链。</p>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>我们先来看一个原型的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是一个构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*根据要点3，所有的函数都有一个prototype属性，这个属性是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">再根据要点1，所有的对象可以自由扩展属性</span></span><br><span class=\"line\"><span class=\"comment\">于是就有了以下写法*/</span></span><br><span class=\"line\">Foo.prototype=&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// prototype对象里面又有其他的属性</span></span><br><span class=\"line\">\t<span class=\"attr\">showName</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.name);<span class=\"comment\">//this是什么要看执行的时候谁调用了这个函数</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">showAge</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;And I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.age);<span class=\"comment\">//this是什么要看执行的时候谁调用了这个函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn=<span class=\"keyword\">new</span> Foo(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\"><span class=\"comment\">/*当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它</span></span><br><span class=\"line\"><span class=\"comment\">构造函数的&#x27;prototype&#x27;属性中去找*/</span></span><br><span class=\"line\">fn.showName(); <span class=\"comment\">//I&#x27;m 小明</span></span><br><span class=\"line\">fn.showAge(); <span class=\"comment\">//And I&#x27;m 19</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>这就是原型，很好理解。那为什么要使用原型呢？</p>\n<p>试想如果我们要通过Foo()来创建很多很多个对象，如果我们是这样子写的话：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.age=age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.showAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;And I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么我们创建出来的每一个对象，里面都有showName和showAge方法，这样就会占用很多的资源。<br>而通过原型来实现的话，只需要在构造函数里面给属性赋值，而把方法写在Foo.prototype属性(这个属性是唯一的)里面。这样每个对象都可以使用prototype属性里面的showName、showAge方法，并且节省了不少的资源。</p>\n<hr>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>理解了原型，那么原型链就更好理解了。</p>\n<p><strong>下面这段话可以帮助理解原型链</strong></p>\n<p>根据要点5，当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它构造函数的’prototype’属性中去寻找。那又因为’prototype’属性是一个对象，所以它也有一个’_ _ proto_ _’属性。</p>\n<p>那么我们来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//this是什么要看执行的时候谁调用了这个函数。</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.name+<span class=\"string\">&quot; And I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn=<span class=\"keyword\">new</span> Foo(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"number\">19</span>);</span><br><span class=\"line\">fn.toString(); <span class=\"comment\">//I&#x27;m 小明 And I&#x27;m 19</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.toString===Foo.prototype.__proto__.toString); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.__proto__ ===Foo.prototype)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo.prototype.__proto__===<span class=\"built_in\">Object</span>.prototype)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.__proto__===<span class=\"literal\">null</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>是不是觉得有点奇怪？我们来分析一下。<br><img src=\"https://img-blog.csdnimg.cn/20200515132717836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">首先，fn的构造函数是Foo()。所以：<br><strong>fn._ _ proto _ _=== Foo.prototype</strong><br>又因为Foo.prototype是一个普通的对象，它的构造函数是Object，所以：<br><strong>Foo.prototype._ _ proto _ _=== Object.prototype</strong><br>通过上面的代码，我们知道这个toString()方法是在Object.prototype里面的，当调用这个对象的本身并不存在的方法时，它会一层一层地往上去找，一直到null为止。</p>\n<br>\n<br>\n所以当fn调用toString()时，JS发现fn中没有这个方法，于是它就去Foo.prototype中去找，发现还是没有这个方法，然后就去Object.prototype中去找，找到了，就调用Object.prototype中的toString()方法。\n\n<br>\n\n<p>这就是原型链，fn能够调用Object.prototype中的方法正是因为存在原型链的机制。</p>\n<p>另外，在使用原型的时候，一般推荐将需要扩展的方法写在构造函数的prototype属性中，避免写在_ _ proto _ _属性里面。</p>\n<br>\n\n<hr>\n<h2 id=\"探索instanceof\"><a href=\"#探索instanceof\" class=\"headerlink\" title=\"探索instanceof\"></a>探索instanceof</h2><p>instanceof是如何判断的？<br>表达式： A instanceof B          &emsp;&emsp;&emsp;&emsp;&emsp; A是实例对象，B是构造函数。A看隐式原型属性（__proto__），B看显示原型属性(prototype)</p>\n<p>如果B函数的显示原型对象在A对象的原型链上,返回true，否则返回false</p>\n<p>案例一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1 <span class=\"keyword\">instanceof</span> Foo); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200515152136840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>案例二:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> Foo); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515153434949.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200515153443153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>我们来逐个分析一下：</p>\n<pre><code>    console.log(Object instanceof Function); //true\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515154607459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre><code>    console.log(Object instanceof Object); //true\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515154638561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>console.log(Function instanceof Function); //true<br><img src=\"https://img-blog.csdnimg.cn/20200515154725474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre><code>    console.log(Function instanceof Object); //true\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515154808226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">        </p>\n<pre><code>    function Foo() &#123;&#125;\n    console.log(Object instanceof Foo); //false\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020051515495623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p>##补充：两个关于原型链的面试题</p>\n<p>案例一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">A.prototype.n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">A.prototype = &#123;</span><br><span class=\"line\">    <span class=\"attr\">n</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">m</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.n); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.m); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.n); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.m); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200515145330972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p>案例二：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a()&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;b()&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">f.a();<span class=\"comment\">//a()</span></span><br><span class=\"line\">f.b(); <span class=\"comment\">// 直接报错   f.b is not a function</span></span><br><span class=\"line\">F.a();<span class=\"comment\">//a()</span></span><br><span class=\"line\">F.b();<span class=\"comment\">//b()</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515150503562.png\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20200515150517395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","more":"<h2 id=\"JS中的原型和原型链\"><a href=\"#JS中的原型和原型链\" class=\"headerlink\" title=\"JS中的原型和原型链\"></a>JS中的原型和原型链</h2><p>讲原型的时候，我们应该先要记住以下几个要点，这几个要点是理解原型的关键：</p>\n<p>1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）。</p>\n<p>2、所有的引用类型都有一个’_ _ proto_ _’属性(也叫隐式原型，它是一个普通的对象)。</p>\n<p>3、所有的函数都有一个’prototype’属性(这也叫显式原型，它也是一个普通的对象)。</p>\n<p>4、所有引用类型，它的’_ _ proto_ _’属性指向它的构造函数的’prototype’属性。</p>\n<p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _’属性(也就是它的构造函数的’prototype’属性)中去寻找。</p>\n<hr>\n<p>那么要点说完了，我们就根据这些要点来理解原型和原型链。</p>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>我们先来看一个原型的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是一个构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*根据要点3，所有的函数都有一个prototype属性，这个属性是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">再根据要点1，所有的对象可以自由扩展属性</span></span><br><span class=\"line\"><span class=\"comment\">于是就有了以下写法*/</span></span><br><span class=\"line\">Foo.prototype=&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// prototype对象里面又有其他的属性</span></span><br><span class=\"line\">\t<span class=\"attr\">showName</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.name);<span class=\"comment\">//this是什么要看执行的时候谁调用了这个函数</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">showAge</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;And I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.age);<span class=\"comment\">//this是什么要看执行的时候谁调用了这个函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn=<span class=\"keyword\">new</span> Foo(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"number\">19</span>)</span><br><span class=\"line\"><span class=\"comment\">/*当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它</span></span><br><span class=\"line\"><span class=\"comment\">构造函数的&#x27;prototype&#x27;属性中去找*/</span></span><br><span class=\"line\">fn.showName(); <span class=\"comment\">//I&#x27;m 小明</span></span><br><span class=\"line\">fn.showAge(); <span class=\"comment\">//And I&#x27;m 19</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>这就是原型，很好理解。那为什么要使用原型呢？</p>\n<p>试想如果我们要通过Foo()来创建很多很多个对象，如果我们是这样子写的话：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.age=age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.showAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;And I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么我们创建出来的每一个对象，里面都有showName和showAge方法，这样就会占用很多的资源。<br>而通过原型来实现的话，只需要在构造函数里面给属性赋值，而把方法写在Foo.prototype属性(这个属性是唯一的)里面。这样每个对象都可以使用prototype属性里面的showName、showAge方法，并且节省了不少的资源。</p>\n<hr>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>理解了原型，那么原型链就更好理解了。</p>\n<p><strong>下面这段话可以帮助理解原型链</strong></p>\n<p>根据要点5，当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它构造函数的’prototype’属性中去寻找。那又因为’prototype’属性是一个对象，所以它也有一个’_ _ proto_ _’属性。</p>\n<p>那么我们来看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//this是什么要看执行的时候谁调用了这个函数。</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.name+<span class=\"string\">&quot; And I&#x27;m &quot;</span>+<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn=<span class=\"keyword\">new</span> Foo(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"number\">19</span>);</span><br><span class=\"line\">fn.toString(); <span class=\"comment\">//I&#x27;m 小明 And I&#x27;m 19</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.toString===Foo.prototype.__proto__.toString); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.__proto__ ===Foo.prototype)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo.prototype.__proto__===<span class=\"built_in\">Object</span>.prototype)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.__proto__===<span class=\"literal\">null</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>是不是觉得有点奇怪？我们来分析一下。<br><img src=\"https://img-blog.csdnimg.cn/20200515132717836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">首先，fn的构造函数是Foo()。所以：<br><strong>fn._ _ proto _ _=== Foo.prototype</strong><br>又因为Foo.prototype是一个普通的对象，它的构造函数是Object，所以：<br><strong>Foo.prototype._ _ proto _ _=== Object.prototype</strong><br>通过上面的代码，我们知道这个toString()方法是在Object.prototype里面的，当调用这个对象的本身并不存在的方法时，它会一层一层地往上去找，一直到null为止。</p>\n<br>\n<br>\n所以当fn调用toString()时，JS发现fn中没有这个方法，于是它就去Foo.prototype中去找，发现还是没有这个方法，然后就去Object.prototype中去找，找到了，就调用Object.prototype中的toString()方法。\n\n<br>\n\n<p>这就是原型链，fn能够调用Object.prototype中的方法正是因为存在原型链的机制。</p>\n<p>另外，在使用原型的时候，一般推荐将需要扩展的方法写在构造函数的prototype属性中，避免写在_ _ proto _ _属性里面。</p>\n<br>\n\n<hr>\n<h2 id=\"探索instanceof\"><a href=\"#探索instanceof\" class=\"headerlink\" title=\"探索instanceof\"></a>探索instanceof</h2><p>instanceof是如何判断的？<br>表达式： A instanceof B          &emsp;&emsp;&emsp;&emsp;&emsp; A是实例对象，B是构造函数。A看隐式原型属性（__proto__），B看显示原型属性(prototype)</p>\n<p>如果B函数的显示原型对象在A对象的原型链上,返回true，否则返回false</p>\n<p>案例一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1 <span class=\"keyword\">instanceof</span> Foo); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200515152136840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>案例二:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> Foo); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515153434949.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20200515153443153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>我们来逐个分析一下：</p>\n<pre><code>    console.log(Object instanceof Function); //true\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515154607459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre><code>    console.log(Object instanceof Object); //true\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515154638561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>console.log(Function instanceof Function); //true<br><img src=\"https://img-blog.csdnimg.cn/20200515154725474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre><code>    console.log(Function instanceof Object); //true\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515154808226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">        </p>\n<pre><code>    function Foo() &#123;&#125;\n    console.log(Object instanceof Foo); //false\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/2020051515495623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p>##补充：两个关于原型链的面试题</p>\n<p>案例一：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">A.prototype.n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">A.prototype = &#123;</span><br><span class=\"line\">    <span class=\"attr\">n</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">m</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.n); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.m); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.n); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.m); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200515145330972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p>案例二：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a()&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;b()&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">f.a();<span class=\"comment\">//a()</span></span><br><span class=\"line\">f.b(); <span class=\"comment\">// 直接报错   f.b is not a function</span></span><br><span class=\"line\">F.a();<span class=\"comment\">//a()</span></span><br><span class=\"line\">F.b();<span class=\"comment\">//b()</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200515150503562.png\" alt=\"在这里插入图片描述\"><img src=\"https://img-blog.csdnimg.cn/20200515150517395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}