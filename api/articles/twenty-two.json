{"title":"JavaScript中的稀疏数组和密集数组","slug":"twenty-two","date":"2020-05-06T00:25:18.000Z","updated":"2022-07-29T04:22:04.750Z","comments":true,"path":"api/articles/twenty-two.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/77ed7b55b8fe417e8e65fa87a7ad2ed2.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/77ed7b55b8fe417e8e65fa87a7ad2ed2.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h2><p>概念</p>\n<p>在一些后端语言中，如 C，数组内的值通常被分配在一系列连续的内存地址上，但是在 js 中，某些数组内存则不是连续的，所谓稀疏，顾名思义，不连续，存在一些空隙；<br><br><br>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (3) [empty × 3]</span></span><br></pre></td></tr></table></figure>\n<p>通过以上方法创建数组，其中 Array(3) 中的参数 3 表示数组的长度，这个数组就是稀疏的，控制台输出一般带有 empty 字样，或者像下面这样创建数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (3) [1, empty, 2]</span></span><br></pre></td></tr></table></figure>\n<p>因为定义语句中两个逗号之间无字符，没有定义值，同样带有 empty 字样，代表稀疏数组，这里可以把 empty 理解为上面讲到的 空隙；<br><br></p>\n<p>特点<br>接下来看一下稀疏数组特殊在什么地方，举个例子说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];  <span class=\"comment\">// 正常数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);  <span class=\"comment\">// 稀疏数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"number\">1</span>, , <span class=\"number\">3</span>];  <span class=\"comment\">// 稀疏数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.length, arr2.length, arr3.length);</span><br><span class=\"line\"><span class=\"comment\">// 3 3 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">0</span>], arr3[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"comment\">// undefined undefined</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr1[i], arr2[i], arr3[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 undefined 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2 undefined undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 3 undefined 3</span></span><br><span class=\"line\">arr1.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">arr2.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// （无输出）</span></span><br><span class=\"line\">arr3.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr3, <span class=\"number\">1</span> <span class=\"keyword\">in</span> arr3);</span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br></pre></td></tr></table></figure>\n<p>总结一下，创建的稀疏数组，其长度（length）与定义长度值一致；空隙 值可以被单独访问到，并且不是之前出现的 empty 字样，而是 undefined，比如例子中出现 undefined 时都是使用 arr[i] 这样的索引直接访问方式；使用某些数组方法如 forEach() 时，会忽略掉空隙值，只处理正常值，所以也会使得 1 in arr3 值为 false，即数组中不存在该索引；<br><br><br>细想一下，js 这样处理的原因多半是去除不必要的性能开销，当数组相当大时，可以避免处理一些未初始化的值，但这样也同时使得开发中会出现一些问题，所以应尽量避免；<br><br><br>举个例子来查看一下性能如何：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">&#x27;one&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 密集数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(...Array(<span class=\"number\">1e5</span>)).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&#x27;one&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">&#x27;two&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 稀疏数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">1e5</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&#x27;two&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one: 26.3759765625ms</span></span><br><span class=\"line\"><span class=\"comment\">// two: 5.701171875ms</span></span><br></pre></td></tr></table></figure>\n<p>可以看出在处理较大数组时，稀疏数组确实能降低不少性能开销；<br><br></p>\n<h2 id=\"密集数组\"><a href=\"#密集数组\" class=\"headerlink\" title=\"密集数组\"></a>密集数组</h2><p>概念</p>\n<p>与稀疏相对应，则存在密集，定义也就是元素中不存在 空隙 值，其实密集数组基本就是平时常见的正常数组；</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">arr2.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>以上都是一些定义密集数组的方法，并且数组中的值都能被正常访问或遍历处理；</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>运用时需要注意以下情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1[<span class=\"number\">0</span>], arr2[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// undefined undefined</span></span><br><span class=\"line\">arr1.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">arr2.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// （无输出）</span></span><br></pre></td></tr></table></figure>\n<p>即显式的声明值为 undefined 并不代表这个值就是之前提到的空隙值，虽然二者通过索引访问时的值都返回 undefined，但是其根本还是有区别的，显式声明过的是可以被遍历等操作访问的，不会被当成空隙值被忽略；</p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>通常在很多情况下，我们想要直接声明一个数组并赋予其一些特定的初始值，并且为了避免问题，通常是希望申明为密集数组的，下面就介绍一些常用的方法或技巧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">// [1, 1, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.fill().map(<span class=\"function\">(<span class=\"params\">x, i</span>) =&gt;</span> i);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">// [0, 1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);</span><br><span class=\"line\"><span class=\"comment\">// [undefined, undefined, undefined]</span></span><br><span class=\"line\"><span class=\"comment\">// 这样声明的是密集数组，不是稀疏的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>).join(<span class=\"string\">&#x27;a&#x27;</span>).split(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 注意定义数组长度比输出数组大 1</span></span><br></pre></td></tr></table></figure>\n\n","more":"<h2 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h2><p>概念</p>\n<p>在一些后端语言中，如 C，数组内的值通常被分配在一系列连续的内存地址上，但是在 js 中，某些数组内存则不是连续的，所谓稀疏，顾名思义，不连续，存在一些空隙；<br><br><br>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (3) [empty × 3]</span></span><br></pre></td></tr></table></figure>\n<p>通过以上方法创建数组，其中 Array(3) 中的参数 3 表示数组的长度，这个数组就是稀疏的，控制台输出一般带有 empty 字样，或者像下面这样创建数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// (3) [1, empty, 2]</span></span><br></pre></td></tr></table></figure>\n<p>因为定义语句中两个逗号之间无字符，没有定义值，同样带有 empty 字样，代表稀疏数组，这里可以把 empty 理解为上面讲到的 空隙；<br><br></p>\n<p>特点<br>接下来看一下稀疏数组特殊在什么地方，举个例子说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];  <span class=\"comment\">// 正常数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);  <span class=\"comment\">// 稀疏数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"number\">1</span>, , <span class=\"number\">3</span>];  <span class=\"comment\">// 稀疏数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.length, arr2.length, arr3.length);</span><br><span class=\"line\"><span class=\"comment\">// 3 3 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">0</span>], arr3[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"comment\">// undefined undefined</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr1[i], arr2[i], arr3[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 undefined 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2 undefined undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 3 undefined 3</span></span><br><span class=\"line\">arr1.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\">arr2.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// （无输出）</span></span><br><span class=\"line\">arr3.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> <span class=\"keyword\">in</span> arr3, <span class=\"number\">1</span> <span class=\"keyword\">in</span> arr3);</span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br></pre></td></tr></table></figure>\n<p>总结一下，创建的稀疏数组，其长度（length）与定义长度值一致；空隙 值可以被单独访问到，并且不是之前出现的 empty 字样，而是 undefined，比如例子中出现 undefined 时都是使用 arr[i] 这样的索引直接访问方式；使用某些数组方法如 forEach() 时，会忽略掉空隙值，只处理正常值，所以也会使得 1 in arr3 值为 false，即数组中不存在该索引；<br><br><br>细想一下，js 这样处理的原因多半是去除不必要的性能开销，当数组相当大时，可以避免处理一些未初始化的值，但这样也同时使得开发中会出现一些问题，所以应尽量避免；<br><br><br>举个例子来查看一下性能如何：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">&#x27;one&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 密集数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(...Array(<span class=\"number\">1e5</span>)).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&#x27;one&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">&#x27;two&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 稀疏数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">1e5</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">&#x27;two&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one: 26.3759765625ms</span></span><br><span class=\"line\"><span class=\"comment\">// two: 5.701171875ms</span></span><br></pre></td></tr></table></figure>\n<p>可以看出在处理较大数组时，稀疏数组确实能降低不少性能开销；<br><br></p>\n<h2 id=\"密集数组\"><a href=\"#密集数组\" class=\"headerlink\" title=\"密集数组\"></a>密集数组</h2><p>概念</p>\n<p>与稀疏相对应，则存在密集，定义也就是元素中不存在 空隙 值，其实密集数组基本就是平时常见的正常数组；</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">arr2.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>以上都是一些定义密集数组的方法，并且数组中的值都能被正常访问或遍历处理；</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>运用时需要注意以下情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1[<span class=\"number\">0</span>], arr2[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// undefined undefined</span></span><br><span class=\"line\">arr1.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">arr2.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// （无输出）</span></span><br></pre></td></tr></table></figure>\n<p>即显式的声明值为 undefined 并不代表这个值就是之前提到的空隙值，虽然二者通过索引访问时的值都返回 undefined，但是其根本还是有区别的，显式声明过的是可以被遍历等操作访问的，不会被当成空隙值被忽略；</p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>通常在很多情况下，我们想要直接声明一个数组并赋予其一些特定的初始值，并且为了避免问题，通常是希望申明为密集数组的，下面就介绍一些常用的方法或技巧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">// [1, 1, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.fill().map(<span class=\"function\">(<span class=\"params\">x, i</span>) =&gt;</span> i);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">// [0, 1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);</span><br><span class=\"line\"><span class=\"comment\">// [undefined, undefined, undefined]</span></span><br><span class=\"line\"><span class=\"comment\">// 这样声明的是密集数组，不是稀疏的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">4</span>).join(<span class=\"string\">&#x27;a&#x27;</span>).split(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">// 注意定义数组长度比输出数组大 1</span></span><br></pre></td></tr></table></figure>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}