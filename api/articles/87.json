{"title":"解决使用Better-Scroll可滚动区域的问题（事件总线，防抖操作）","slug":"87","date":"2020-08-15T02:15:38.000Z","updated":"2022-07-29T04:22:04.755Z","comments":true,"path":"api/articles/87.json","excerpt":" [Figure] ","covers":["https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.2/photo/IMG_0045.JPG","https://qny.aqingya.cn/img/20200815091734.png","https://qny.aqingya.cn/img/20200815094317.png","https://qny.aqingya.cn/img/20200815093116.png","https://qny.aqingya.cn/img/20200815093144.png","https://qny.aqingya.cn/img/20200815093211.png","https://qny.aqingya.cn/img/20200815093528.png","https://qny.aqingya.cn/img/20200815093612.png"],"content":"<p><img src=\"https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.2/photo/IMG_0045.JPG\"></p>\n<span id=\"more\"></span>\n\n<br>\n\n\n\n<p>Better-Scroll在决定有多少区域可以滚动时, 是根据scrollerHeight属性决定。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815091734.png\"></p>\n<p>scrollerHeight属性是根据放Better-Scroll的content中的子组件的高度</p>\n<p>但是我们的首页中, 刚开始在计算scrollerHeight属性时, 是没有将图片计算在内的</p>\n<p>所以, 计算出来的告诉是错误的(1300+)</p>\n<p>后来图片加载进来之后有了新的高度, 但是scrollerHeight属性并没有进行更新.</p>\n<p>所以滚动出现了问题</p>\n<br>\n\n<p>如何解决这个问题了?</p>\n<ul>\n<li>监听每一张图片是否加载完成, 只要有一张图片加载完成了, 执行一次<code>this.scroll.refresh()</code></li>\n<li>如何监听图片加载完成了 ?<ul>\n<li>原生的js监听图片: img.onload = function() {}</li>\n<li>Vue中监听: @load=’方法’</li>\n</ul>\n</li>\n<li>调用scroll的<code>this.scroll.refresh()</code></li>\n</ul>\n<br>\n\n<h2 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h2><p>如何将GoodsListItem.vue中的事件传入到Home.vue中</p>\n<p>因为涉及到非父子组件的通信, 所以这里我们选择了<strong>事件总线</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815094317.png\"></p>\n<p>步骤：</p>\n<ul>\n<li><p>Vue.prototype.$bus = new Vue()</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093116.png\"></p>\n<br></li>\n<li><p>this.bus.emit(‘事件名称’, 参数)</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093144.png\"></p>\n<br></li>\n<li><p>this.bus.on(‘事件名称’, 回调函数(参数))</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093211.png\"></p>\n<br></li>\n</ul>\n<p>问题一: refresh找不到的问题</p>\n<ul>\n<li><p>第一: 在Scroll.vue中, 调用this.scroll的方法之前, 判断this.scroll对象是否有值</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093528.png\"></p>\n<br></li>\n<li><p>第二: 在mounted() 生命周期函数中使用<code> this.$refs.scroll</code>而不是created() 中 （为什么这样做：<a href=\"https://aqingya.cn/articl/4d16d636.html#4-mounted\">传送门</a>）</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093612.png\"></p>\n</li>\n</ul>\n<br>\n\n<h2 id=\"防抖操作\"><a href=\"#防抖操作\" class=\"headerlink\" title=\"防抖操作\"></a>防抖操作</h2><p>问题二: 对于refresh非常频繁的问题, 进行防抖操作</p>\n<p>定义：多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行。</p>\n<p>防抖函数起作用的过程:</p>\n<ul>\n<li>如果我们直接执行refresh, 那么refresh函数会被执行30次.</li>\n<li>可以将refresh函数传入到debounce函数中, 生成一个新的函数.</li>\n<li>之后在调用非常频繁的时候, 就使用新生成的函数.</li>\n<li>而新生成的函数, 并不会非常频繁的调用, 如果下一次执行来的非常快, 那么会将上一次取消掉</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 放抖动函数使用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> refresh = <span class=\"built_in\">this</span>.debounce(<span class=\"built_in\">this</span>.$refs.scroll &amp;&amp; <span class=\"built_in\">this</span>.$refs.scroll.refresh, <span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"comment\">//解决滚动区域bug 使用事件总线 </span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;itemimgload&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    refresh()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 放抖动函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">debounce</span>(<span class=\"params\">func, delay</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">          func.apply(<span class=\"built_in\">this</span>,args)</span><br><span class=\"line\">        &#125;,delay)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>\n\n\n\n\n\n","more":"<br>\n\n\n\n<p>Better-Scroll在决定有多少区域可以滚动时, 是根据scrollerHeight属性决定。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815091734.png\"></p>\n<p>scrollerHeight属性是根据放Better-Scroll的content中的子组件的高度</p>\n<p>但是我们的首页中, 刚开始在计算scrollerHeight属性时, 是没有将图片计算在内的</p>\n<p>所以, 计算出来的告诉是错误的(1300+)</p>\n<p>后来图片加载进来之后有了新的高度, 但是scrollerHeight属性并没有进行更新.</p>\n<p>所以滚动出现了问题</p>\n<br>\n\n<p>如何解决这个问题了?</p>\n<ul>\n<li>监听每一张图片是否加载完成, 只要有一张图片加载完成了, 执行一次<code>this.scroll.refresh()</code></li>\n<li>如何监听图片加载完成了 ?<ul>\n<li>原生的js监听图片: img.onload = function() {}</li>\n<li>Vue中监听: @load=’方法’</li>\n</ul>\n</li>\n<li>调用scroll的<code>this.scroll.refresh()</code></li>\n</ul>\n<br>\n\n<h2 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h2><p>如何将GoodsListItem.vue中的事件传入到Home.vue中</p>\n<p>因为涉及到非父子组件的通信, 所以这里我们选择了<strong>事件总线</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815094317.png\"></p>\n<p>步骤：</p>\n<ul>\n<li><p>Vue.prototype.$bus = new Vue()</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093116.png\"></p>\n<br></li>\n<li><p>this.bus.emit(‘事件名称’, 参数)</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093144.png\"></p>\n<br></li>\n<li><p>this.bus.on(‘事件名称’, 回调函数(参数))</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093211.png\"></p>\n<br></li>\n</ul>\n<p>问题一: refresh找不到的问题</p>\n<ul>\n<li><p>第一: 在Scroll.vue中, 调用this.scroll的方法之前, 判断this.scroll对象是否有值</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093528.png\"></p>\n<br></li>\n<li><p>第二: 在mounted() 生命周期函数中使用<code> this.$refs.scroll</code>而不是created() 中 （为什么这样做：<a href=\"https://aqingya.cn/articl/4d16d636.html#4-mounted\">传送门</a>）</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200815093612.png\"></p>\n</li>\n</ul>\n<br>\n\n<h2 id=\"防抖操作\"><a href=\"#防抖操作\" class=\"headerlink\" title=\"防抖操作\"></a>防抖操作</h2><p>问题二: 对于refresh非常频繁的问题, 进行防抖操作</p>\n<p>定义：多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行。</p>\n<p>防抖函数起作用的过程:</p>\n<ul>\n<li>如果我们直接执行refresh, 那么refresh函数会被执行30次.</li>\n<li>可以将refresh函数传入到debounce函数中, 生成一个新的函数.</li>\n<li>之后在调用非常频繁的时候, 就使用新生成的函数.</li>\n<li>而新生成的函数, 并不会非常频繁的调用, 如果下一次执行来的非常快, 那么会将上一次取消掉</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 放抖动函数使用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> refresh = <span class=\"built_in\">this</span>.debounce(<span class=\"built_in\">this</span>.$refs.scroll &amp;&amp; <span class=\"built_in\">this</span>.$refs.scroll.refresh, <span class=\"number\">500</span>)</span><br><span class=\"line\">    <span class=\"comment\">//解决滚动区域bug 使用事件总线 </span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;itemimgload&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    refresh()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 放抖动函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">debounce</span>(<span class=\"params\">func, delay</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">          func.apply(<span class=\"built_in\">this</span>,args)</span><br><span class=\"line\">        &#125;,delay)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<br>","categories":[{"name":"Vue","path":"api/categories/Vue.json"}],"tags":[{"name":"可滚动区域的问题","path":"api/tags/可滚动区域的问题.json"},{"name":"事件总线","path":"api/tags/事件总线.json"},{"name":"防抖操作","path":"api/tags/防抖操作.json"}]}