{"title":"深拷贝的三种方式","slug":"221","date":"2022-08-02T09:34:59.000Z","updated":"2022-08-02T10:11:02.598Z","comments":true,"path":"api/articles/221.json","excerpt":null,"covers":null,"content":"<h2 id=\"递归方式（推荐，项目中最安全最常用）\"><a href=\"#递归方式（推荐，项目中最安全最常用）\" class=\"headerlink\" title=\"递归方式（推荐，项目中最安全最常用）\"></a>递归方式（推荐，项目中最安全最常用）</h2><p>使用递归的方式进行对象（数组）的深拷贝</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> copyObj = <span class=\"function\">(<span class=\"params\">obj = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//变量先置空</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newobj = <span class=\"literal\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否需要继续进行递归</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (obj) == <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newobj = obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//进行下一层递归克隆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            newobj[i] = copyObj(obj[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是对象直接赋值</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> newobj = obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> newobj;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方函数的使用方式👇</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">numberParams</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">functionParams</span>:<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;昨天基金全是绿的，只有我的眼睛是红的&#x27;</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">objParams</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">b</span>:<span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = copyObj(obj); <span class=\"comment\">//这样就完成了一个对象的递归拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.numberParams = <span class=\"number\">100</span>;  <span class=\"comment\">//更改第一个对象的指</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.numberParams); <span class=\"comment\">//输出依然是1 不会跟随obj去改变</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSON-stringify-；-这个不推荐使用，有坑\"><a href=\"#JSON-stringify-；-这个不推荐使用，有坑\" class=\"headerlink\" title=\"JSON.stringify() ；(这个不推荐使用，有坑)\"></a>JSON.stringify() ；(这个不推荐使用，有坑)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>:<span class=\"string\">&quot;测试测试测。&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先转为json格式字符，再转回来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">obj.a = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a); <span class=\"comment\">//输出 1  </span></span><br></pre></td></tr></table></figure>\n\n<p>普通的对象也可以进行深拷贝，但是！！！ 当对象内容项为number,string.boolean的时候，是没有什么问题的。但是，如果对象内容项为undefined,null,Date,RegExp,function，error的时候。使用JSON.stringify()进行拷贝就会出问题了。</p>\n<h2 id=\"使用第三方库lodash-中的cloneDeep-方法\"><a href=\"#使用第三方库lodash-中的cloneDeep-方法\" class=\"headerlink\" title=\"使用第三方库lodash  中的cloneDeep()方法\"></a>使用第三方库<a href=\"https://www.lodashjs.com/\">lodash </a> 中的cloneDeep()方法</h2><p>是否推荐使用，看情况吧。如果我们的项目中只需要一个深拷贝的功能，这种情况下为了一个功能引入整个第三方库就显得很不值得了。不如写一个递归函数对于项目来说性能更好。</p>\n<p>lodash.cloneDeep()代码示例👇</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lodash <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">\t    <span class=\"attr\">c</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t    <span class=\"attr\">d</span>: [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">\t    <span class=\"attr\">e</span>:<span class=\"string\">&#x27;阿巴阿巴&#x27;</span></span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  <span class=\"attr\">b</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = lodash.cloneDeep(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b); <span class=\"comment\">//输出 4； 不会改变</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上，cloneDeep()方法底层使用的本来就是递归方法。只是在外层又封装了一层而已。</p>\n<p>所以，如果不是原先项目中有使用 lodash 这个库的话，大可不必为了这一个功能而去引入它。</p>\n","more":"<h2 id=\"递归方式（推荐，项目中最安全最常用）\"><a href=\"#递归方式（推荐，项目中最安全最常用）\" class=\"headerlink\" title=\"递归方式（推荐，项目中最安全最常用）\"></a>递归方式（推荐，项目中最安全最常用）</h2><p>使用递归的方式进行对象（数组）的深拷贝</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> copyObj = <span class=\"function\">(<span class=\"params\">obj = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//变量先置空</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newobj = <span class=\"literal\">null</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否需要继续进行递归</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (obj) == <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newobj = obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//进行下一层递归克隆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            newobj[i] = copyObj(obj[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是对象直接赋值</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> newobj = obj;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> newobj;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方函数的使用方式👇</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">numberParams</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">functionParams</span>:<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;昨天基金全是绿的，只有我的眼睛是红的&#x27;</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">objParams</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">b</span>:<span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = copyObj(obj); <span class=\"comment\">//这样就完成了一个对象的递归拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.numberParams = <span class=\"number\">100</span>;  <span class=\"comment\">//更改第一个对象的指</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.numberParams); <span class=\"comment\">//输出依然是1 不会跟随obj去改变</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSON-stringify-；-这个不推荐使用，有坑\"><a href=\"#JSON-stringify-；-这个不推荐使用，有坑\" class=\"headerlink\" title=\"JSON.stringify() ；(这个不推荐使用，有坑)\"></a>JSON.stringify() ；(这个不推荐使用，有坑)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>:<span class=\"string\">&quot;测试测试测。&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先转为json格式字符，再转回来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">obj.a = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.a); <span class=\"comment\">//输出 1  </span></span><br></pre></td></tr></table></figure>\n\n<p>普通的对象也可以进行深拷贝，但是！！！ 当对象内容项为number,string.boolean的时候，是没有什么问题的。但是，如果对象内容项为undefined,null,Date,RegExp,function，error的时候。使用JSON.stringify()进行拷贝就会出问题了。</p>\n<h2 id=\"使用第三方库lodash-中的cloneDeep-方法\"><a href=\"#使用第三方库lodash-中的cloneDeep-方法\" class=\"headerlink\" title=\"使用第三方库lodash  中的cloneDeep()方法\"></a>使用第三方库<a href=\"https://www.lodashjs.com/\">lodash </a> 中的cloneDeep()方法</h2><p>是否推荐使用，看情况吧。如果我们的项目中只需要一个深拷贝的功能，这种情况下为了一个功能引入整个第三方库就显得很不值得了。不如写一个递归函数对于项目来说性能更好。</p>\n<p>lodash.cloneDeep()代码示例👇</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lodash <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">\t    <span class=\"attr\">c</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t    <span class=\"attr\">d</span>: [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">\t    <span class=\"attr\">e</span>:<span class=\"string\">&#x27;阿巴阿巴&#x27;</span></span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  <span class=\"attr\">b</span>: <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newObj = lodash.cloneDeep(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj.b); <span class=\"comment\">//输出 4； 不会改变</span></span><br></pre></td></tr></table></figure>\n\n<p>实际上，cloneDeep()方法底层使用的本来就是递归方法。只是在外层又封装了一层而已。</p>\n<p>所以，如果不是原先项目中有使用 lodash 这个库的话，大可不必为了这一个功能而去引入它。</p>\n","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"深拷贝","path":"api/tags/深拷贝.json"}]}