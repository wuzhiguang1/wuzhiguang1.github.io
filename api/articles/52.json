{"title":"Git操作——简单可直接食用","slug":"52","date":"2020-07-13T07:26:58.000Z","updated":"2022-07-29T04:22:04.776Z","comments":true,"path":"api/articles/52.json","excerpt":null,"covers":["https://qny.aqingya.cn/img/20200713145647.png","https://qny.aqingya.cn/img/20200713145925.png","https://qny.aqingya.cn/img/20200713150001.png","https://qny.aqingya.cn/img/20200713150522.png","https://qny.aqingya.cn/img/20200713150624.png","https://qny.aqingya.cn/img/20200713151058.png"],"content":"<h2 id=\"Git命令行操作\"><a href=\"#Git命令行操作\" class=\"headerlink\" title=\"Git命令行操作\"></a>Git命令行操作</h2><h3 id=\"1-1本地库初始化\"><a href=\"#1-1本地库初始化\" class=\"headerlink\" title=\"1.1本地库初始化\"></a>1.1本地库初始化</h3><p><code>进入文件夹</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">注意：生成的 .git 目录中存放的是本地库相关文件，不要删除</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2设置签名\"><a href=\"#1-2设置签名\" class=\"headerlink\" title=\"1.2设置签名\"></a>1.2设置签名</h3><ul>\n<li><p>项目(仓库)级别<code>仅在当前本地库有效</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name tom  #设置用户名tom</span><br><span class=\"line\">git config user.email liu@qq.com #设置用户邮箱</span><br></pre></td></tr></table></figure></li>\n<li><p>系统用户级别<code>仅在当前登录的操作系统用户有效</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name tom</span><br><span class=\"line\">git config --global user.email liu@qq.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>仅仅加了一个 <code>--global</code></p>\n<p>优先级别：<code>项目级别</code>  &gt;  <code>系统级别</code></p>\n<p>信息保存位置：<code>~/.gitconfig 文件</code>   </p>\n</blockquote>\n<h3 id=\"1-3基本操作\"><a href=\"#1-3基本操作\" class=\"headerlink\" title=\"1.3基本操作\"></a>1.3基本操作</h3><h4 id=\"1-3-1-状态查看\"><a href=\"#1-3-1-状态查看\" class=\"headerlink\" title=\"1.3.1 状态查看\"></a>1.3.1 状态查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status   #查看工作区、暂存区状态</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-添加\"><a href=\"#1-3-2-添加\" class=\"headerlink\" title=\"1.3.2 添加\"></a>1.3.2 添加</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add fileName  #指定文件</span><br><span class=\"line\">git add . #所有</span><br><span class=\"line\">说明：将工作区的文件添加到暂存区</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-3-提交\"><a href=\"#1-3-3-提交\" class=\"headerlink\" title=\"1.3.3 提交\"></a>1.3.3 提交</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &#x27;commit message&#x27; fileName</span><br><span class=\"line\">说明：将暂存区内容提交到本地库</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-4-查看历史记录\"><a href=\"#1-3-4-查看历史记录\" class=\"headerlink\" title=\"1.3.4 查看历史记录\"></a>1.3.4 查看历史记录</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log </span><br><span class=\"line\">git reflog  #常用 显示当前分支的最近几次提交</span><br><span class=\"line\">git log --graph #图形显示,更直观</span><br><span class=\"line\">git log --pretty=oneline #漂亮一行显示</span><br><span class=\"line\">git log --oneline #简洁显示</span><br><span class=\"line\">说明：HEAD@&#123;移动到当前版本需要多少步&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-5-前进后退\"><a href=\"#1-3-5-前进后退\" class=\"headerlink\" title=\"1.3.5 前进后退\"></a>1.3.5 前进后退</h4><p><img src=\"https://qny.aqingya.cn/img/20200713145647.png\"></p>\n<h4 id=\"1-3-6-reset的三个参数比较\"><a href=\"#1-3-6-reset的三个参数比较\" class=\"headerlink\" title=\"1.3.6 reset的三个参数比较\"></a>1.3.6 reset的三个参数比较</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soft: </span><br><span class=\"line\">  - 仅本地库移动HEAD 指针</span><br><span class=\"line\">mixed:</span><br><span class=\"line\">  - 在本地库移动HEAD指针</span><br><span class=\"line\">  - 重置暂存区</span><br><span class=\"line\">hard:</span><br><span class=\"line\">  - 在本地库移动HEAD指针</span><br><span class=\"line\">  - 重置暂存区</span><br><span class=\"line\">  - 重置工作区</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本.</p>\n</blockquote>\n<p>为了更好地理解git reset，我们来回顾一下,Git的版本管理及HEAD的理解</p>\n<blockquote>\n<p>Git的所有提交，会连成一条时间轴线，这就是分支。如果当前分支是master，HEAD指针一般指向当前分支，如下：</p>\n</blockquote>\n<p><img src=\"https://qny.aqingya.cn/img/20200713145925.png\"></p>\n<p>假设执行git reset，回退到版本二之后，版本三不见了哦,如下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713150001.png\"></p>\n<h4 id=\"1-3-7-删除文件并找回\"><a href=\"#1-3-7-删除文件并找回\" class=\"headerlink\" title=\"1.3.7　删除文件并找回\"></a>1.3.7　删除文件并找回</h4><ul>\n<li><strong>相当于建立一个快照，虽然删除了，但只要添加到暂存区，就能找回</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 指针位置</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-8-文件差异比较\"><a href=\"#1-3-8-文件差异比较\" class=\"headerlink\" title=\"1.3.8 文件差异比较\"></a>1.3.8 文件差异比较</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff 文件名</span><br><span class=\"line\">git diff 哈希值 文件名  #和历史中的一个版本比较</span><br><span class=\"line\">git diff  #不带文件名，则比较多个文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-9-git-stash\"><a href=\"#1-3-9-git-stash\" class=\"headerlink\" title=\"1.3.9 git stash\"></a>1.3.9 git stash</h4><p>stash命令可用于临时保存和恢复修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash  把当前的工作隐藏起来 等以后恢复现场后继续工作 </span><br><span class=\"line\">git stash list 显示保存的工作进度列表 </span><br><span class=\"line\">git stash pop stash@&#123;num&#125; 恢复工作进度到工作区 </span><br><span class=\"line\">git stash show ：显示做了哪些改动 </span><br><span class=\"line\">git stash drop stash@&#123;num&#125; ：删除一条保存的工作进度 </span><br><span class=\"line\">git stash clear 删除所有缓存的stash。 复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-分支管理\"><a href=\"#2-2-分支管理\" class=\"headerlink\" title=\"2.2 分支管理\"></a>2.2 分支管理</h3><p><code>hot_fix</code> <code>master</code> <code>feature_x</code> <code>feature_y</code></p>\n<h4 id=\"2-2-1-什么是分支管理\"><a href=\"#2-2-1-什么是分支管理\" class=\"headerlink\" title=\"2.2.1 什么是分支管理\"></a>2.2.1 什么是分支管理</h4><ul>\n<li>在版本控制中，使用推进多个任务</li>\n</ul>\n<h4 id=\"2-2-2-分支的好处\"><a href=\"#2-2-2-分支的好处\" class=\"headerlink\" title=\"2.2.2 分支的好处\"></a>2.2.2 分支的好处</h4><ul>\n<li>同时并行推进多个功能开发，提高开发效率</li>\n<li>某一分支开发失败，不会对其它分支有任何影响</li>\n</ul>\n<h4 id=\"2-2-3-分支操作\"><a href=\"#2-2-3-分支操作\" class=\"headerlink\" title=\"2.2.3 分支操作\"></a>2.2.3 分支操作</h4><ul>\n<li>创建分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br><span class=\"line\">git branch -v </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br><span class=\"line\">git checkout -b 分支名   #创建分支并直接切换到该分支</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>合并分支<code>相当于把修改了的文件拉过来</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge xxx</span><br><span class=\"line\">注意：合并分支的时候要明确谁谁合并</span><br><span class=\"line\">\t我在a分支里面修改了。要合并到master，就先切换到master，然后合并b</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-2-4-解决冲突\"><a href=\"#2-2-4-解决冲突\" class=\"headerlink\" title=\"2.2.4 解决冲突\"></a>2.2.4 解决冲突</h4><ul>\n<li>冲突的表现</li>\n<li>冲突的解决<ul>\n<li>第一步：编辑，删除特殊标记<code>&lt;&lt;&lt;</code> <code>===</code></li>\n<li>第二步：修改到满意位置，保存退出</li>\n<li>第三步：添加到缓存区  <code>git  add 文件名</code></li>\n<li>第四步：提交到本地库<code>git commit -m &#39;日志信息&#39; </code>  <code>注意：后面一定不能带文件名</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Git-结合Github\"><a href=\"#Git-结合Github\" class=\"headerlink\" title=\"Git 结合Github\"></a>Git 结合Github</h2><br>\n\n<p><strong>创建一个新的存储库</strong></p>\n<blockquote>\n<p>git init<br>git add .<br>git commit -m “first commit”<br>git branch -M master<br>git remote add origin <a href=\"https://github.com/wuz/XiaMi-Shop.git\">https://github.com/wuz/XiaMi-Shop.git</a><br>git push -u origin master</p>\n</blockquote>\n<p><strong>已经有仓库</strong></p>\n<blockquote>\n<p>git remote add origin <a href=\"https://github.com/wuz/XiaMi-Shop.git\">https://github.com/wuz/XiaMi-Shop.git</a><br>git branch -M master<br>git push -u origin master</p>\n</blockquote>\n<br>\n\n<p><code>别分手</code>  <code>别名 分支名</code></p>\n<h4 id=\"1-1-创建远程库地址别名\"><a href=\"#1-1-创建远程库地址别名\" class=\"headerlink\" title=\"1.1 创建远程库地址别名\"></a>1.1 创建远程库地址别名</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v  #查看远程地址别名</span><br><span class=\"line\">git remote add 别名 远程地址 </span><br><span class=\"line\">例子：git remote add origin https://xx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-推送\"><a href=\"#1-2-推送\" class=\"headerlink\" title=\"1.2 推送\"></a>1.2 推送</h4><p><code>开发修改完把本地库的文件推送到远程仓库</code> <code>前提是提交到了本地库才可以推送</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push 别名 分支名</span><br><span class=\"line\">git push -u 别名 分支名    #-u指定默认主机</span><br><span class=\"line\">例子：git push origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-克隆\"><a href=\"#1-3-克隆\" class=\"headerlink\" title=\"1.3 克隆\"></a>1.3 克隆</h4><p><code>完整的把远程库克隆到本地</code>  <code>克隆下来后不要在主分支里面做开发</code> <code>clone进行一次，从无到有的过程，更新用pull</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone  远程地址</span><br><span class=\"line\">例子：git clone https://xx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-拉取\"><a href=\"#1-4-拉取\" class=\"headerlink\" title=\"1.4 拉取\"></a>1.4 拉取</h4><p>  <code>本地存在clone下来的文件  就用pull更新</code>  </p>\n<p><strong>注意：</strong> <span style=\"background-color:yellow\">如果你提交成功下班后：同事也向该远程仓库提交了新的内容。第二天上班时，你需要拉去线上的仓库的最新版本。</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pull = fetch + merge</span><br><span class=\"line\">\tgit fetch 别名 分支名</span><br><span class=\"line\">\tgit merge 别名 分支名</span><br><span class=\"line\">git pull 别名 分支名</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"background-color:yellow\">因此在每天工作的第一件事就是git pull 拉取线上的最新版本，下班要做的就是 git push，将本地代码提交到线上仓库。</span></p>\n<h4 id=\"1-5-解决冲突\"><a href=\"#1-5-解决冲突\" class=\"headerlink\" title=\"1.5 解决冲突\"></a>1.5 解决冲突</h4><p><code>注意：解决冲突后的提交是不能带文件名的</code></p>\n<p><code>如果不是基于远程库最新版做的修改不能推送，必须先pull下来安装冲突办法解决</code></p>\n<h4 id=\"1-6-rebase\"><a href=\"#1-6-rebase\" class=\"headerlink\" title=\"1.6 rebase\"></a>1.6 rebase</h4><p>rebase又称为衍合，是合并的另外一种选择。</p>\n<p>假设有两个分支master和test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D---E test       /  A---B---C---F--- master 复制代码</span><br></pre></td></tr></table></figure>\n\n<p>执行 git merge test得到的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D--------E       /          \\  A---B---C---F----G---   test, master 复制代码</span><br></pre></td></tr></table></figure>\n\n<p>执行git rebase test，得到的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A---B---D---E---C‘---F‘---   test, master 复制代码</span><br></pre></td></tr></table></figure>\n\n<p><strong>rebase好处是：</strong> 获得更优雅的提交树，可以线性的看到每一次提交，并且没有增加提交节点。所以很多时候，看到有些伙伴都是这个命令拉代码：git pull –rebase</p>\n<h4 id=\"1-7-beyond-compare\"><a href=\"#1-7-beyond-compare\" class=\"headerlink\" title=\"1.7 beyond compare\"></a>1.7 beyond compare</h4><p><code>用软件解决冲突</code> </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.安装 ：</span><br><span class=\"line\">\tbeyond compare </span><br><span class=\"line\">2.配置：</span><br><span class=\"line\">    git config --local merge.tool bc3  #合并名称</span><br><span class=\"line\">    git config --local mergetool.path &#x27;/usr/local/bin/bcomp&#x27; #软件路径</span><br><span class=\"line\">    git config --local mergetool.keepBackup false  #False不用保存备份</span><br><span class=\"line\">3.应用：</span><br><span class=\"line\">\tgit mergetool</span><br><span class=\"line\">说明：--local指只在当前操作系统有效</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-8-跨团队合作\"><a href=\"#1-8-跨团队合作\" class=\"headerlink\" title=\"1.8 跨团队合作\"></a>1.8 跨团队合作</h4><p><code>代码review之后合并</code></p>\n<ul>\n<li><p><strong>适用于个人</strong></p>\n<p><strong>邀请成员</strong>:<code>Settings</code> –&gt; <code>Collaborators</code> –&gt;<code>填写用户名</code> –&gt;<code>打开链接接受邀请</code></p>\n</li>\n<li><p><strong>企业</strong>   <code>创建一个组织</code> <code>方便管理</code></p>\n</li>\n<li><p><strong>review</strong></p>\n<p><code>组织做review</code>  <code>通过Pull request</code></p>\n</li>\n<li><p><strong>给开源社区共享代码</strong></p>\n<p><code>点击别人仓库的fork 到自己的仓库</code>   – &gt; <code>然后clone下来 修改后推送到远程库</code>  –&gt; <code>点击Pull Request请求</code> –&gt; <code>Create pull request发消息</code></p>\n</li>\n</ul>\n<h4 id=\"1-9-Tag标签\"><a href=\"#1-9-Tag标签\" class=\"headerlink\" title=\"1.9 Tag标签\"></a>1.9 Tag标签</h4><p><code>为了清晰的版本管理，公司一般不会直接使用commit提交</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;版本介绍&#x27;   #创建本地tag信息</span><br><span class=\"line\">git tag -d v1.0    \t\t#删除tag</span><br><span class=\"line\">git push origin --tags   #将本地tag信息推送到远程库</span><br><span class=\"line\">git pull origin --tags    #拉取到本地</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v.10    #切换tag</span><br><span class=\"line\">git clone -b v0.1 地址   #指定tag下载代码</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"1-10-SSH-免密登录\"><a href=\"#1-10-SSH-免密登录\" class=\"headerlink\" title=\"1.10 SSH 免密登录\"></a>1.10 SSH 免密登录</h4><ul>\n<li>输入:<code>ssh-keygen -t rsa -C GitHub邮箱地址</code>  </li>\n<li>进入<code>.ssh</code>目录，复制<code>id_rsa.pub</code>文件内容</li>\n<li>登录GitHub。<code>Settings</code>  –&gt; <code>SSH and GPG keys </code> –&gt; <code>New SSH Key    </code></li>\n<li>回到git通过ssh地址创建。<code>git remote add 别名 SSH地址  </code></li>\n</ul>\n<h2 id=\"Git工作流\"><a href=\"#Git工作流\" class=\"headerlink\" title=\"Git工作流\"></a>Git工作流</h2><h4 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在项目开发过程中使用Git的方式</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-分类\"><a href=\"#1-2-分类\" class=\"headerlink\" title=\"1.2 分类\"></a>1.2 分类</h4><h5 id=\"1-2-1-集中式工作流\"><a href=\"#1-2-1-集中式工作流\" class=\"headerlink\" title=\"1.2.1 集中式工作流\"></a>1.2.1 集中式工作流</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像SVN一样，集中式工作流有一个中央仓库，所有的修改都提交到了Master分支上</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-2-GitFlow工作流\"><a href=\"#1-2-2-GitFlow工作流\" class=\"headerlink\" title=\"1.2.2 GitFlow工作流 *\"></a>1.2.2 GitFlow工作流 <code>*</code></h5><p>主干分支<code>master</code>  开发分支<code>develop</code>  修复分支<code>hotfix</code>   预发布分支<code>release</code>  功能分支<code>feature</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitFlow 有独立的分支，让发布迭代过程更流畅。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-3-Forking-工作流\"><a href=\"#1-2-3-Forking-工作流\" class=\"headerlink\" title=\"1.2.3 Forking 工作流\"></a>1.2.3 Forking 工作流</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 GitFlow 基础上， 充分利用了 Git 的 Fork 和 pull request 的功能以达到代码审核的目的。 </span><br><span class=\"line\">安全可靠地管理大团队的开发者</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Git基本理论（重要）\"><a href=\"#Git基本理论（重要）\" class=\"headerlink\" title=\"Git基本理论（重要）\"></a>Git基本理论（重要）</h2><h3 id=\"1-1-三个区域\"><a href=\"#1-1-三个区域\" class=\"headerlink\" title=\"1.1 三个区域\"></a>1.1 三个区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713150522.png\"></p>\n<ul>\n<li>Workspace：工作区，就是你平时存放项目代码的地方</li>\n<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713150624.png\"></p>\n<ul>\n<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\n<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\n<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\n<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\n<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\n<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\n</ul>\n<h3 id=\"1-2-工作流程\"><a href=\"#1-2-工作流程\" class=\"headerlink\" title=\"1.2 工作流程\"></a>1.2 工作流程</h3><p>git的工作流程一般是这样的：</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；</p>\n<p>３、将暂存区域的文件提交到git仓库。</p>\n<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713151058.png\"></p>\n<h3 id=\"1-3-文件的四种状态\"><a href=\"#1-3-文件的四种状态\" class=\"headerlink\" title=\"1.3 文件的四种状态\"></a>1.3 文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<ul>\n<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>\n<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>\n<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>\n<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>\n</ul>\n<h2 id=\"总结-详细\"><a href=\"#总结-详细\" class=\"headerlink\" title=\"总结(详细)\"></a>总结(详细)</h2><h3 id=\"1-1-新建代码库\"><a href=\"#1-1-新建代码库\" class=\"headerlink\" title=\"1.1 新建代码库\"></a>1.1 新建代码库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-配置\"><a href=\"#1-2-配置\" class=\"headerlink\" title=\"1.2 配置\"></a>1.2 配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">&quot;[name]&quot;</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-3-增加-删除文件\"><a href=\"#1-3-增加-删除文件\" class=\"headerlink\" title=\"1.3 增加/删除文件\"></a>1.3 增加/删除文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-4-代码提交\"><a href=\"#1-4-代码提交\" class=\"headerlink\" title=\"1.4 代码提交\"></a>1.4 代码提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-5分支\"><a href=\"#1-5分支\" class=\"headerlink\" title=\"1.5分支\"></a>1.5分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-6-标签\"><a href=\"#1-6-标签\" class=\"headerlink\" title=\"1.6 标签\"></a>1.6 标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-7-远程同步\"><a href=\"#1-7-远程同步\" class=\"headerlink\" title=\"1.7 远程同步\"></a>1.7 远程同步</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-8-撤销\"><a href=\"#1-8-撤销\" class=\"headerlink\" title=\"1.8 撤销\"></a>1.8 撤销</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<p>参考链接：</p>\n<p><code>https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ </code></p>\n<p><code>http://www.cpengx.cn/p/554.html</code></p>\n<p><code>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</code></p>\n<br>\n\n<br>\n\n<p>愿你的坚持总有收获</p>\n","more":"<h2 id=\"Git命令行操作\"><a href=\"#Git命令行操作\" class=\"headerlink\" title=\"Git命令行操作\"></a>Git命令行操作</h2><h3 id=\"1-1本地库初始化\"><a href=\"#1-1本地库初始化\" class=\"headerlink\" title=\"1.1本地库初始化\"></a>1.1本地库初始化</h3><p><code>进入文件夹</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">注意：生成的 .git 目录中存放的是本地库相关文件，不要删除</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2设置签名\"><a href=\"#1-2设置签名\" class=\"headerlink\" title=\"1.2设置签名\"></a>1.2设置签名</h3><ul>\n<li><p>项目(仓库)级别<code>仅在当前本地库有效</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name tom  #设置用户名tom</span><br><span class=\"line\">git config user.email liu@qq.com #设置用户邮箱</span><br></pre></td></tr></table></figure></li>\n<li><p>系统用户级别<code>仅在当前登录的操作系统用户有效</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name tom</span><br><span class=\"line\">git config --global user.email liu@qq.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>仅仅加了一个 <code>--global</code></p>\n<p>优先级别：<code>项目级别</code>  &gt;  <code>系统级别</code></p>\n<p>信息保存位置：<code>~/.gitconfig 文件</code>   </p>\n</blockquote>\n<h3 id=\"1-3基本操作\"><a href=\"#1-3基本操作\" class=\"headerlink\" title=\"1.3基本操作\"></a>1.3基本操作</h3><h4 id=\"1-3-1-状态查看\"><a href=\"#1-3-1-状态查看\" class=\"headerlink\" title=\"1.3.1 状态查看\"></a>1.3.1 状态查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status   #查看工作区、暂存区状态</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-添加\"><a href=\"#1-3-2-添加\" class=\"headerlink\" title=\"1.3.2 添加\"></a>1.3.2 添加</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add fileName  #指定文件</span><br><span class=\"line\">git add . #所有</span><br><span class=\"line\">说明：将工作区的文件添加到暂存区</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-3-提交\"><a href=\"#1-3-3-提交\" class=\"headerlink\" title=\"1.3.3 提交\"></a>1.3.3 提交</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &#x27;commit message&#x27; fileName</span><br><span class=\"line\">说明：将暂存区内容提交到本地库</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-4-查看历史记录\"><a href=\"#1-3-4-查看历史记录\" class=\"headerlink\" title=\"1.3.4 查看历史记录\"></a>1.3.4 查看历史记录</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log </span><br><span class=\"line\">git reflog  #常用 显示当前分支的最近几次提交</span><br><span class=\"line\">git log --graph #图形显示,更直观</span><br><span class=\"line\">git log --pretty=oneline #漂亮一行显示</span><br><span class=\"line\">git log --oneline #简洁显示</span><br><span class=\"line\">说明：HEAD@&#123;移动到当前版本需要多少步&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-5-前进后退\"><a href=\"#1-3-5-前进后退\" class=\"headerlink\" title=\"1.3.5 前进后退\"></a>1.3.5 前进后退</h4><p><img src=\"https://qny.aqingya.cn/img/20200713145647.png\"></p>\n<h4 id=\"1-3-6-reset的三个参数比较\"><a href=\"#1-3-6-reset的三个参数比较\" class=\"headerlink\" title=\"1.3.6 reset的三个参数比较\"></a>1.3.6 reset的三个参数比较</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soft: </span><br><span class=\"line\">  - 仅本地库移动HEAD 指针</span><br><span class=\"line\">mixed:</span><br><span class=\"line\">  - 在本地库移动HEAD指针</span><br><span class=\"line\">  - 重置暂存区</span><br><span class=\"line\">hard:</span><br><span class=\"line\">  - 在本地库移动HEAD指针</span><br><span class=\"line\">  - 重置暂存区</span><br><span class=\"line\">  - 重置工作区</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本.</p>\n</blockquote>\n<p>为了更好地理解git reset，我们来回顾一下,Git的版本管理及HEAD的理解</p>\n<blockquote>\n<p>Git的所有提交，会连成一条时间轴线，这就是分支。如果当前分支是master，HEAD指针一般指向当前分支，如下：</p>\n</blockquote>\n<p><img src=\"https://qny.aqingya.cn/img/20200713145925.png\"></p>\n<p>假设执行git reset，回退到版本二之后，版本三不见了哦,如下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713150001.png\"></p>\n<h4 id=\"1-3-7-删除文件并找回\"><a href=\"#1-3-7-删除文件并找回\" class=\"headerlink\" title=\"1.3.7　删除文件并找回\"></a>1.3.7　删除文件并找回</h4><ul>\n<li><strong>相当于建立一个快照，虽然删除了，但只要添加到暂存区，就能找回</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 指针位置</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-8-文件差异比较\"><a href=\"#1-3-8-文件差异比较\" class=\"headerlink\" title=\"1.3.8 文件差异比较\"></a>1.3.8 文件差异比较</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff 文件名</span><br><span class=\"line\">git diff 哈希值 文件名  #和历史中的一个版本比较</span><br><span class=\"line\">git diff  #不带文件名，则比较多个文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-9-git-stash\"><a href=\"#1-3-9-git-stash\" class=\"headerlink\" title=\"1.3.9 git stash\"></a>1.3.9 git stash</h4><p>stash命令可用于临时保存和恢复修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash  把当前的工作隐藏起来 等以后恢复现场后继续工作 </span><br><span class=\"line\">git stash list 显示保存的工作进度列表 </span><br><span class=\"line\">git stash pop stash@&#123;num&#125; 恢复工作进度到工作区 </span><br><span class=\"line\">git stash show ：显示做了哪些改动 </span><br><span class=\"line\">git stash drop stash@&#123;num&#125; ：删除一条保存的工作进度 </span><br><span class=\"line\">git stash clear 删除所有缓存的stash。 复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-分支管理\"><a href=\"#2-2-分支管理\" class=\"headerlink\" title=\"2.2 分支管理\"></a>2.2 分支管理</h3><p><code>hot_fix</code> <code>master</code> <code>feature_x</code> <code>feature_y</code></p>\n<h4 id=\"2-2-1-什么是分支管理\"><a href=\"#2-2-1-什么是分支管理\" class=\"headerlink\" title=\"2.2.1 什么是分支管理\"></a>2.2.1 什么是分支管理</h4><ul>\n<li>在版本控制中，使用推进多个任务</li>\n</ul>\n<h4 id=\"2-2-2-分支的好处\"><a href=\"#2-2-2-分支的好处\" class=\"headerlink\" title=\"2.2.2 分支的好处\"></a>2.2.2 分支的好处</h4><ul>\n<li>同时并行推进多个功能开发，提高开发效率</li>\n<li>某一分支开发失败，不会对其它分支有任何影响</li>\n</ul>\n<h4 id=\"2-2-3-分支操作\"><a href=\"#2-2-3-分支操作\" class=\"headerlink\" title=\"2.2.3 分支操作\"></a>2.2.3 分支操作</h4><ul>\n<li>创建分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br><span class=\"line\">git branch -v </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br><span class=\"line\">git checkout -b 分支名   #创建分支并直接切换到该分支</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>合并分支<code>相当于把修改了的文件拉过来</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge xxx</span><br><span class=\"line\">注意：合并分支的时候要明确谁谁合并</span><br><span class=\"line\">\t我在a分支里面修改了。要合并到master，就先切换到master，然后合并b</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除分支</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-2-4-解决冲突\"><a href=\"#2-2-4-解决冲突\" class=\"headerlink\" title=\"2.2.4 解决冲突\"></a>2.2.4 解决冲突</h4><ul>\n<li>冲突的表现</li>\n<li>冲突的解决<ul>\n<li>第一步：编辑，删除特殊标记<code>&lt;&lt;&lt;</code> <code>===</code></li>\n<li>第二步：修改到满意位置，保存退出</li>\n<li>第三步：添加到缓存区  <code>git  add 文件名</code></li>\n<li>第四步：提交到本地库<code>git commit -m &#39;日志信息&#39; </code>  <code>注意：后面一定不能带文件名</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Git-结合Github\"><a href=\"#Git-结合Github\" class=\"headerlink\" title=\"Git 结合Github\"></a>Git 结合Github</h2><br>\n\n<p><strong>创建一个新的存储库</strong></p>\n<blockquote>\n<p>git init<br>git add .<br>git commit -m “first commit”<br>git branch -M master<br>git remote add origin <a href=\"https://github.com/wuz/XiaMi-Shop.git\">https://github.com/wuz/XiaMi-Shop.git</a><br>git push -u origin master</p>\n</blockquote>\n<p><strong>已经有仓库</strong></p>\n<blockquote>\n<p>git remote add origin <a href=\"https://github.com/wuz/XiaMi-Shop.git\">https://github.com/wuz/XiaMi-Shop.git</a><br>git branch -M master<br>git push -u origin master</p>\n</blockquote>\n<br>\n\n<p><code>别分手</code>  <code>别名 分支名</code></p>\n<h4 id=\"1-1-创建远程库地址别名\"><a href=\"#1-1-创建远程库地址别名\" class=\"headerlink\" title=\"1.1 创建远程库地址别名\"></a>1.1 创建远程库地址别名</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v  #查看远程地址别名</span><br><span class=\"line\">git remote add 别名 远程地址 </span><br><span class=\"line\">例子：git remote add origin https://xx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-推送\"><a href=\"#1-2-推送\" class=\"headerlink\" title=\"1.2 推送\"></a>1.2 推送</h4><p><code>开发修改完把本地库的文件推送到远程仓库</code> <code>前提是提交到了本地库才可以推送</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push 别名 分支名</span><br><span class=\"line\">git push -u 别名 分支名    #-u指定默认主机</span><br><span class=\"line\">例子：git push origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-克隆\"><a href=\"#1-3-克隆\" class=\"headerlink\" title=\"1.3 克隆\"></a>1.3 克隆</h4><p><code>完整的把远程库克隆到本地</code>  <code>克隆下来后不要在主分支里面做开发</code> <code>clone进行一次，从无到有的过程，更新用pull</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone  远程地址</span><br><span class=\"line\">例子：git clone https://xx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-拉取\"><a href=\"#1-4-拉取\" class=\"headerlink\" title=\"1.4 拉取\"></a>1.4 拉取</h4><p>  <code>本地存在clone下来的文件  就用pull更新</code>  </p>\n<p><strong>注意：</strong> <span style=\"background-color:yellow\">如果你提交成功下班后：同事也向该远程仓库提交了新的内容。第二天上班时，你需要拉去线上的仓库的最新版本。</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pull = fetch + merge</span><br><span class=\"line\">\tgit fetch 别名 分支名</span><br><span class=\"line\">\tgit merge 别名 分支名</span><br><span class=\"line\">git pull 别名 分支名</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"background-color:yellow\">因此在每天工作的第一件事就是git pull 拉取线上的最新版本，下班要做的就是 git push，将本地代码提交到线上仓库。</span></p>\n<h4 id=\"1-5-解决冲突\"><a href=\"#1-5-解决冲突\" class=\"headerlink\" title=\"1.5 解决冲突\"></a>1.5 解决冲突</h4><p><code>注意：解决冲突后的提交是不能带文件名的</code></p>\n<p><code>如果不是基于远程库最新版做的修改不能推送，必须先pull下来安装冲突办法解决</code></p>\n<h4 id=\"1-6-rebase\"><a href=\"#1-6-rebase\" class=\"headerlink\" title=\"1.6 rebase\"></a>1.6 rebase</h4><p>rebase又称为衍合，是合并的另外一种选择。</p>\n<p>假设有两个分支master和test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D---E test       /  A---B---C---F--- master 复制代码</span><br></pre></td></tr></table></figure>\n\n<p>执行 git merge test得到的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D--------E       /          \\  A---B---C---F----G---   test, master 复制代码</span><br></pre></td></tr></table></figure>\n\n<p>执行git rebase test，得到的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A---B---D---E---C‘---F‘---   test, master 复制代码</span><br></pre></td></tr></table></figure>\n\n<p><strong>rebase好处是：</strong> 获得更优雅的提交树，可以线性的看到每一次提交，并且没有增加提交节点。所以很多时候，看到有些伙伴都是这个命令拉代码：git pull –rebase</p>\n<h4 id=\"1-7-beyond-compare\"><a href=\"#1-7-beyond-compare\" class=\"headerlink\" title=\"1.7 beyond compare\"></a>1.7 beyond compare</h4><p><code>用软件解决冲突</code> </p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.安装 ：</span><br><span class=\"line\">\tbeyond compare </span><br><span class=\"line\">2.配置：</span><br><span class=\"line\">    git config --local merge.tool bc3  #合并名称</span><br><span class=\"line\">    git config --local mergetool.path &#x27;/usr/local/bin/bcomp&#x27; #软件路径</span><br><span class=\"line\">    git config --local mergetool.keepBackup false  #False不用保存备份</span><br><span class=\"line\">3.应用：</span><br><span class=\"line\">\tgit mergetool</span><br><span class=\"line\">说明：--local指只在当前操作系统有效</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-8-跨团队合作\"><a href=\"#1-8-跨团队合作\" class=\"headerlink\" title=\"1.8 跨团队合作\"></a>1.8 跨团队合作</h4><p><code>代码review之后合并</code></p>\n<ul>\n<li><p><strong>适用于个人</strong></p>\n<p><strong>邀请成员</strong>:<code>Settings</code> –&gt; <code>Collaborators</code> –&gt;<code>填写用户名</code> –&gt;<code>打开链接接受邀请</code></p>\n</li>\n<li><p><strong>企业</strong>   <code>创建一个组织</code> <code>方便管理</code></p>\n</li>\n<li><p><strong>review</strong></p>\n<p><code>组织做review</code>  <code>通过Pull request</code></p>\n</li>\n<li><p><strong>给开源社区共享代码</strong></p>\n<p><code>点击别人仓库的fork 到自己的仓库</code>   – &gt; <code>然后clone下来 修改后推送到远程库</code>  –&gt; <code>点击Pull Request请求</code> –&gt; <code>Create pull request发消息</code></p>\n</li>\n</ul>\n<h4 id=\"1-9-Tag标签\"><a href=\"#1-9-Tag标签\" class=\"headerlink\" title=\"1.9 Tag标签\"></a>1.9 Tag标签</h4><p><code>为了清晰的版本管理，公司一般不会直接使用commit提交</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;版本介绍&#x27;   #创建本地tag信息</span><br><span class=\"line\">git tag -d v1.0    \t\t#删除tag</span><br><span class=\"line\">git push origin --tags   #将本地tag信息推送到远程库</span><br><span class=\"line\">git pull origin --tags    #拉取到本地</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout v.10    #切换tag</span><br><span class=\"line\">git clone -b v0.1 地址   #指定tag下载代码</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"1-10-SSH-免密登录\"><a href=\"#1-10-SSH-免密登录\" class=\"headerlink\" title=\"1.10 SSH 免密登录\"></a>1.10 SSH 免密登录</h4><ul>\n<li>输入:<code>ssh-keygen -t rsa -C GitHub邮箱地址</code>  </li>\n<li>进入<code>.ssh</code>目录，复制<code>id_rsa.pub</code>文件内容</li>\n<li>登录GitHub。<code>Settings</code>  –&gt; <code>SSH and GPG keys </code> –&gt; <code>New SSH Key    </code></li>\n<li>回到git通过ssh地址创建。<code>git remote add 别名 SSH地址  </code></li>\n</ul>\n<h2 id=\"Git工作流\"><a href=\"#Git工作流\" class=\"headerlink\" title=\"Git工作流\"></a>Git工作流</h2><h4 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在项目开发过程中使用Git的方式</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-分类\"><a href=\"#1-2-分类\" class=\"headerlink\" title=\"1.2 分类\"></a>1.2 分类</h4><h5 id=\"1-2-1-集中式工作流\"><a href=\"#1-2-1-集中式工作流\" class=\"headerlink\" title=\"1.2.1 集中式工作流\"></a>1.2.1 集中式工作流</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像SVN一样，集中式工作流有一个中央仓库，所有的修改都提交到了Master分支上</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-2-GitFlow工作流\"><a href=\"#1-2-2-GitFlow工作流\" class=\"headerlink\" title=\"1.2.2 GitFlow工作流 *\"></a>1.2.2 GitFlow工作流 <code>*</code></h5><p>主干分支<code>master</code>  开发分支<code>develop</code>  修复分支<code>hotfix</code>   预发布分支<code>release</code>  功能分支<code>feature</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitFlow 有独立的分支，让发布迭代过程更流畅。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-2-3-Forking-工作流\"><a href=\"#1-2-3-Forking-工作流\" class=\"headerlink\" title=\"1.2.3 Forking 工作流\"></a>1.2.3 Forking 工作流</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 GitFlow 基础上， 充分利用了 Git 的 Fork 和 pull request 的功能以达到代码审核的目的。 </span><br><span class=\"line\">安全可靠地管理大团队的开发者</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Git基本理论（重要）\"><a href=\"#Git基本理论（重要）\" class=\"headerlink\" title=\"Git基本理论（重要）\"></a>Git基本理论（重要）</h2><h3 id=\"1-1-三个区域\"><a href=\"#1-1-三个区域\" class=\"headerlink\" title=\"1.1 三个区域\"></a>1.1 三个区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713150522.png\"></p>\n<ul>\n<li>Workspace：工作区，就是你平时存放项目代码的地方</li>\n<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713150624.png\"></p>\n<ul>\n<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\n<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\n<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\n<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\n<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\n<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\n</ul>\n<h3 id=\"1-2-工作流程\"><a href=\"#1-2-工作流程\" class=\"headerlink\" title=\"1.2 工作流程\"></a>1.2 工作流程</h3><p>git的工作流程一般是这样的：</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；</p>\n<p>３、将暂存区域的文件提交到git仓库。</p>\n<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200713151058.png\"></p>\n<h3 id=\"1-3-文件的四种状态\"><a href=\"#1-3-文件的四种状态\" class=\"headerlink\" title=\"1.3 文件的四种状态\"></a>1.3 文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<ul>\n<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>\n<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>\n<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>\n<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>\n</ul>\n<h2 id=\"总结-详细\"><a href=\"#总结-详细\" class=\"headerlink\" title=\"总结(详细)\"></a>总结(详细)</h2><h3 id=\"1-1-新建代码库\"><a href=\"#1-1-新建代码库\" class=\"headerlink\" title=\"1.1 新建代码库\"></a>1.1 新建代码库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-配置\"><a href=\"#1-2-配置\" class=\"headerlink\" title=\"1.2 配置\"></a>1.2 配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">&quot;[name]&quot;</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-3-增加-删除文件\"><a href=\"#1-3-增加-删除文件\" class=\"headerlink\" title=\"1.3 增加/删除文件\"></a>1.3 增加/删除文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-4-代码提交\"><a href=\"#1-4-代码提交\" class=\"headerlink\" title=\"1.4 代码提交\"></a>1.4 代码提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-5分支\"><a href=\"#1-5分支\" class=\"headerlink\" title=\"1.5分支\"></a>1.5分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-6-标签\"><a href=\"#1-6-标签\" class=\"headerlink\" title=\"1.6 标签\"></a>1.6 标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-7-远程同步\"><a href=\"#1-7-远程同步\" class=\"headerlink\" title=\"1.7 远程同步\"></a>1.7 远程同步</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-8-撤销\"><a href=\"#1-8-撤销\" class=\"headerlink\" title=\"1.8 撤销\"></a>1.8 撤销</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<br>\n\n<br>\n\n<p>参考链接：</p>\n<p><code>https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ </code></p>\n<p><code>http://www.cpengx.cn/p/554.html</code></p>\n<p><code>http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</code></p>\n<br>\n\n<br>\n\n<p>愿你的坚持总有收获</p>\n","categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}