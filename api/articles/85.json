{"title":"前端面试100题","slug":"85","date":"2020-08-12T06:30:18.000Z","updated":"2022-07-29T04:22:04.755Z","comments":true,"path":"api/articles/85.json","excerpt":" [Figure] ","covers":["https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.2/photo/IMG_0051.JPG","https://qny.aqingya.cn/img/20200812135235.png"],"content":"<p><img src=\"https://cdn.jsdelivr.net/gh/wuzhiguang1/bolgfile@1.2/photo/IMG_0051.JPG\"></p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"前端面试100题\"><a href=\"#前端面试100题\" class=\"headerlink\" title=\"前端面试100题\"></a>前端面试100题</h1><h2 id=\"1、介绍一下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？\"><a href=\"#1、介绍一下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？\" class=\"headerlink\" title=\"1、介绍一下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？\"></a>1、介绍一下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</h2><p>当我们输入 npm install 的时候，虽然没有在后面加模块名，它会自动去 package.json 中去寻找，我们之前安装过的 依赖项，然后把这些依赖项安装。</p>\n<br>\n\n<h2 id=\"2-、连等赋值\"><a href=\"#2-、连等赋值\" class=\"headerlink\" title=\"2 、连等赋值\"></a>2 、连等赋值</h2><p>输出一下代码的执行结果，并解释为什么</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">n</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a.x = a = &#123;<span class=\"attr\">n</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x)  <span class=\"comment\">//&#123;n:2&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这道题考的就是我们对连等赋值的理解。</p>\n<p><span style=\"color:red\"><strong>连等开始之前，程序会把所有引用都保存下来，连等的过程中，这些值是不变的，等到连等都完事了，再一块变</strong>。</span></p>\n<p>我们来看一下这个图：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200812135235.png\"></p>\n<p>① a 指向 了{n:1}</p>\n<p>② b 等于 a ，则b的内存也指向了 {n:1}</p>\n<p>③ 这是连等赋值，连等开始之前，程序会把所有引用都保存下来，连等的过程中，这些值是不变的，等到连等都完事了，再一块变，程序从右往左，先看<code>a = &#123;n:2&#125;</code> 也就是如图的③.1 ，a 指向了 {n:2}，</p>\n<p>但是由于是连等赋值，此时 a 还是保持这对 {n:1} 的引用。然后再看 <code>a.x = a</code> 也就是如图的 ③.2 , 在a引用的内存地址中 添加一个 x 属性，并赋值为 {n:2}。再然后 如图③.3 等到整个语句完成后,a不再指向{n:1}，而指向了 {n:2}。</p>\n<p>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined    //因为a没有x属性</p>\n<p>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p>\n<br>\n\n<p>另一种解释：</p>\n<p>1.首先，这个问题最关键的是连等赋值本身的行为，用最简单的话说。连等，会让所有变量都变成最右边的值，这是基础。</p>\n<p><code>a=b=c=value</code></p>\n<p>2.那么问题来了——这句话，到底计算机是怎么理解的<br><code>a.x = a = &#123;n: 2&#125;;</code></p>\n<p>3.这里的重点是a.x到底是谁</p>\n<p>简单来说，在赋值过程开始时，a其实是{n:1}</p>\n<p><code>a.x=a=&#123;n:2&#125;</code><br>其实在计算机眼中是长成这样的：<br><code>&#123;n:1&#125;.x=a=&#123;n:2&#125;</code></p>\n<p>4.所以，这个赋值发生了两件事</p>\n<p>//1.把”a”变成了{n:2}<br>//2.把{n:1}的x变成了{n:2}——————–</p>\n<p>也就是说：<br><code>a.x = a = &#123;n: 2&#125;;</code><br>其实被计算机执行成了<br><code>&#123;n:1&#125;.x=&#123;n: 2&#125;;</code><br><code>a=&#123;n: 2&#125;;</code></p>\n<p>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined    //因为a没有x属性</p>\n<p>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p>\n<p><br><br></p>\n<h2 id=\"3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？\"><a href=\"#3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？\" class=\"headerlink\" title=\"3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？\"></a>3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？</h2><p>回答： 完全一样</p>\n<p>解释： 数组是随机访问的。数组在内存中是一段连续内存空间，实际上你只要知道首地址和偏移量，首地址就是Arrary本身，偏移量就是下标。两者一相加就是我们要找的位置。实际上数组的寻址操作是一样的，无论是加1也好还是加1000000也罢，cup计算加法是完全一样的。</p>\n<br>\n\n<h2 id=\"4、使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果。\"><a href=\"#4、使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果。\" class=\"headerlink\" title=\"4、使用 sort() 对数组 [3,15,8,29,102,22] 进行排序，输出结果。\"></a>4、使用 sort() 对数组 [3,15,8,29,102,22] 进行排序，输出结果。</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">8</span>, <span class=\"number\">29</span>, <span class=\"number\">102</span>, <span class=\"number\">22</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//方法一</span></span><br><span class=\"line\">   arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n1, n2</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (n1 &gt; n2) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n1 &lt; n2) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"><span class=\"comment\">//方法二，简便写法</span></span><br><span class=\"line\">   arr.sort(<span class=\"function\">(<span class=\"params\">n1, n2</span>) =&gt;</span> n1 - n2)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(arr);                      <span class=\"comment\">//[3, 8, 15, 22, 29, 102]</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"5-、实现一个-sleep-函数-比如-sleep（1000）-意味着-等待1000毫秒，可以从Promist、Generator、Async-Await-等角度实现。\"><a href=\"#5-、实现一个-sleep-函数-比如-sleep（1000）-意味着-等待1000毫秒，可以从Promist、Generator、Async-Await-等角度实现。\" class=\"headerlink\" title=\"5 、实现一个 sleep 函数 比如 sleep（1000） 意味着 等待1000毫秒，可以从Promist、Generator、Async/Await 等角度实现。\"></a>5 、实现一个 sleep 函数 比如 sleep（1000） 意味着 等待1000毫秒，可以从Promist、Generator、Async/Await 等角度实现。</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(resolve,ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)      <span class=\"comment\">//两秒之后出现222</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"6、-（携程）算法手写题-已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。\"><a href=\"#6、-（携程）算法手写题-已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。\" class=\"headerlink\" title=\"6、 （携程）算法手写题 已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。\"></a>6、 （携程）算法手写题 已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。</h2><blockquote>\n<p>  let arr = [</p>\n<p>   [1, 2, 2],</p>\n<p>   [3, 4, 5, 5],</p>\n<p>   [6, 7, 8, 9, [11, 12, [12, 13, [14]]], 10]</p>\n<p>  ]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">  [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>]]], <span class=\"number\">10</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">flat(arr);</span><br><span class=\"line\"><span class=\"comment\">// 扁平化+去重</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flat</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arr[i] == <span class=\"string\">&#x27;number&#x27;</span>) &#123;        <span class=\"comment\">//去重</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!json[arr[i]]) &#123;</span><br><span class=\"line\">        result.push(arr[i]);</span><br><span class=\"line\">        json[arr[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      flat(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 排序1</span></span><br><span class=\"line\">result.sort(<span class=\"function\">(<span class=\"params\">n1, n2</span>) =&gt;</span> n1 - n2)</span><br><span class=\"line\"><span class=\"comment\">// 手写排序</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; result.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result[j] &lt; result[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmp = result[j];</span><br><span class=\"line\">      result[j] = result[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">      result[j - <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);       <span class=\"comment\">//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"7、（滴滴，饿了么）写React-Vue-项目时为什么要在列表组件中写key-，其作用是什么？\"><a href=\"#7、（滴滴，饿了么）写React-Vue-项目时为什么要在列表组件中写key-，其作用是什么？\" class=\"headerlink\" title=\"7、（滴滴，饿了么）写React / Vue 项目时为什么要在列表组件中写key ，其作用是什么？\"></a>7、（滴滴，饿了么）写React / Vue 项目时为什么要在列表组件中写key ，其作用是什么？</h2><p><a href=\"https://aqingya.cn/articl/574b84c1.html\">传送门</a></p>\n<p>一、vue中列表循环需加 :key=”唯一标识” 唯一标识可以是item里面id index等，因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好的区别各个组件 key的作用主要是为了高效的更新虚拟DOM 。</p>\n<p>二、避免一些奇怪的问题，当我们数据比较复杂的时候，如果不加key，可能会出现一条数据被渲染了两次，或者我们已经删除某数据，但是该数据的节点还在。</p>\n<p>三、比如我们在做动画的时候，需要进行强制刷新，我们会更改key值，这样它就会认为我的数据已经改了，就会进行刷新。</p>\n<p><br><br><br></p>\n<hr>\n<p>持续更新中。。。</p>\n<p><br><br><br></p>\n","more":"<h1 id=\"前端面试100题\"><a href=\"#前端面试100题\" class=\"headerlink\" title=\"前端面试100题\"></a>前端面试100题</h1><h2 id=\"1、介绍一下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？\"><a href=\"#1、介绍一下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？\" class=\"headerlink\" title=\"1、介绍一下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？\"></a>1、介绍一下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</h2><p>当我们输入 npm install 的时候，虽然没有在后面加模块名，它会自动去 package.json 中去寻找，我们之前安装过的 依赖项，然后把这些依赖项安装。</p>\n<br>\n\n<h2 id=\"2-、连等赋值\"><a href=\"#2-、连等赋值\" class=\"headerlink\" title=\"2 、连等赋值\"></a>2 、连等赋值</h2><p>输出一下代码的执行结果，并解释为什么</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">n</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">a.x = a = &#123;<span class=\"attr\">n</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x)  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x)  <span class=\"comment\">//&#123;n:2&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这道题考的就是我们对连等赋值的理解。</p>\n<p><span style=\"color:red\"><strong>连等开始之前，程序会把所有引用都保存下来，连等的过程中，这些值是不变的，等到连等都完事了，再一块变</strong>。</span></p>\n<p>我们来看一下这个图：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200812135235.png\"></p>\n<p>① a 指向 了{n:1}</p>\n<p>② b 等于 a ，则b的内存也指向了 {n:1}</p>\n<p>③ 这是连等赋值，连等开始之前，程序会把所有引用都保存下来，连等的过程中，这些值是不变的，等到连等都完事了，再一块变，程序从右往左，先看<code>a = &#123;n:2&#125;</code> 也就是如图的③.1 ，a 指向了 {n:2}，</p>\n<p>但是由于是连等赋值，此时 a 还是保持这对 {n:1} 的引用。然后再看 <code>a.x = a</code> 也就是如图的 ③.2 , 在a引用的内存地址中 添加一个 x 属性，并赋值为 {n:2}。再然后 如图③.3 等到整个语句完成后,a不再指向{n:1}，而指向了 {n:2}。</p>\n<p>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined    //因为a没有x属性</p>\n<p>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p>\n<br>\n\n<p>另一种解释：</p>\n<p>1.首先，这个问题最关键的是连等赋值本身的行为，用最简单的话说。连等，会让所有变量都变成最右边的值，这是基础。</p>\n<p><code>a=b=c=value</code></p>\n<p>2.那么问题来了——这句话，到底计算机是怎么理解的<br><code>a.x = a = &#123;n: 2&#125;;</code></p>\n<p>3.这里的重点是a.x到底是谁</p>\n<p>简单来说，在赋值过程开始时，a其实是{n:1}</p>\n<p><code>a.x=a=&#123;n:2&#125;</code><br>其实在计算机眼中是长成这样的：<br><code>&#123;n:1&#125;.x=a=&#123;n:2&#125;</code></p>\n<p>4.所以，这个赋值发生了两件事</p>\n<p>//1.把”a”变成了{n:2}<br>//2.把{n:1}的x变成了{n:2}——————–</p>\n<p>也就是说：<br><code>a.x = a = &#123;n: 2&#125;;</code><br>其实被计算机执行成了<br><code>&#123;n:1&#125;.x=&#123;n: 2&#125;;</code><br><code>a=&#123;n: 2&#125;;</code></p>\n<p>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined    //因为a没有x属性</p>\n<p>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p>\n<p><br><br></p>\n<h2 id=\"3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？\"><a href=\"#3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？\" class=\"headerlink\" title=\"3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？\"></a>3、数组里面有10万个数据，取第一个元素和第10万个元素的事件相差多少？</h2><p>回答： 完全一样</p>\n<p>解释： 数组是随机访问的。数组在内存中是一段连续内存空间，实际上你只要知道首地址和偏移量，首地址就是Arrary本身，偏移量就是下标。两者一相加就是我们要找的位置。实际上数组的寻址操作是一样的，无论是加1也好还是加1000000也罢，cup计算加法是完全一样的。</p>\n<br>\n\n<h2 id=\"4、使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果。\"><a href=\"#4、使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果。\" class=\"headerlink\" title=\"4、使用 sort() 对数组 [3,15,8,29,102,22] 进行排序，输出结果。\"></a>4、使用 sort() 对数组 [3,15,8,29,102,22] 进行排序，输出结果。</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">8</span>, <span class=\"number\">29</span>, <span class=\"number\">102</span>, <span class=\"number\">22</span>]</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//方法一</span></span><br><span class=\"line\">   arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n1, n2</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (n1 &gt; n2) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n1 &lt; n2) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"><span class=\"comment\">//方法二，简便写法</span></span><br><span class=\"line\">   arr.sort(<span class=\"function\">(<span class=\"params\">n1, n2</span>) =&gt;</span> n1 - n2)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(arr);                      <span class=\"comment\">//[3, 8, 15, 22, 29, 102]</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"5-、实现一个-sleep-函数-比如-sleep（1000）-意味着-等待1000毫秒，可以从Promist、Generator、Async-Await-等角度实现。\"><a href=\"#5-、实现一个-sleep-函数-比如-sleep（1000）-意味着-等待1000毫秒，可以从Promist、Generator、Async-Await-等角度实现。\" class=\"headerlink\" title=\"5 、实现一个 sleep 函数 比如 sleep（1000） 意味着 等待1000毫秒，可以从Promist、Generator、Async/Await 等角度实现。\"></a>5 、实现一个 sleep 函数 比如 sleep（1000） 意味着 等待1000毫秒，可以从Promist、Generator、Async/Await 等角度实现。</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(resolve,ms);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)      <span class=\"comment\">//两秒之后出现222</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"6、-（携程）算法手写题-已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。\"><a href=\"#6、-（携程）算法手写题-已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。\" class=\"headerlink\" title=\"6、 （携程）算法手写题 已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。\"></a>6、 （携程）算法手写题 已知如下数组：编写一个程序，将数组扁平化去除其中的重复数据，最终得到一个升序且不重复的数组。</h2><blockquote>\n<p>  let arr = [</p>\n<p>   [1, 2, 2],</p>\n<p>   [3, 4, 5, 5],</p>\n<p>   [6, 7, 8, 9, [11, 12, [12, 13, [14]]], 10]</p>\n<p>  ]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">  [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>]]], <span class=\"number\">10</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> json = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">flat(arr);</span><br><span class=\"line\"><span class=\"comment\">// 扁平化+去重</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flat</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arr[i] == <span class=\"string\">&#x27;number&#x27;</span>) &#123;        <span class=\"comment\">//去重</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!json[arr[i]]) &#123;</span><br><span class=\"line\">        result.push(arr[i]);</span><br><span class=\"line\">        json[arr[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      flat(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 排序1</span></span><br><span class=\"line\">result.sort(<span class=\"function\">(<span class=\"params\">n1, n2</span>) =&gt;</span> n1 - n2)</span><br><span class=\"line\"><span class=\"comment\">// 手写排序</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; result.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result[j] &lt; result[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmp = result[j];</span><br><span class=\"line\">      result[j] = result[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">      result[j - <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);       <span class=\"comment\">//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"7、（滴滴，饿了么）写React-Vue-项目时为什么要在列表组件中写key-，其作用是什么？\"><a href=\"#7、（滴滴，饿了么）写React-Vue-项目时为什么要在列表组件中写key-，其作用是什么？\" class=\"headerlink\" title=\"7、（滴滴，饿了么）写React / Vue 项目时为什么要在列表组件中写key ，其作用是什么？\"></a>7、（滴滴，饿了么）写React / Vue 项目时为什么要在列表组件中写key ，其作用是什么？</h2><p><a href=\"https://aqingya.cn/articl/574b84c1.html\">传送门</a></p>\n<p>一、vue中列表循环需加 :key=”唯一标识” 唯一标识可以是item里面id index等，因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好的区别各个组件 key的作用主要是为了高效的更新虚拟DOM 。</p>\n<p>二、避免一些奇怪的问题，当我们数据比较复杂的时候，如果不加key，可能会出现一条数据被渲染了两次，或者我们已经删除某数据，但是该数据的节点还在。</p>\n<p>三、比如我们在做动画的时候，需要进行强制刷新，我们会更改key值，这样它就会认为我的数据已经改了，就会进行刷新。</p>\n<p><br><br><br></p>\n<hr>\n<p>持续更新中。。。</p>\n<p><br><br><br></p>","categories":[{"name":"面试题","path":"api/categories/面试题.json"}],"tags":[{"name":"前端面试题","path":"api/tags/前端面试题.json"}]}