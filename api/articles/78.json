{"title":"px、em、rem区别介绍","slug":"78","date":"2020-08-03T05:24:34.000Z","updated":"2022-07-29T04:22:04.762Z","comments":true,"path":"api/articles/78.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/20200803132806.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/20200803132806.png\"></p>\n<span id=\"more\"></span>\n\n<br>\n\n<h2 id=\"PX\"><a href=\"#PX\" class=\"headerlink\" title=\"PX\"></a>PX</h2><p>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</p>\n<p><strong>PX特点</strong></p>\n<ul>\n<li>\\1. IE无法调整那些使用px作为单位的字体大小；</li>\n<li>\\2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</li>\n<li>\\3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。</li>\n</ul>\n<br>\n\n<h2 id=\"EM\"><a href=\"#EM\" class=\"headerlink\" title=\"EM\"></a>EM</h2><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p>\n<p><strong>EM特点</strong></p>\n<ul>\n<li>\\1. em的值并不是固定的；</li>\n<li>\\2. em会继承父级元素的字体大小。</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</p>\n<p>所以我们在写CSS的时候，需要注意两点：</p>\n<ul>\n<li>\\1. body选择器中声明Font-size=62.5%；</li>\n<li>\\2. 将你的原来的px数值除以10，然后换上em作为单位；</li>\n<li>\\3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。</li>\n</ul>\n<p>也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</p>\n</blockquote>\n<br>\n\n<h2 id=\"REM\"><a href=\"#REM\" class=\"headerlink\" title=\"REM\"></a>REM</h2><p>rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>; <span class=\"attribute\">font-size</span>:.<span class=\"number\">875rem</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong> 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</p>\n</blockquote>\n<br>\n\n<h2 id=\"px-与-rem-的选择？\"><a href=\"#px-与-rem-的选择？\" class=\"headerlink\" title=\"px 与 rem 的选择？\"></a>px 与 rem 的选择？</h2><p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。</p>\n<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p>\n<p><br><br><br></p>\n","more":"<br>\n\n<h2 id=\"PX\"><a href=\"#PX\" class=\"headerlink\" title=\"PX\"></a>PX</h2><p>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。</p>\n<p><strong>PX特点</strong></p>\n<ul>\n<li>\\1. IE无法调整那些使用px作为单位的字体大小；</li>\n<li>\\2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</li>\n<li>\\3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。</li>\n</ul>\n<br>\n\n<h2 id=\"EM\"><a href=\"#EM\" class=\"headerlink\" title=\"EM\"></a>EM</h2><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p>\n<p><strong>EM特点</strong></p>\n<ul>\n<li>\\1. em的值并不是固定的；</li>\n<li>\\2. em会继承父级元素的字体大小。</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</p>\n<p>所以我们在写CSS的时候，需要注意两点：</p>\n<ul>\n<li>\\1. body选择器中声明Font-size=62.5%；</li>\n<li>\\2. 将你的原来的px数值除以10，然后换上em作为单位；</li>\n<li>\\3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。</li>\n</ul>\n<p>也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</p>\n</blockquote>\n<br>\n\n<h2 id=\"REM\"><a href=\"#REM\" class=\"headerlink\" title=\"REM\"></a>REM</h2><p>rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是一个例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>; <span class=\"attribute\">font-size</span>:.<span class=\"number\">875rem</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong> 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</p>\n</blockquote>\n<br>\n\n<h2 id=\"px-与-rem-的选择？\"><a href=\"#px-与-rem-的选择？\" class=\"headerlink\" title=\"px 与 rem 的选择？\"></a>px 与 rem 的选择？</h2><p>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。</p>\n<p>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p>\n<p><br><br><br></p>","categories":[{"name":"CSS","path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","path":"api/tags/CSS.json"},{"name":"CSS3","path":"api/tags/CSS3.json"}]}