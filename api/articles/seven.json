{"title":"JavaScript基础---原型对象概念详解(仔细理解一下)","slug":"seven","date":"2020-04-15T08:26:30.000Z","updated":"2022-07-29T04:22:04.753Z","comments":true,"path":"api/articles/seven.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/7cdb4aa46fd84fe58cc7d47718ea0e97.jpg","https://img-blog.csdnimg.cn/20200415143653690.png","https://img-blog.csdnimg.cn/20200415144313404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200415150759255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200415151547307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200415151942167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200415161035450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70"],"content":"<p><img src=\"https://qny.aqingya.cn/img/7cdb4aa46fd84fe58cc7d47718ea0e97.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"对象原型\"><a href=\"#对象原型\" class=\"headerlink\" title=\"对象原型\"></a>对象原型</h2><hr>\n<p>每一个对象都有一个内置的 <strong>proto</strong> 属性指向构造它的函数prototype属性. 而构造函数的prototype.constructor 则指向构造函数本生。一个对象的属性的寻找过程由以下几个部分组成:</p>\n<ol>\n<li><strong>寻找对象属性的数据描述符(writable, value)或存取描述符(getter, setter)，如果查询到了，则返回 对应的值。如果查询不到，则进入第2步骤</strong>。</li>\n<li><strong>寻找对象属性的值是否有被显示定义 (可以通过 Object.getOwnPropertyNames)检测，如果对象属性定义了，则返回定义的值。 如果没有，则进入第3步骤</strong>。</li>\n<li><strong>寻找对象的隐藏原型__proto__对象的属性，规则同1，2步骤。如果还未找到，则重复第3步骤， 直到__proto__ 为null 为止。</strong><br></li>\n</ol>\n<hr>\n<p>&emsp;&emsp;我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">//返回一个对象[Object Obkect]</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(MyClass.prototype); <span class=\"comment\">//返回一个对象[Object Obkect]       </span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(MyClass.prototype == Person.prototype); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;每一个构造函数的prototype是惟一的，他们是不相等的。这个属性对应着一个对象，这个对象就是我们所谓的原形对象。<br>下面我们画图来分析一下：<br><img src=\"https://img-blog.csdnimg.cn/20200415143653690.png\" alt=\"在这里插入图片描述\">&emsp;&emsp;这里prototype属性就是保存原型对象的地址，在MyClass函数里有一个属性指向原型对象。</p>\n<hr>\n<p>&emsp;&emsp;如果函数作为普通函数调用prototype没有任何作用<br>&emsp;&emsp;当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的 原型对象，我们可以通过__proto__来访问该属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.__proto__); <span class=\"comment\">// 返回一个对象[Object Obkect]</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.__proto__ == MyClass.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过__proto__来访问该属性，而且该属性和 MyClass.prototype指向的对象的同一个。不仅仅是mc，我再创建一个mc2，它也有__proto__,它指向的也是prototype。<br>&emsp;&emsp;只要通过MyClass创建的对象，他们都有一个隐含属性指向原形对象。<br>画图来理解一下：<br><img src=\"https://img-blog.csdnimg.cn/20200415144313404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br></p>\n<p>&emsp;&emsp;原型对象就相当于一个公共区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中的公有的内容，统一设置到原型对象中。<br>看下列代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.a); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200415150759255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>&emsp;&emsp;我们向MyClass的原型对象中添加属性a，我们并没有向对象mc中添加a，此时mc中没有a，他就会向原型对象中寻找。<br>&emsp;&emsp;当我们访问对象的一个属性时，会现在对象自身中寻找，如果有则直接使用，如果没有，则会去原型对象中寻找，如果找到则会直接使用。</p>\n<p>再看，当我们想mc中添加a，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">      MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\">      mc.a = <span class=\"string\">&quot;我是mc中的a&quot;</span>; <span class=\"comment\">//向mc中添加属性a</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.a); <span class=\"comment\">//我是mc中的a</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200415151547307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">&emsp;&emsp;因为mc中有a，则会优先使用自身中的a。所以会输出“我是mc中的a”<br>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">      MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\">      mc.a = <span class=\"string\">&quot;我是mc中的a&quot;</span>; <span class=\"comment\">//向mc中添加属性a</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc1.a); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200415151942167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>&emsp;&emsp;当我们查看mc2中的a时，返回的是123，这是因为此时mc2中没有a，自身没有，它会向它的原型对象中去寻找a。</p>\n<br>\n&emsp;&emsp;到现在你应该能感觉到了，原型对象就是一个公共区域，所有对象（这里的所有对象指的是同一个构造函数产生的对象）都能访问到原型对象里面的属性。\n<br>\n&emsp;&emsp;既然属性能访问到，那我们来试试方法。\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">        MyClass.prototype.sayhello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        &#125;                        <span class=\"comment\">//向MyClass原型中添加一个方法。</span></span><br><span class=\"line\">        mc.sayhello();           <span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;显而易见，方法也是能访问到的，进一步说明了原型对象就是一个公共区域。<br><br><br>&emsp;&emsp;<strong>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的 原型对象中，这不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法</strong></p>\n<br>\n\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明:\"></a>补充说明:</h2><br>\n&emsp;&emsp;前面我们说到：我们向MyClass的原型对象中添加属性a，我们并没有向对象mc中添加a，那这样的话我们可以使用  in运算符 来检查一下。\n\n<p>什么是in运算符：</p>\n<ul>\n<li>通过该运算符可以检查一个对象中是否含有指定的属性<pre><code>    如果有则返回true ，没有则返回false\n</code></pre>\n</li>\n<li>语法：<pre><code> “属性名” in 对象\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.a); <span class=\"comment\">//123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span> <span class=\"keyword\">in</span> mc); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n&emsp;&emsp;？？？这也不对鸭，mc中不是没有a吗？怎么会返回true呢？。<br>这是因为使用in检查对像中是否有某个属性时，如果对象中没有但是原型中有，也会返回true。<br>\n&emsp;&emsp;可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性。使用该方法时，只有对象自身中含有属性时才会返回true。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.hasOwnProperty(<span class=\"string\">&quot;a&quot;</span>)); <span class=\"comment\">//flase</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"></span><br><span class=\"line\">mc.b = <span class=\"number\">100</span>; <span class=\"comment\">//向mc中添加属性b</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.hasOwnProperty(<span class=\"string\">&quot;b&quot;</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<br>\n&emsp;&emsp;那又有疑问了，mc中有hasOwnProperty()吗？好像我们没有添加，那mc的原型对象里有hasOwnProperty()吗？好像我们也没有添加。测试一下：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.hasOwnProperty(<span class=\"string\">&quot;hasOwnProperty&quot;</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.__proto__.hasOwnProperty(<span class=\"string\">&quot;hasOwnProperty&quot;</span>)); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;那连mc原型对象里也没有，那hasOwnProperty()到底是谁的?<br>&emsp;&emsp;我们想一下，原型对象也是对象，那原形对象也没有原型对象呢？我们试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.__proto__.__proto__.hasOwnProperty(<span class=\"string\">&quot;hasOwnProperty&quot;</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;看来这个hasOwnProperty()是属于原型对象的原型对象。<br>&emsp;&emsp;说明一下：<br><img src=\"https://img-blog.csdnimg.cn/20200415161035450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>原型对象也是对象，所以它也有原型，</p>\n<ul>\n<li>当我们使用一个对象的属性或者方法时，会先在自身中寻找，如果有直接使用。</li>\n<li>如果自身中没有则去原型对象中寻找，如果原型对象中有，则使用。</li>\n<li>如果没有则去原型的原型中寻找，直到找到Object对象的原型。</li>\n<li>Object对象的原型没有原型，如果在Object中依然没有找到，则会返回Undefined。</li>\n</ul>\n<hr>\n<p>一个对象的属性的寻找过程由以下几个部分组成:</p>\n<ol>\n<li><strong>寻找对象属性的数据描述符(writable, value)或存取描述符(getter, setter)，如果查询到了，则返回 对应的值。如果查询不到，则进入第2步骤</strong>。</li>\n<li><strong>寻找对象属性的值是否有被显示定义 (可以通过 Object.getOwnPropertyNames)检测，如果对象属性定义了，则返回定义的值。 如果没有，则进入第3步骤</strong>。</li>\n<li><strong>寻找对象的隐藏原型__proto__对象的属性，规则同1，2步骤。如果还未找到，则重复第3步骤， 直到__proto__ 为null 为止。</strong></li>\n</ol>\n<br>\n<br>\n<br>\n愿你的坚持终有收获。\n\n","more":"<h2 id=\"对象原型\"><a href=\"#对象原型\" class=\"headerlink\" title=\"对象原型\"></a>对象原型</h2><hr>\n<p>每一个对象都有一个内置的 <strong>proto</strong> 属性指向构造它的函数prototype属性. 而构造函数的prototype.constructor 则指向构造函数本生。一个对象的属性的寻找过程由以下几个部分组成:</p>\n<ol>\n<li><strong>寻找对象属性的数据描述符(writable, value)或存取描述符(getter, setter)，如果查询到了，则返回 对应的值。如果查询不到，则进入第2步骤</strong>。</li>\n<li><strong>寻找对象属性的值是否有被显示定义 (可以通过 Object.getOwnPropertyNames)检测，如果对象属性定义了，则返回定义的值。 如果没有，则进入第3步骤</strong>。</li>\n<li><strong>寻找对象的隐藏原型__proto__对象的属性，规则同1，2步骤。如果还未找到，则重复第3步骤， 直到__proto__ 为null 为止。</strong><br></li>\n</ol>\n<hr>\n<p>&emsp;&emsp;我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(Person.prototype); <span class=\"comment\">//返回一个对象[Object Obkect]</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(MyClass.prototype); <span class=\"comment\">//返回一个对象[Object Obkect]       </span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(MyClass.prototype == Person.prototype); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;每一个构造函数的prototype是惟一的，他们是不相等的。这个属性对应着一个对象，这个对象就是我们所谓的原形对象。<br>下面我们画图来分析一下：<br><img src=\"https://img-blog.csdnimg.cn/20200415143653690.png\" alt=\"在这里插入图片描述\">&emsp;&emsp;这里prototype属性就是保存原型对象的地址，在MyClass函数里有一个属性指向原型对象。</p>\n<hr>\n<p>&emsp;&emsp;如果函数作为普通函数调用prototype没有任何作用<br>&emsp;&emsp;当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的 原型对象，我们可以通过__proto__来访问该属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.__proto__); <span class=\"comment\">// 返回一个对象[Object Obkect]</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.__proto__ == MyClass.prototype); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过__proto__来访问该属性，而且该属性和 MyClass.prototype指向的对象的同一个。不仅仅是mc，我再创建一个mc2，它也有__proto__,它指向的也是prototype。<br>&emsp;&emsp;只要通过MyClass创建的对象，他们都有一个隐含属性指向原形对象。<br>画图来理解一下：<br><img src=\"https://img-blog.csdnimg.cn/20200415144313404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><br></p>\n<p>&emsp;&emsp;原型对象就相当于一个公共区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中的公有的内容，统一设置到原型对象中。<br>看下列代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.a); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200415150759255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>&emsp;&emsp;我们向MyClass的原型对象中添加属性a，我们并没有向对象mc中添加a，此时mc中没有a，他就会向原型对象中寻找。<br>&emsp;&emsp;当我们访问对象的一个属性时，会现在对象自身中寻找，如果有则直接使用，如果没有，则会去原型对象中寻找，如果找到则会直接使用。</p>\n<p>再看，当我们想mc中添加a，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">      MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\">      mc.a = <span class=\"string\">&quot;我是mc中的a&quot;</span>; <span class=\"comment\">//向mc中添加属性a</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.a); <span class=\"comment\">//我是mc中的a</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200415151547307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">&emsp;&emsp;因为mc中有a，则会优先使用自身中的a。所以会输出“我是mc中的a”<br>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">      MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\">      mc.a = <span class=\"string\">&quot;我是mc中的a&quot;</span>; <span class=\"comment\">//向mc中添加属性a</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc1.a); <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200415151942167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>&emsp;&emsp;当我们查看mc2中的a时，返回的是123，这是因为此时mc2中没有a，自身没有，它会向它的原型对象中去寻找a。</p>\n<br>\n&emsp;&emsp;到现在你应该能感觉到了，原型对象就是一个公共区域，所有对象（这里的所有对象指的是同一个构造函数产生的对象）都能访问到原型对象里面的属性。\n<br>\n&emsp;&emsp;既然属性能访问到，那我们来试试方法。\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">        MyClass.prototype.sayhello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        &#125;                        <span class=\"comment\">//向MyClass原型中添加一个方法。</span></span><br><span class=\"line\">        mc.sayhello();           <span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;显而易见，方法也是能访问到的，进一步说明了原型对象就是一个公共区域。<br><br><br>&emsp;&emsp;<strong>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的 原型对象中，这不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法</strong></p>\n<br>\n\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明:\"></a>补充说明:</h2><br>\n&emsp;&emsp;前面我们说到：我们向MyClass的原型对象中添加属性a，我们并没有向对象mc中添加a，那这样的话我们可以使用  in运算符 来检查一下。\n\n<p>什么是in运算符：</p>\n<ul>\n<li>通过该运算符可以检查一个对象中是否含有指定的属性<pre><code>    如果有则返回true ，没有则返回false\n</code></pre>\n</li>\n<li>语法：<pre><code> “属性名” in 对象\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mc1 = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc1</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.a); <span class=\"comment\">//123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a&quot;</span> <span class=\"keyword\">in</span> mc); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n&emsp;&emsp;？？？这也不对鸭，mc中不是没有a吗？怎么会返回true呢？。<br>这是因为使用in检查对像中是否有某个属性时，如果对象中没有但是原型中有，也会返回true。<br>\n&emsp;&emsp;可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性。使用该方法时，只有对象自身中含有属性时才会返回true。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.hasOwnProperty(<span class=\"string\">&quot;a&quot;</span>)); <span class=\"comment\">//flase</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">MyClass.prototype.a = <span class=\"number\">123</span>; <span class=\"comment\">//向MyClass的原型对象中添加属性a</span></span><br><span class=\"line\"></span><br><span class=\"line\">mc.b = <span class=\"number\">100</span>; <span class=\"comment\">//向mc中添加属性b</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.hasOwnProperty(<span class=\"string\">&quot;b&quot;</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<br>\n&emsp;&emsp;那又有疑问了，mc中有hasOwnProperty()吗？好像我们没有添加，那mc的原型对象里有hasOwnProperty()吗？好像我们也没有添加。测试一下：\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.hasOwnProperty(<span class=\"string\">&quot;hasOwnProperty&quot;</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(mc.__proto__.hasOwnProperty(<span class=\"string\">&quot;hasOwnProperty&quot;</span>)); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;那连mc原型对象里也没有，那hasOwnProperty()到底是谁的?<br>&emsp;&emsp;我们想一下，原型对象也是对象，那原形对象也没有原型对象呢？我们试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//创建构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mc = <span class=\"keyword\">new</span> MyClass(); <span class=\"comment\">//通过构造函数MyClass创建一个对象mc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mc.__proto__.__proto__.hasOwnProperty(<span class=\"string\">&quot;hasOwnProperty&quot;</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;看来这个hasOwnProperty()是属于原型对象的原型对象。<br>&emsp;&emsp;说明一下：<br><img src=\"https://img-blog.csdnimg.cn/20200415161035450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>原型对象也是对象，所以它也有原型，</p>\n<ul>\n<li>当我们使用一个对象的属性或者方法时，会先在自身中寻找，如果有直接使用。</li>\n<li>如果自身中没有则去原型对象中寻找，如果原型对象中有，则使用。</li>\n<li>如果没有则去原型的原型中寻找，直到找到Object对象的原型。</li>\n<li>Object对象的原型没有原型，如果在Object中依然没有找到，则会返回Undefined。</li>\n</ul>\n<hr>\n<p>一个对象的属性的寻找过程由以下几个部分组成:</p>\n<ol>\n<li><strong>寻找对象属性的数据描述符(writable, value)或存取描述符(getter, setter)，如果查询到了，则返回 对应的值。如果查询不到，则进入第2步骤</strong>。</li>\n<li><strong>寻找对象属性的值是否有被显示定义 (可以通过 Object.getOwnPropertyNames)检测，如果对象属性定义了，则返回定义的值。 如果没有，则进入第3步骤</strong>。</li>\n<li><strong>寻找对象的隐藏原型__proto__对象的属性，规则同1，2步骤。如果还未找到，则重复第3步骤， 直到__proto__ 为null 为止。</strong></li>\n</ol>\n<br>\n<br>\n<br>\n愿你的坚持终有收获。","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}