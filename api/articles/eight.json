{"title":"细谈apply()与call()","slug":"eight","date":"2020-04-17T03:22:48.000Z","updated":"2022-07-29T04:22:04.755Z","comments":true,"path":"api/articles/eight.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/94b7a45ee1c049bda243f034e6172c19.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/94b7a45ee1c049bda243f034e6172c19.jpg\"></p>\n<span id=\"more\"></span>\n\n<p><strong>两者使用的目的</strong>：改变调用的函数体内部的this的指向。<br>&emsp;&emsp;相同点：均是调用某对象的方法，格式：obj.函数名.call()<br>&emsp;&emsp;call(obj,参数1，参数2）:两个参数,前者将代替Function类里this对象，后者（多个元素）作为参数传递给被调用的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;name1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">logName</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar=&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;name2&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.logName.call(bar);<span class=\"comment\">//name2</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;apply（obj，[参数1，参数2]），同上，不同点是第二个参数是数组。（将数组的每个元素作为一个个参数传递给被调用的函数，性质与call（）方法一样）</p>\n<p>&emsp;&emsp;利用apply（）这一特性的一些小场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求数组的最大值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">34</span>,<span class=\"number\">8</span>]     </span><br><span class=\"line\"><span class=\"keyword\">var</span> max=<span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,arr)  <span class=\"comment\">//34   Math.max（）参数不能为数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求数组的最小值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max=<span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr)  <span class=\"comment\">//1   </span></span><br><span class=\"line\"><span class=\"comment\">//合并数组并返回新数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1,arr2); <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n\n\n<br>\n<br>\n没事可以来看看，万一有收获呢。\n\n<p><a href=\"https://aqingya.cn/\">个人博客地址https://aqingya.cn</a><br><br><br>愿你的坚持终有回报。</p>\n","more":"<p><strong>两者使用的目的</strong>：改变调用的函数体内部的this的指向。<br>&emsp;&emsp;相同点：均是调用某对象的方法，格式：obj.函数名.call()<br>&emsp;&emsp;call(obj,参数1，参数2）:两个参数,前者将代替Function类里this对象，后者（多个元素）作为参数传递给被调用的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;name1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">logName</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar=&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;name2&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.logName.call(bar);<span class=\"comment\">//name2</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;apply（obj，[参数1，参数2]），同上，不同点是第二个参数是数组。（将数组的每个元素作为一个个参数传递给被调用的函数，性质与call（）方法一样）</p>\n<p>&emsp;&emsp;利用apply（）这一特性的一些小场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求数组的最大值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">34</span>,<span class=\"number\">8</span>]     </span><br><span class=\"line\"><span class=\"keyword\">var</span> max=<span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>,arr)  <span class=\"comment\">//34   Math.max（）参数不能为数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求数组的最小值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max=<span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>,arr)  <span class=\"comment\">//1   </span></span><br><span class=\"line\"><span class=\"comment\">//合并数组并返回新数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1,arr2); <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n\n\n<br>\n<br>\n没事可以来看看，万一有收获呢。\n\n<p><a href=\"https://aqingya.cn/\">个人博客地址https://aqingya.cn</a><br><br><br>愿你的坚持终有回报。</p>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}