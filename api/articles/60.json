{"title":"webpack 五个核心概念","slug":"60","date":"2020-07-17T07:05:17.000Z","updated":"2022-07-29T04:22:04.768Z","comments":true,"path":"api/articles/60.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/a50ec10ee9b942fe93858b20243ebabb.jpeg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/a50ec10ee9b942fe93858b20243ebabb.jpeg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"webpack-五个核心概念\"><a href=\"#webpack-五个核心概念\" class=\"headerlink\" title=\"webpack 五个核心概念\"></a>webpack 五个核心概念</h1><h2 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h2><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>\n<h2 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h2><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解<br>JavaScript)</p>\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p>\n<h2 id=\"Mode\"><a href=\"#Mode\" class=\"headerlink\" title=\"Mode\"></a>Mode</h2><p>模式(Mode)指示 webpack 使用相应模式的配置。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th>描述</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">development</td>\n<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置<br/>为 development。启用 NamedChunksPlugin 和<br/>NamedModulesPlugin。</td>\n<td>能让代码本地调试<br/>运行的环境</td>\n</tr>\n<tr>\n<td align=\"center\">production</td>\n<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置<br/>为 production。启用 FlagDependencyUsagePlugin,<br/>FlagIncludedChunksPlugin, ModuleConcatenationPlugin,<br/>NoEmitOnErrorsPlugin, OccurrenceOrderPlugin,<br/>SideEffectsFlagPlugin 和 TerserPlugin。</td>\n<td>能让代码优化上线<br/>运行的环境</td>\n</tr>\n</tbody></table>\n","more":"<h1 id=\"webpack-五个核心概念\"><a href=\"#webpack-五个核心概念\" class=\"headerlink\" title=\"webpack 五个核心概念\"></a>webpack 五个核心概念</h1><h2 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h2><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>\n<h2 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h2><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解<br>JavaScript)</p>\n<h2 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h2><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p>\n<h2 id=\"Mode\"><a href=\"#Mode\" class=\"headerlink\" title=\"Mode\"></a>Mode</h2><p>模式(Mode)指示 webpack 使用相应模式的配置。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th>描述</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">development</td>\n<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置<br/>为 development。启用 NamedChunksPlugin 和<br/>NamedModulesPlugin。</td>\n<td>能让代码本地调试<br/>运行的环境</td>\n</tr>\n<tr>\n<td align=\"center\">production</td>\n<td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置<br/>为 production。启用 FlagDependencyUsagePlugin,<br/>FlagIncludedChunksPlugin, ModuleConcatenationPlugin,<br/>NoEmitOnErrorsPlugin, OccurrenceOrderPlugin,<br/>SideEffectsFlagPlugin 和 TerserPlugin。</td>\n<td>能让代码优化上线<br/>运行的环境</td>\n</tr>\n</tbody></table>","categories":[{"name":"WebPack","path":"api/categories/WebPack.json"}],"tags":[{"name":"WebPack","path":"api/tags/WebPack.json"}]}