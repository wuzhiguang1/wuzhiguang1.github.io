{"title":"JavaScript --- 作用域与作用域链","slug":"twenty-eight","date":"2020-05-19T09:08:25.000Z","updated":"2022-07-29T04:22:04.752Z","comments":true,"path":"api/articles/twenty-eight.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/8b87a15fbd9b443fa3b322c68b9b1423.jpg","https://img-blog.csdnimg.cn/20200519155909763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200519161000612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200519162258104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70","https://img-blog.csdnimg.cn/20200519164317171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70"],"content":"<p><img src=\"https://qny.aqingya.cn/img/8b87a15fbd9b443fa3b322c68b9b1423.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>1、理解<br>&emsp;&emsp;就是一块“地盘”，一个代码所在的区域<br>&emsp;&emsp;它是静态的（相对于上下文对象），在编写代码时就确定了</p>\n<p>2、分类<br>&emsp;&emsp;全局作用域<br>&emsp;&emsp;函数作用域<br>&emsp;&emsp;块级作用域</p>\n<p>3、作用<br>&emsp;&emsp;隔离变量，不同作用域下的同名变量不会有冲突。<br><img src=\"https://img-blog.csdnimg.cn/20200519155909763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"作用域与执行上下文\"><a href=\"#作用域与执行上下文\" class=\"headerlink\" title=\"作用域与执行上下文\"></a>作用域与执行上下文</h2><p>1、区别1<br>&emsp;&emsp;全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时。<br>&emsp;&emsp;全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建。<br>&emsp;&emsp;函数执行_上下文环境是在调用函数时，函数体代码执行之 前创建。</p>\n<p>2、区别2<br>&emsp;&emsp;作用域是静态的，只要函数定义好了就一直存在，且不会再变化。<br>&emsp;&emsp;上下文环境是动态的，调用函数时创建，函数调用结束时，上下文环境就会释放。</p>\n<p>3、联系<br>&emsp;&emsp;上下文环境（对象）是从属于所在的作用域。<br>&emsp;&emsp;全局上下文环境—&gt;全局作用域。<br>&emsp;&emsp;函数上下文环境—&gt;对应的函数使用域。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200519161000612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>1、理解<br>&emsp;&emsp;多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）。<br>&emsp;&emsp;查找变量时就是沿着作用域链来查找的。</p>\n<p>2、查找一个变量的查找规则<br>&emsp;&emsp;在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则在上一级作用域是执行上下文中查找对应的属性，如果有直接返回，否则在往上查找，直到全局作用域，如果还找不到就抛出找不到的异常。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200519162258104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"关于作用域链的两道面试题：（具有迷惑性，要注意）\"><a href=\"#关于作用域链的两道面试题：（具有迷惑性，要注意）\" class=\"headerlink\" title=\"关于作用域链的两道面试题：（具有迷惑性，要注意）\"></a>关于作用域链的两道面试题：（具有迷惑性，要注意）</h2><p><strong>面试题1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">show(fn);   <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200519164317171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">fn()中没有x，就去全局作用域中去寻找。</p>\n<hr>\n<p><strong>面试题二：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(); <span class=\"comment\">//ƒ () &#123;console.log(fn);&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(fn2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn2(); <span class=\"comment\">//Uncaught ReferenceError: fn2 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>fn()应该没有问题正常输出fn函数。<br>但是调用obj.fn2()时，console.log(fn2)，会先在fn函数中找fn，没有就去全局作用域中寻找，全局也没有，就报错了。</p>\n<p>如果我们想找到obj中的fn2,我们可以这样写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.fn2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn2(); <span class=\"comment\">//ƒ () &#123;console.log(this.fn2)&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<br>\n<br>\n\n<p>愿你的坚持终有回报。</p>\n<br>\n<br>\n\n\n\n\n\n\n\n","more":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>1、理解<br>&emsp;&emsp;就是一块“地盘”，一个代码所在的区域<br>&emsp;&emsp;它是静态的（相对于上下文对象），在编写代码时就确定了</p>\n<p>2、分类<br>&emsp;&emsp;全局作用域<br>&emsp;&emsp;函数作用域<br>&emsp;&emsp;块级作用域</p>\n<p>3、作用<br>&emsp;&emsp;隔离变量，不同作用域下的同名变量不会有冲突。<br><img src=\"https://img-blog.csdnimg.cn/20200519155909763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"作用域与执行上下文\"><a href=\"#作用域与执行上下文\" class=\"headerlink\" title=\"作用域与执行上下文\"></a>作用域与执行上下文</h2><p>1、区别1<br>&emsp;&emsp;全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了。而不是在函数调用时。<br>&emsp;&emsp;全局执行上下文环境是在全局作用域确定之后，js代码马上执行之前创建。<br>&emsp;&emsp;函数执行_上下文环境是在调用函数时，函数体代码执行之 前创建。</p>\n<p>2、区别2<br>&emsp;&emsp;作用域是静态的，只要函数定义好了就一直存在，且不会再变化。<br>&emsp;&emsp;上下文环境是动态的，调用函数时创建，函数调用结束时，上下文环境就会释放。</p>\n<p>3、联系<br>&emsp;&emsp;上下文环境（对象）是从属于所在的作用域。<br>&emsp;&emsp;全局上下文环境—&gt;全局作用域。<br>&emsp;&emsp;函数上下文环境—&gt;对应的函数使用域。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200519161000612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>1、理解<br>&emsp;&emsp;多个上下级关系的作用域形成的链，它的方向是从下向上的（从内到外）。<br>&emsp;&emsp;查找变量时就是沿着作用域链来查找的。</p>\n<p>2、查找一个变量的查找规则<br>&emsp;&emsp;在当前作用域下的执行上下文中查找对应的属性，如果有直接返回，否则在上一级作用域是执行上下文中查找对应的属性，如果有直接返回，否则在往上查找，直到全局作用域，如果还找不到就抛出找不到的异常。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200519162258104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"关于作用域链的两道面试题：（具有迷惑性，要注意）\"><a href=\"#关于作用域链的两道面试题：（具有迷惑性，要注意）\" class=\"headerlink\" title=\"关于作用域链的两道面试题：（具有迷惑性，要注意）\"></a>关于作用域链的两道面试题：（具有迷惑性，要注意）</h2><p><strong>面试题1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">    f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">show(fn);   <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200519164317171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6ZzA4MTc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">fn()中没有x，就去全局作用域中去寻找。</p>\n<hr>\n<p><strong>面试题二：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(); <span class=\"comment\">//ƒ () &#123;console.log(fn);&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(fn2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn2(); <span class=\"comment\">//Uncaught ReferenceError: fn2 is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>fn()应该没有问题正常输出fn函数。<br>但是调用obj.fn2()时，console.log(fn2)，会先在fn函数中找fn，没有就去全局作用域中寻找，全局也没有，就报错了。</p>\n<p>如果我们想找到obj中的fn2,我们可以这样写。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn2</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.fn2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn2(); <span class=\"comment\">//ƒ () &#123;console.log(this.fn2)&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<br>\n<br>\n\n<p>愿你的坚持终有回报。</p>\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}