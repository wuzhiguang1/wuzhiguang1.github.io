{"title":"JavaScript中keys()和getOwnPropertyNames()详解。","slug":"nineteen","date":"2020-04-29T03:51:01.000Z","updated":"2022-07-29T04:22:04.754Z","comments":true,"path":"api/articles/nineteen.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/34eecd91b0654f22af2538bc7c380cc3.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/34eecd91b0654f22af2538bc7c380cc3.jpg\"></p>\n<span id=\"more\"></span>\n\n<p> &emsp; &emsp;除了for/in循环之外，ECMAScript 5定义了两个用以枚举属性名称的函数。第一个是Object.keys(), 它返回一个数组，这个数组由对象中可枚举的自有属性的名称组成。</p>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><blockquote>\n<p>Object.keys(obj)</p>\n</blockquote>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>obj<br>&emsp; &emsp; 要返回其枚举自身属性的对象。</p>\n</blockquote>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><blockquote>\n<p>一个表示给定对象的所有可枚举属性的字符串数组。</p>\n</blockquote>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p>\n</blockquote>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple array</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(arr)); <span class=\"comment\">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array like object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">0</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;c&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(obj)); <span class=\"comment\">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array like object with random key ordering</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anObj = &#123; <span class=\"number\">100</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">7</span>: <span class=\"string\">&#x27;c&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(anObj)); <span class=\"comment\">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p> &emsp; &emsp;要在原生不支持的旧环境中添加兼容的Object.keys，请复制以下代码段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.keys) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty,</span><br><span class=\"line\">        hasDontEnumBug = !(&#123;<span class=\"attr\">toString</span>: <span class=\"literal\">null</span>&#125;).propertyIsEnumerable(<span class=\"string\">&#x27;toString&#x27;</span>),</span><br><span class=\"line\">        dontEnums = [</span><br><span class=\"line\">          <span class=\"string\">&#x27;toString&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;toLocaleString&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;valueOf&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;hasOwnProperty&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;isPrototypeOf&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;propertyIsEnumerable&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;constructor&#x27;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        dontEnumsLength = dontEnums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;function&#x27;</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Object.keys called on non-object&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasOwnProperty.call(obj, prop)) result.push(prop);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasDontEnumBug) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; dontEnumsLength; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p> &emsp; &emsp;上面的代码在IE7（也许IE8也是）下有个问题，就是如果传入一个来自其他 window 对象下的对象时，不可枚举的属性也会获取到。</p>\n<hr>\n<p> &emsp; &emsp;ECMAScript 5中第二E个枚举属性的函数是Object.getOwnPropertyNames()，它和Ojbect.keys()似，只是它返回对象的所有自有属性的名称，而不仅仅是可枚举的属性。在ECMAScript 3中是无法实现的类似的函数的，因为ECMAScript 3中没有提供任何方法来获取对象不可枚举的属性。</p>\n<blockquote>\n<p>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><blockquote>\n<p>Object.getOwnPropertyNames(obj)</p>\n</blockquote>\n<h2 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>obj<br> &emsp; &emsp;一个对象，其自身的可枚举和不可枚举属性的名称被返回。</p>\n</blockquote>\n<h2 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><blockquote>\n<p>在给定对象上找到的自身属性对应的字符串数组。</p>\n</blockquote>\n<h2 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>Object.getOwnPropertyNames() 返回一个数组，该数组对元素是 obj自身拥有的枚举或不可枚举属性名称字符串。<br>数组中枚举属性的顺序与通过 for…in 循环（或 Object.keys）迭代该对象属性时一致。数组中不可枚举属性的顺序未定义。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(arr).sort()); <span class=\"comment\">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">0</span>: <span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>: <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>: <span class=\"string\">&quot;c&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj).sort()); <span class=\"comment\">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.forEach输出属性名和属性值</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(obj).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, idx, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val + <span class=\"string\">&quot; -&gt; &quot;</span> + obj[val]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 0 -&gt; a</span></span><br><span class=\"line\"><span class=\"comment\">// 1 -&gt; b</span></span><br><span class=\"line\"><span class=\"comment\">// 2 -&gt; c</span></span><br></pre></td></tr></table></figure>\n<p> &emsp; &emsp;如果你只要获取到可枚举属性，查看Object.keys或用for…in循环（还会获取到原型链上的可枚举属性，不过可以使用hasOwnProperty()方法过滤掉）。getOwnPropertyNames()并不会获取到原型链上的属性。<br>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParentClass</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">ParentClass.prototype.inheritedMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ChildClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.prop = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.method = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ChildClass.prototype = <span class=\"keyword\">new</span> ParentClass;</span><br><span class=\"line\">ChildClass.prototype.prototypeMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getOwnPropertyNames(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ChildClass()  <span class=\"comment\">// [&quot;prop&quot;, &quot;method&quot;]</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n","more":"<p> &emsp; &emsp;除了for/in循环之外，ECMAScript 5定义了两个用以枚举属性名称的函数。第一个是Object.keys(), 它返回一个数组，这个数组由对象中可枚举的自有属性的名称组成。</p>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><blockquote>\n<p>Object.keys(obj)</p>\n</blockquote>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>obj<br>&emsp; &emsp; 要返回其枚举自身属性的对象。</p>\n</blockquote>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><blockquote>\n<p>一个表示给定对象的所有可枚举属性的字符串数组。</p>\n</blockquote>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p>\n</blockquote>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple array</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(arr)); <span class=\"comment\">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array like object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">0</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">1</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;c&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(obj)); <span class=\"comment\">// console: [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array like object with random key ordering</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> anObj = &#123; <span class=\"number\">100</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">7</span>: <span class=\"string\">&#x27;c&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(anObj)); <span class=\"comment\">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p> &emsp; &emsp;要在原生不支持的旧环境中添加兼容的Object.keys，请复制以下代码段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.keys) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty,</span><br><span class=\"line\">        hasDontEnumBug = !(&#123;<span class=\"attr\">toString</span>: <span class=\"literal\">null</span>&#125;).propertyIsEnumerable(<span class=\"string\">&#x27;toString&#x27;</span>),</span><br><span class=\"line\">        dontEnums = [</span><br><span class=\"line\">          <span class=\"string\">&#x27;toString&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;toLocaleString&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;valueOf&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;hasOwnProperty&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;isPrototypeOf&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;propertyIsEnumerable&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;constructor&#x27;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        dontEnumsLength = dontEnums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;function&#x27;</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Object.keys called on non-object&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasOwnProperty.call(obj, prop)) result.push(prop);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasDontEnumBug) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; dontEnumsLength; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p> &emsp; &emsp;上面的代码在IE7（也许IE8也是）下有个问题，就是如果传入一个来自其他 window 对象下的对象时，不可枚举的属性也会获取到。</p>\n<hr>\n<p> &emsp; &emsp;ECMAScript 5中第二E个枚举属性的函数是Object.getOwnPropertyNames()，它和Ojbect.keys()似，只是它返回对象的所有自有属性的名称，而不仅仅是可枚举的属性。在ECMAScript 3中是无法实现的类似的函数的，因为ECMAScript 3中没有提供任何方法来获取对象不可枚举的属性。</p>\n<blockquote>\n<p>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><blockquote>\n<p>Object.getOwnPropertyNames(obj)</p>\n</blockquote>\n<h2 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>obj<br> &emsp; &emsp;一个对象，其自身的可枚举和不可枚举属性的名称被返回。</p>\n</blockquote>\n<h2 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><blockquote>\n<p>在给定对象上找到的自身属性对应的字符串数组。</p>\n</blockquote>\n<h2 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>Object.getOwnPropertyNames() 返回一个数组，该数组对元素是 obj自身拥有的枚举或不可枚举属性名称字符串。<br>数组中枚举属性的顺序与通过 for…in 循环（或 Object.keys）迭代该对象属性时一致。数组中不可枚举属性的顺序未定义。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(arr).sort()); <span class=\"comment\">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类数组对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">0</span>: <span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>: <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>: <span class=\"string\">&quot;c&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(obj).sort()); <span class=\"comment\">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.forEach输出属性名和属性值</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(obj).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val, idx, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val + <span class=\"string\">&quot; -&gt; &quot;</span> + obj[val]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 0 -&gt; a</span></span><br><span class=\"line\"><span class=\"comment\">// 1 -&gt; b</span></span><br><span class=\"line\"><span class=\"comment\">// 2 -&gt; c</span></span><br></pre></td></tr></table></figure>\n<p> &emsp; &emsp;如果你只要获取到可枚举属性，查看Object.keys或用for…in循环（还会获取到原型链上的可枚举属性，不过可以使用hasOwnProperty()方法过滤掉）。getOwnPropertyNames()并不会获取到原型链上的属性。<br>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParentClass</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">ParentClass.prototype.inheritedMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ChildClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.prop = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.method = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ChildClass.prototype = <span class=\"keyword\">new</span> ParentClass;</span><br><span class=\"line\">ChildClass.prototype.prototypeMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getOwnPropertyNames(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ChildClass()  <span class=\"comment\">// [&quot;prop&quot;, &quot;method&quot;]</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}