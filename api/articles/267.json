{"title":"初识React Hooks","slug":"267","date":"2023-04-19T03:12:59.000Z","updated":"2023-04-20T01:04:19.644Z","comments":true,"path":"api/articles/267.json","excerpt":null,"covers":["https://qny.aqingya.cn/img/20230419163325.png","https://qny.aqingya.cn/img/20230419163541.png"],"content":"<h2 id=\"为什么需要Hook\"><a href=\"#为什么需要Hook\" class=\"headerlink\" title=\"为什么需要Hook?\"></a><strong>为什么需要Hook?</strong></h2><p>Hook 是 React 16.8 的新增特性，它可以让我们在不编写class的情况下使用state以及其他的React特性（比如生命周期）。</p>\n<h3 id=\"class组件相对于函数式组件有什么优势？\"><a href=\"#class组件相对于函数式组件有什么优势？\" class=\"headerlink\" title=\"class组件相对于函数式组件有什么优势？\"></a>class组件相对于函数式组件有什么优势？</h3><ul>\n<li><p>class组件可以定义<strong>自己的state</strong>，用来<strong>保存组件自己内部的状态</strong>；</p>\n<ul>\n<li>函数式组件不可以，因为函数每次调用都会产生新的临时变量；</li>\n</ul>\n</li>\n<li><p>class组件有<strong>自己的生命周期</strong>，我们可以在<strong>对应的生命周期中完成自己的逻辑</strong>；</p>\n<ul>\n<li>比如在componentDidMount中发送网络请求，并且该生命周期函数只会执行一次；</li>\n<li>函数式组件在学习hooks之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求；</li>\n</ul>\n</li>\n<li><p>class组件可以在<strong>状态改变时只会重新执行render函数</strong>以及我<strong>们希望重新调用的生命周期函数componentDidUpdate等</strong>；</p>\n<ul>\n<li>函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以只让它们调用一次；</li>\n</ul>\n</li>\n</ul>\n<p><strong>所以，在Hook出现之前，对于上面这些情况我们通常都会编写class组件</strong></p>\n<h3 id=\"Class组件存在的问题\"><a href=\"#Class组件存在的问题\" class=\"headerlink\" title=\"Class组件存在的问题\"></a>Class组件存在的问题</h3><ul>\n<li><strong>复杂组件变得难以理解：</strong><ul>\n<li>我们在最初编写一个class组件时，往往逻辑比较简单，并不会非常复杂。但是<strong>随着业务的增多</strong>，我们的class组件会变得越来越复杂；</li>\n<li>比如componentDidMount中，可能就会包含大量的逻辑代码：包括网络请求、一些事件的监听（还需要在componentWillUnmount中移除）；</li>\n<li>而对于这样的class实际上非常难以拆分：因为它们的逻辑往往混在一起，强行拆分反而会造成过度设计，增加代码的复杂度；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Class组件和使用Hooks的函数式组件简单对比\"><a href=\"#Class组件和使用Hooks的函数式组件简单对比\" class=\"headerlink\" title=\"Class组件和使用Hooks的函数式组件简单对比\"></a><strong>Class组件和使用Hooks的函数式组件简单对比</strong></h3><p>类式组件</p>\n<p><img src=\"https://qny.aqingya.cn/img/20230419163325.png\"></p>\n<p>函数式组件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20230419163541.png\"></p>\n<p>简洁程度可想而知。</p>\n<p><strong>小提示：Hook指的类似于useState、useEffect这样的函数；Hooks是对这类函数的统称；</strong></p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a><strong>useState</strong></h2><ul>\n<li><p><strong>useState</strong>会帮助我们<strong>定义一个 state变量</strong>，useState 是一种新方法，它与 <strong>class 里面的 this.state 提供的功能完全相同。</strong></p>\n<ul>\n<li>✓ 一般来说，<strong>在函数退出后变量就会”消失”</strong>，而 state 中的变量会被 React 保留。</li>\n</ul>\n</li>\n<li><p><strong>useState</strong>接受唯一一个参数，在第一次组件被调用时使用来作为初始化值。（如果没有传递参数，那么初始化值为undefined）。</p>\n</li>\n<li><p><strong>useState</strong>的返回值是一个数组，我们可以通过数组的解构，来完成赋值会非常方便。</p>\n<ul>\n<li> 数组解构：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li>\n</ul>\n</li>\n<li><p><strong>当然，我们也可以在一个组件中定义多个变量和复杂变量（数组、对象）</strong></p>\n</li>\n</ul>\n<p>小提示：<strong>为什么叫 useState 而不叫 createState?</strong></p>\n<ul>\n<li><p>“create” 可能不是很准确，因为 state 只在组件首次渲染的时候被创建。</p>\n</li>\n<li><p>在下一次重新渲染时，useState 返回给我们当前的 state。</p>\n</li>\n<li><p>如果每次都创建新的变量，它就不是 “state”了。</p>\n</li>\n<li><p>这也是 Hook 的名字<em>总是</em>以 use 开头的一个原因</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = useState(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">100</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [banners, setBanners] = useState([])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeMessage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setMessage(<span class=\"string\">&quot;你好啊, 李银河!&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>App: &#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeMessage&#125;</span>&gt;</span>修改文本<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a><strong>useEffect</strong></h2><ul>\n<li><p>通过useEffect的Hook，可以告诉<strong>React需要在渲染后执行某些操作</strong>；</p>\n</li>\n<li><p>useEffect要求<strong>我们传入一个回调函数</strong>，在React执行完<strong>更新DOM操作之后</strong>，就会<strong>回调这个函数</strong>；</p>\n</li>\n<li><p>默认情况下，<strong>无论是第一次渲染之后</strong>，还是每次更新之后，都会<strong>执行这个回调函数</strong>；</p>\n</li>\n</ul>\n<h3 id=\"useEffect的清除机制\"><a href=\"#useEffect的清除机制\" class=\"headerlink\" title=\"useEffect的清除机制\"></a><strong>useEffect的清除机制</strong></h3><p>useEffect传入的回调函数A本身可以有一个返回值，这个返回值是另外一个回调函数B：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type EffectCallback = <span class=\"function\">() =&gt;</span> (<span class=\"keyword\">void</span> | (<span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span> | <span class=\"literal\">undefined</span>));</span><br></pre></td></tr></table></figure>\n\n<p>为什么要在effect 中返回一个函数？</p>\n<ul>\n<li><p>这是effect 可选的清除机制。每个effect 都可以返回一个清除函数；</p>\n</li>\n<li><p>如此可以将添加和移除订阅的逻辑放在一起；</p>\n</li>\n<li><p>它们都属于effect 的一部分；</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 负责告知react, 在执行完当前组件渲染之后要执行的副作用代码</span></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.监听事件</span></span><br><span class=\"line\">    <span class=\"comment\">// const unubscribe = store.subscribe(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// function foo() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// eventBus.on(&quot;why&quot;, foo)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听redux中数据变化, 监听eventBus中的why事件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回值: 回调函数 =&gt; 组件被重新渲染或者组件卸载的时候执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;取消监听redux中数据变化, 取消监听eventBus中的why事件&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用多个Effect\"><a href=\"#使用多个Effect\" class=\"headerlink\" title=\"使用多个Effect\"></a><strong>使用多个</strong>Effect</h3><p>使用Hook的其中一个目的就是解决class中生命周期经常将很多的逻辑放在一起的问题：比如网络请求、事件监听、手动修改DOM，这些往往都会放在componentDidMount中；</p>\n<p>Hook 允许我们按照代码的用途分离它们，而不是像生命周期函数那样：React 将按照effect 声明的顺序依次调用组件中的每一个effect；</p>\n<p>使用Effect Hook，我们可以将它们分离到不同的useEffect中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 负责告知react, 在执行完当前组件渲染之后要执行的副作用代码</span></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.修改document的title(1行)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;修改title&quot;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个函数式组件中, 可以存在多个useEffect</span></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2.对redux中数据变化监听(10行)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听redux中的数据&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 取消redux中数据的监听</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3.监听eventBus中的why事件(15行)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听eventBus的why事件&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 取消eventBus中的why事件监听</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect性能优化\"><a href=\"#useEffect性能优化\" class=\"headerlink\" title=\"useEffect性能优化\"></a><strong>useEffect性能优化</strong></h3><p><strong>默认情况下，useEffect的回调函数会在每次渲染时都重新执行，但是这会导致两个问题：</strong></p>\n<p>某些代码我们只是希望执行一次即可，类似于componentDidMount和componentWillUnmount中完成的事情；（比如网</p>\n<p>络请求、订阅和取消订阅）； 另外，多次执行也会导致一定的性能问题；</p>\n<p><strong>我们如何决定useEffect在什么时候应该执行和什么时候不应该执行呢？</strong></p>\n<p>useEffect实际上有两个参数：</p>\n<ul>\n<li><p>参数一：执行的回调函数；</p>\n</li>\n<li><p>参数二：该useEffect在哪些state发生变化时，才重新执行；（受谁的影响）</p>\n</li>\n</ul>\n<p><strong>但是，如果一个函数我们不希望依赖任何的内容时，也可以传入一个空的数组 []：</strong></p>\n<p>那么这里的两个回调函数分别对应的就是componentDidMount和componentWillUnmount生命周期函数了；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = useState(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;修改title:&quot;</span>, count)</span><br><span class=\"line\">  &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听redux中的数据&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听eventBus的why事件&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;发送网络请求, 从服务器获取数据&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;会在组件被卸载时, 才会执行一次&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setMessage(&quot;你好啊&quot;)&#125;&gt;修改message(&#123;message&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a><strong>useContext</strong></h2><p>Context Hook允许我们通过Hook来直接获取某个Context的值；</p>\n<p><strong>注意事项：</strong></p>\n<p>当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重新渲染，并使用最新传递给 MyContext provider 的</p>\n<p>context value 值。</p>\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = ReactDOM.createRoot(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\">root.render(</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;name:</span> &quot;<span class=\"attr\">why</span>&quot;, <span class=\"attr\">level:</span> <span class=\"attr\">99</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">TokenContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">coderwhy</span>&#x27;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">TokenContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>context/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserContext = createContext()</span><br><span class=\"line\"><span class=\"keyword\">const</span> ThemeContext = createContext()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  UserContext,</span><br><span class=\"line\">  ThemeContext</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>App.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserContext, ThemeContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用Context</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = useContext(UserContext)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> theme = useContext(ThemeContext)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>User: &#123;user.name&#125;-&#123;user.level&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">theme.color</span>, <span class=\"attr\">fontSize:</span> <span class=\"attr\">theme.size</span>&#125;&#125;&gt;</span>Theme<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n\n\n","more":"<h2 id=\"为什么需要Hook\"><a href=\"#为什么需要Hook\" class=\"headerlink\" title=\"为什么需要Hook?\"></a><strong>为什么需要Hook?</strong></h2><p>Hook 是 React 16.8 的新增特性，它可以让我们在不编写class的情况下使用state以及其他的React特性（比如生命周期）。</p>\n<h3 id=\"class组件相对于函数式组件有什么优势？\"><a href=\"#class组件相对于函数式组件有什么优势？\" class=\"headerlink\" title=\"class组件相对于函数式组件有什么优势？\"></a>class组件相对于函数式组件有什么优势？</h3><ul>\n<li><p>class组件可以定义<strong>自己的state</strong>，用来<strong>保存组件自己内部的状态</strong>；</p>\n<ul>\n<li>函数式组件不可以，因为函数每次调用都会产生新的临时变量；</li>\n</ul>\n</li>\n<li><p>class组件有<strong>自己的生命周期</strong>，我们可以在<strong>对应的生命周期中完成自己的逻辑</strong>；</p>\n<ul>\n<li>比如在componentDidMount中发送网络请求，并且该生命周期函数只会执行一次；</li>\n<li>函数式组件在学习hooks之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求；</li>\n</ul>\n</li>\n<li><p>class组件可以在<strong>状态改变时只会重新执行render函数</strong>以及我<strong>们希望重新调用的生命周期函数componentDidUpdate等</strong>；</p>\n<ul>\n<li>函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以只让它们调用一次；</li>\n</ul>\n</li>\n</ul>\n<p><strong>所以，在Hook出现之前，对于上面这些情况我们通常都会编写class组件</strong></p>\n<h3 id=\"Class组件存在的问题\"><a href=\"#Class组件存在的问题\" class=\"headerlink\" title=\"Class组件存在的问题\"></a>Class组件存在的问题</h3><ul>\n<li><strong>复杂组件变得难以理解：</strong><ul>\n<li>我们在最初编写一个class组件时，往往逻辑比较简单，并不会非常复杂。但是<strong>随着业务的增多</strong>，我们的class组件会变得越来越复杂；</li>\n<li>比如componentDidMount中，可能就会包含大量的逻辑代码：包括网络请求、一些事件的监听（还需要在componentWillUnmount中移除）；</li>\n<li>而对于这样的class实际上非常难以拆分：因为它们的逻辑往往混在一起，强行拆分反而会造成过度设计，增加代码的复杂度；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Class组件和使用Hooks的函数式组件简单对比\"><a href=\"#Class组件和使用Hooks的函数式组件简单对比\" class=\"headerlink\" title=\"Class组件和使用Hooks的函数式组件简单对比\"></a><strong>Class组件和使用Hooks的函数式组件简单对比</strong></h3><p>类式组件</p>\n<p><img src=\"https://qny.aqingya.cn/img/20230419163325.png\"></p>\n<p>函数式组件：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20230419163541.png\"></p>\n<p>简洁程度可想而知。</p>\n<p><strong>小提示：Hook指的类似于useState、useEffect这样的函数；Hooks是对这类函数的统称；</strong></p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a><strong>useState</strong></h2><ul>\n<li><p><strong>useState</strong>会帮助我们<strong>定义一个 state变量</strong>，useState 是一种新方法，它与 <strong>class 里面的 this.state 提供的功能完全相同。</strong></p>\n<ul>\n<li>✓ 一般来说，<strong>在函数退出后变量就会”消失”</strong>，而 state 中的变量会被 React 保留。</li>\n</ul>\n</li>\n<li><p><strong>useState</strong>接受唯一一个参数，在第一次组件被调用时使用来作为初始化值。（如果没有传递参数，那么初始化值为undefined）。</p>\n</li>\n<li><p><strong>useState</strong>的返回值是一个数组，我们可以通过数组的解构，来完成赋值会非常方便。</p>\n<ul>\n<li> 数组解构：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li>\n</ul>\n</li>\n<li><p><strong>当然，我们也可以在一个组件中定义多个变量和复杂变量（数组、对象）</strong></p>\n</li>\n</ul>\n<p>小提示：<strong>为什么叫 useState 而不叫 createState?</strong></p>\n<ul>\n<li><p>“create” 可能不是很准确，因为 state 只在组件首次渲染的时候被创建。</p>\n</li>\n<li><p>在下一次重新渲染时，useState 返回给我们当前的 state。</p>\n</li>\n<li><p>如果每次都创建新的变量，它就不是 “state”了。</p>\n</li>\n<li><p>这也是 Hook 的名字<em>总是</em>以 use 开头的一个原因</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = useState(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">100</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [banners, setBanners] = useState([])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeMessage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setMessage(<span class=\"string\">&quot;你好啊, 李银河!&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>App: &#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;changeMessage&#125;</span>&gt;</span>修改文本<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a><strong>useEffect</strong></h2><ul>\n<li><p>通过useEffect的Hook，可以告诉<strong>React需要在渲染后执行某些操作</strong>；</p>\n</li>\n<li><p>useEffect要求<strong>我们传入一个回调函数</strong>，在React执行完<strong>更新DOM操作之后</strong>，就会<strong>回调这个函数</strong>；</p>\n</li>\n<li><p>默认情况下，<strong>无论是第一次渲染之后</strong>，还是每次更新之后，都会<strong>执行这个回调函数</strong>；</p>\n</li>\n</ul>\n<h3 id=\"useEffect的清除机制\"><a href=\"#useEffect的清除机制\" class=\"headerlink\" title=\"useEffect的清除机制\"></a><strong>useEffect的清除机制</strong></h3><p>useEffect传入的回调函数A本身可以有一个返回值，这个返回值是另外一个回调函数B：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type EffectCallback = <span class=\"function\">() =&gt;</span> (<span class=\"keyword\">void</span> | (<span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span> | <span class=\"literal\">undefined</span>));</span><br></pre></td></tr></table></figure>\n\n<p>为什么要在effect 中返回一个函数？</p>\n<ul>\n<li><p>这是effect 可选的清除机制。每个effect 都可以返回一个清除函数；</p>\n</li>\n<li><p>如此可以将添加和移除订阅的逻辑放在一起；</p>\n</li>\n<li><p>它们都属于effect 的一部分；</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 负责告知react, 在执行完当前组件渲染之后要执行的副作用代码</span></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.监听事件</span></span><br><span class=\"line\">    <span class=\"comment\">// const unubscribe = store.subscribe(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// function foo() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// eventBus.on(&quot;why&quot;, foo)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听redux中数据变化, 监听eventBus中的why事件&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回值: 回调函数 =&gt; 组件被重新渲染或者组件卸载的时候执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;取消监听redux中数据变化, 取消监听eventBus中的why事件&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用多个Effect\"><a href=\"#使用多个Effect\" class=\"headerlink\" title=\"使用多个Effect\"></a><strong>使用多个</strong>Effect</h3><p>使用Hook的其中一个目的就是解决class中生命周期经常将很多的逻辑放在一起的问题：比如网络请求、事件监听、手动修改DOM，这些往往都会放在componentDidMount中；</p>\n<p>Hook 允许我们按照代码的用途分离它们，而不是像生命周期函数那样：React 将按照effect 声明的顺序依次调用组件中的每一个effect；</p>\n<p>使用Effect Hook，我们可以将它们分离到不同的useEffect中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 负责告知react, 在执行完当前组件渲染之后要执行的副作用代码</span></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.修改document的title(1行)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;修改title&quot;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个函数式组件中, 可以存在多个useEffect</span></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2.对redux中数据变化监听(10行)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听redux中的数据&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 取消redux中数据的监听</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3.监听eventBus中的why事件(15行)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听eventBus的why事件&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 取消eventBus中的why事件监听</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect性能优化\"><a href=\"#useEffect性能优化\" class=\"headerlink\" title=\"useEffect性能优化\"></a><strong>useEffect性能优化</strong></h3><p><strong>默认情况下，useEffect的回调函数会在每次渲染时都重新执行，但是这会导致两个问题：</strong></p>\n<p>某些代码我们只是希望执行一次即可，类似于componentDidMount和componentWillUnmount中完成的事情；（比如网</p>\n<p>络请求、订阅和取消订阅）； 另外，多次执行也会导致一定的性能问题；</p>\n<p><strong>我们如何决定useEffect在什么时候应该执行和什么时候不应该执行呢？</strong></p>\n<p>useEffect实际上有两个参数：</p>\n<ul>\n<li><p>参数一：执行的回调函数；</p>\n</li>\n<li><p>参数二：该useEffect在哪些state发生变化时，才重新执行；（受谁的影响）</p>\n</li>\n</ul>\n<p><strong>但是，如果一个函数我们不希望依赖任何的内容时，也可以传入一个空的数组 []：</strong></p>\n<p>那么这里的两个回调函数分别对应的就是componentDidMount和componentWillUnmount生命周期函数了；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [message, setMessage] = useState(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;修改title:&quot;</span>, count)</span><br><span class=\"line\">  &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听redux中的数据&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;监听eventBus的why事件&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;发送网络请求, 从服务器获取数据&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;会在组件被卸载时, 才会执行一次&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;e</span> =&gt;</span> setMessage(&quot;你好啊&quot;)&#125;&gt;修改message(&#123;message&#125;)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a><strong>useContext</strong></h2><p>Context Hook允许我们通过Hook来直接获取某个Context的值；</p>\n<p><strong>注意事项：</strong></p>\n<p>当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重新渲染，并使用最新传递给 MyContext provider 的</p>\n<p>context value 值。</p>\n<p>index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = ReactDOM.createRoot(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\">root.render(</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;name:</span> &quot;<span class=\"attr\">why</span>&quot;, <span class=\"attr\">level:</span> <span class=\"attr\">99</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">TokenContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">coderwhy</span>&#x27;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">TokenContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">UserContext.Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>context/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserContext = createContext()</span><br><span class=\"line\"><span class=\"keyword\">const</span> ThemeContext = createContext()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  UserContext,</span><br><span class=\"line\">  ThemeContext</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>App.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; memo, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserContext, ThemeContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./context&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = memo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用Context</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = useContext(UserContext)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> theme = useContext(ThemeContext)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>User: &#123;user.name&#125;-&#123;user.level&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> <span class=\"attr\">theme.color</span>, <span class=\"attr\">fontSize:</span> <span class=\"attr\">theme.size</span>&#125;&#125;&gt;</span>Theme<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[{"name":"React","path":"api/categories/React.json"}],"tags":[{"name":"React","path":"api/tags/React.json"}]}