{"title":"es6之扩展运算符 (...)   简称三个点","slug":"42","date":"2020-06-24T04:45:32.000Z","updated":"2022-07-29T04:22:04.780Z","comments":true,"path":"api/articles/42.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/1729b3f6e0a9eed1.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/1729b3f6e0a9eed1.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"es6之扩展运算符-…-简称三个点\"><a href=\"#es6之扩展运算符-…-简称三个点\" class=\"headerlink\" title=\"es6之扩展运算符 (…)   简称三个点\"></a>es6之扩展运算符 (…)   简称三个点</h1><h2 id=\"对象的扩展运算符\"><a href=\"#对象的扩展运算符\" class=\"headerlink\" title=\"对象的扩展运算符\"></a>对象的扩展运算符</h2><p>理解对象的扩展运算符其实没有那么难，只要记住一句话就可以轻松掌握它:smiley:</p>\n<blockquote>\n<p><strong>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123; ...bar &#125;; <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码就相当于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, bar); <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>**<code style=\"color:red\">Object.assign</code><strong>方法用于对象的合并，将源对象（</strong><code style=\"color:red\">source</code><strong>）的所有可枚举属性，复制到目标对象（</strong><code style=\"color:red\">target</code>**）。</p>\n<p><strong><code style=\"color:red\">Object.assign</code><strong>方法的第一个参数是目标对象，后面的参数都是源对象。</strong>(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</strong>  <strong><code style=\"color:red\">Object.assign</code></strong> 的详细使用请看<a href=\"https://blog.csdn.net/wzg0817/article/details/106982135\">这里</a></p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123;...bar, ...&#123;<span class=\"attr\">a</span>:<span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span>&#125;&#125;;  <span class=\"comment\">// &#123;a: 2, b: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里有点需要注意的是扩展运算符对对象实例的拷贝属于一种浅拷贝。肯定有人要问什么是浅拷贝？我们知道<code style=\"color:red\">javascript</code>中有两种数据类型，分别是基础数据类型和引用数据类型。基础数据类型是按值访问的，常见的基础数据类型有<code style=\"color:red\">Number</code>、<code style=\"color:red\">Boolean</code>、<code style=\"color:red\">String</code>、<code style=\"color:red\">Null</code>、<code style=\"color:red\">Undefined</code>、<code style=\"color:red\">Symbol</code>、<code style=\"color:red\">BigInt</code>，这类变量的拷贝的时候会完整的复制一份；引用数据类型比如<code style=\"color:red\">Array</code>，在拷贝的时候拷贝的是对象的引用，当原对象发生变化的时候，拷贝对象也跟着变化，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; ...obj1, <span class=\"attr\">b</span>: <span class=\"string\">&#x27;aqing&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//  &#123;a: 1, b: &quot;aqing&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子扩展运算符拷贝的对象是<strong>基础数据类型</strong>，因此对<code>obj2</code>的修改并不会影响<code>obj1</code> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; ...obj1&#125;;</span><br><span class=\"line\">obj2.c.name = <span class=\"string\">&#x27;aqing&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">// &#123;a: 1, b: 2, c: &#123;name: &#x27;aqing&#x27;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">// &#123;a: 1, b: 2, c: &#123;name: &#x27;aqing&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到，对<code>obj2</code>的修改影响到了被拷贝对象<code>obj1</code>，原因上面已经说了，因为<code>obj1</code>中的对象<code>c</code>是一个引用数据类型，拷贝的时候拷贝的是对象的引用。</p>\n<h3 id=\"解构赋值与扩展运算符\"><a href=\"#解构赋值与扩展运算符\" class=\"headerlink\" title=\"解构赋值与扩展运算符\"></a>解构赋值与扩展运算符</h3><p>对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; x, y, ...z &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\">z <span class=\"comment\">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：由于解构赋值要求等号右边是一个对象，所以如果等号右边是<code>undefined</code>或<code>null</code>，就会报错，因为它们无法转为对象。而且解构赋值必须是最后一个参数，否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...z &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// 运行时错误</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...z &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 运行时错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...x, y, z &#125; = someObject; <span class=\"comment\">// 句法错误</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class=\"comment\">// 句法错误</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，扩展运算符的解构赋值，不能复制继承自原型对象的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">o2.__proto__ = o1;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...o3 &#125; = o2;</span><br><span class=\"line\">o3 <span class=\"comment\">// &#123; b: 2 &#125;</span></span><br><span class=\"line\">o3.a <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，对象<code>o3</code>复制了<code>o2</code>，但是只复制了<code>o2</code>自身的属性，没有复制它的原型对象<code>o1</code>的属性。</p>\n<p>如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;...<span class=\"string\">&#x27;hello&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;0: &quot;h&quot;, 1: &quot;e&quot;, 2: &quot;l&quot;, 3: &quot;l&quot;, 4: &quot;o&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>对象的扩展运算符等同于使用<code>Object.assign()</code>方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aClone = &#123; ...a &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> aClone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clone1 = <span class=\"built_in\">Object</span>.assign(</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(obj)),</span><br><span class=\"line\">  obj</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clone2 = <span class=\"built_in\">Object</span>.create(</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getPrototypeOf(obj),</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>比如看上面的例子 拷贝对象原型的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">o2.__proto__ = o1;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o3 = <span class=\"built_in\">Object</span>.assign(</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(o2)),</span><br><span class=\"line\">    o2</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3) <span class=\"comment\">// &#123; b: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.a) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>扩展运算符可以用于合并两个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ab = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数组中的扩展运算符\"><a href=\"#数组中的扩展运算符\" class=\"headerlink\" title=\"数组中的扩展运算符\"></a>数组中的扩展运算符</h2><p>扩展运算符（<code>spread</code>）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...document.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>)]</span><br><span class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure>\n\n<p>它也可以替代函数的 <code>apply </code>方法 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n\n<p>比如举一个简单的例子：求一个数组中最大的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"扩展运算符在数组中的常见应用\"><a href=\"#扩展运算符在数组中的常见应用\" class=\"headerlink\" title=\"扩展运算符在数组中的常见应用\"></a>扩展运算符在数组中的常见应用</h3><ul>\n<li><p>复制数组</p>\n<p> 数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1;</span><br><span class=\"line\"></span><br><span class=\"line\">a2[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">a1 <span class=\"comment\">// [2, 2]    </span></span><br></pre></td></tr></table></figure>\n\n<pre><code>   上面的例子中，`a2`并不是`a1`的克隆，而是指向同一份数据的另一个指针。对`a2`的修改会影响到`a1`。\n</code></pre>\n<p>但是 ES5 也有解决的方法 如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.concat();</span><br><span class=\"line\"></span><br><span class=\"line\">a2[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">a1 <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<p>​    上面代码中，<code>a1</code>会返回原数组的克隆，再修改<code>a2</code>就不会对<code>a1</code>产生影响。</p>\n<p>​    扩展运算符提供了复制数组的简便写法。如下： <code>a2</code>都是<code>a1</code>的克隆。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];</span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure>\n\n<p>​    还是记住那句话：<strong>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong>，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li>可以将数组转换为参数序列</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>与解构赋值结合</p>\n<p> 扩展运算符可以与解构赋值结合起来，用于生成数组</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">&quot;foo&quot;</span>];</span><br><span class=\"line\">first  <span class=\"comment\">// &quot;foo&quot;</span></span><br><span class=\"line\">rest   <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>但是有一点要注意</strong>：**<code>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</code>**</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [...rest, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></li>\n<li><p>扩展运算符还可以将字符串转为真正的数组。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">&#x27;hello&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong><span style=\"color:red\">对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</span></strong>  。 好好回味一下这句话吧。</p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n\n\n\n\n\n\n","more":"<h1 id=\"es6之扩展运算符-…-简称三个点\"><a href=\"#es6之扩展运算符-…-简称三个点\" class=\"headerlink\" title=\"es6之扩展运算符 (…)   简称三个点\"></a>es6之扩展运算符 (…)   简称三个点</h1><h2 id=\"对象的扩展运算符\"><a href=\"#对象的扩展运算符\" class=\"headerlink\" title=\"对象的扩展运算符\"></a>对象的扩展运算符</h2><p>理解对象的扩展运算符其实没有那么难，只要记住一句话就可以轻松掌握它:smiley:</p>\n<blockquote>\n<p><strong>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123; ...bar &#125;; <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码就相当于</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, bar); <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>**<code style=\"color:red\">Object.assign</code><strong>方法用于对象的合并，将源对象（</strong><code style=\"color:red\">source</code><strong>）的所有可枚举属性，复制到目标对象（</strong><code style=\"color:red\">target</code>**）。</p>\n<p><strong><code style=\"color:red\">Object.assign</code><strong>方法的第一个参数是目标对象，后面的参数都是源对象。</strong>(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</strong>  <strong><code style=\"color:red\">Object.assign</code></strong> 的详细使用请看<a href=\"https://blog.csdn.net/wzg0817/article/details/106982135\">这里</a></p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123;...bar, ...&#123;<span class=\"attr\">a</span>:<span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span>&#125;&#125;;  <span class=\"comment\">// &#123;a: 2, b: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里有点需要注意的是扩展运算符对对象实例的拷贝属于一种浅拷贝。肯定有人要问什么是浅拷贝？我们知道<code style=\"color:red\">javascript</code>中有两种数据类型，分别是基础数据类型和引用数据类型。基础数据类型是按值访问的，常见的基础数据类型有<code style=\"color:red\">Number</code>、<code style=\"color:red\">Boolean</code>、<code style=\"color:red\">String</code>、<code style=\"color:red\">Null</code>、<code style=\"color:red\">Undefined</code>、<code style=\"color:red\">Symbol</code>、<code style=\"color:red\">BigInt</code>，这类变量的拷贝的时候会完整的复制一份；引用数据类型比如<code style=\"color:red\">Array</code>，在拷贝的时候拷贝的是对象的引用，当原对象发生变化的时候，拷贝对象也跟着变化，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; ...obj1, <span class=\"attr\">b</span>: <span class=\"string\">&#x27;aqing&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">//  &#123;a: 1, b: &quot;aqing&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子扩展运算符拷贝的对象是<strong>基础数据类型</strong>，因此对<code>obj2</code>的修改并不会影响<code>obj1</code> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123; ...obj1&#125;;</span><br><span class=\"line\">obj2.c.name = <span class=\"string\">&#x27;aqing&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">// &#123;a: 1, b: 2, c: &#123;name: &#x27;aqing&#x27;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">// &#123;a: 1, b: 2, c: &#123;name: &#x27;aqing&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里可以看到，对<code>obj2</code>的修改影响到了被拷贝对象<code>obj1</code>，原因上面已经说了，因为<code>obj1</code>中的对象<code>c</code>是一个引用数据类型，拷贝的时候拷贝的是对象的引用。</p>\n<h3 id=\"解构赋值与扩展运算符\"><a href=\"#解构赋值与扩展运算符\" class=\"headerlink\" title=\"解构赋值与扩展运算符\"></a>解构赋值与扩展运算符</h3><p>对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; x, y, ...z &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\">z <span class=\"comment\">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：由于解构赋值要求等号右边是一个对象，所以如果等号右边是<code>undefined</code>或<code>null</code>，就会报错，因为它们无法转为对象。而且解构赋值必须是最后一个参数，否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...z &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// 运行时错误</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...z &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// 运行时错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...x, y, z &#125; = someObject; <span class=\"comment\">// 句法错误</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class=\"comment\">// 句法错误</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，扩展运算符的解构赋值，不能复制继承自原型对象的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">o2.__proto__ = o1;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; ...o3 &#125; = o2;</span><br><span class=\"line\">o3 <span class=\"comment\">// &#123; b: 2 &#125;</span></span><br><span class=\"line\">o3.a <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，对象<code>o3</code>复制了<code>o2</code>，但是只复制了<code>o2</code>自身的属性，没有复制它的原型对象<code>o1</code>的属性。</p>\n<p>如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;...<span class=\"string\">&#x27;hello&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;0: &quot;h&quot;, 1: &quot;e&quot;, 2: &quot;l&quot;, 3: &quot;l&quot;, 4: &quot;o&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>对象的扩展运算符等同于使用<code>Object.assign()</code>方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aClone = &#123; ...a &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> aClone = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clone1 = <span class=\"built_in\">Object</span>.assign(</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(obj)),</span><br><span class=\"line\">  obj</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clone2 = <span class=\"built_in\">Object</span>.create(</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getPrototypeOf(obj),</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>比如看上面的例子 拷贝对象原型的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">o2.__proto__ = o1;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o3 = <span class=\"built_in\">Object</span>.assign(</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(o2)),</span><br><span class=\"line\">    o2</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3) <span class=\"comment\">// &#123; b: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o3.a) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>扩展运算符可以用于合并两个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ab = &#123; ...a, ...b &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ab = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数组中的扩展运算符\"><a href=\"#数组中的扩展运算符\" class=\"headerlink\" title=\"数组中的扩展运算符\"></a>数组中的扩展运算符</h2><p>扩展运算符（<code>spread</code>）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...document.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>)]</span><br><span class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure>\n\n<p>它也可以替代函数的 <code>apply </code>方法 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f(...args);</span><br></pre></td></tr></table></figure>\n\n<p>比如举一个简单的例子：求一个数组中最大的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6 的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">14</span>, <span class=\"number\">3</span>, <span class=\"number\">77</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"扩展运算符在数组中的常见应用\"><a href=\"#扩展运算符在数组中的常见应用\" class=\"headerlink\" title=\"扩展运算符在数组中的常见应用\"></a>扩展运算符在数组中的常见应用</h3><ul>\n<li><p>复制数组</p>\n<p> 数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1;</span><br><span class=\"line\"></span><br><span class=\"line\">a2[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">a1 <span class=\"comment\">// [2, 2]    </span></span><br></pre></td></tr></table></figure>\n\n<pre><code>   上面的例子中，`a2`并不是`a1`的克隆，而是指向同一份数据的另一个指针。对`a2`的修改会影响到`a1`。\n</code></pre>\n<p>但是 ES5 也有解决的方法 如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = a1.concat();</span><br><span class=\"line\"></span><br><span class=\"line\">a2[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">a1 <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<p>​    上面代码中，<code>a1</code>会返回原数组的克隆，再修改<code>a2</code>就不会对<code>a1</code>产生影响。</p>\n<p>​    扩展运算符提供了复制数组的简便写法。如下： <code>a2</code>都是<code>a1</code>的克隆。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = [...a1];</span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure>\n\n<p>​    还是记住那句话：<strong>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong>，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li>可以将数组转换为参数序列</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>与解构赋值结合</p>\n<p> 扩展运算符可以与解构赋值结合起来，用于生成数组</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">&quot;foo&quot;</span>];</span><br><span class=\"line\">first  <span class=\"comment\">// &quot;foo&quot;</span></span><br><span class=\"line\">rest   <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p> <strong>但是有一点要注意</strong>：**<code>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</code>**</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [...rest, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></li>\n<li><p>扩展运算符还可以将字符串转为真正的数组。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">&#x27;hello&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong><span style=\"color:red\">对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</span></strong>  。 好好回味一下这句话吧。</p>\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"ES6","path":"api/categories/ES6.json"}],"tags":[{"name":"ES6","path":"api/tags/ES6.json"}]}