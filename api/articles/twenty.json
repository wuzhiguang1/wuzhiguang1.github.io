{"title":"JavaScript --- forEach() 方法详解","slug":"twenty","date":"2020-04-29T05:41:29.000Z","updated":"2022-07-29T04:22:04.750Z","comments":true,"path":"api/articles/twenty.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/bfa60f4389414aedbb61140ee5cdb8ab.jpg"],"content":"<p><img src=\"https://qny.aqingya.cn/img/bfa60f4389414aedbb61140ee5cdb8ab.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><blockquote>\n<p>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</p>\n</blockquote>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>callback<br>&emsp; &emsp;为数组中每个元素执行的函数，该函数接收一至三个参数：<br>currentValue<br> &emsp; &emsp;数组中正在处理的当前元素。<br> index (可选)<br> &emsp; &emsp; 数组中正在处理的当前元素的索引。<br> array  (可选)<br>  &emsp; forEach() 方法正在操作的数组。<br>  thisArg (可选)<br> &emsp;可选参数。当执行回调函数 callback 时，用作 this 的值。</p>\n</blockquote>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><blockquote>\n<p>undefined。</p>\n</blockquote>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>&emsp;&emsp; forEach() 方法按升序为数组中含有效值的每一项执行一次 callback 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。<br>&emsp;&emsp;可依次向 callback 函数传入三个参数：<br>&emsp;&emsp;&emsp;&emsp;1、数组当前项的值<br>&emsp;&emsp;&emsp;&emsp;2、数组当前项的索引<br>&emsp;&emsp;&emsp;&emsp;3、数组对象本身<br>&emsp;&emsp;如果 thisArg 参数有值，则每次 callback 函数被调用时，this 都会指向 thisArg 参数。如果省略了 thisArg 参数，或者其值为 null 或 undefined，this 则指向全局对象。按照函数观察到 this 的常用规则，callback 函数最终可观察到 this 值。<br>&emsp;&emsp;forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach() 遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了（例如使用 shift()），之后的元素将被跳过<br>&emsp;&emsp;forEach() 为每个数组元素执行一次 callback 函数；与 map() 或者 reduce() 不同的是，它总是返回 undefined 值，并且不可链式调用。其典型用例是在一个调用链的最后执行副作用（side effects，函数式编程上，指函数进行 返回结果值 以外的操作）。<br>&emsp;&emsp;forEach() 被调用时，不会改变原数组，也就是调用它的数组（尽管 callback 函数在被调用时可能会改变原数组）。（译注：此处说法可能不够明确，具体可参考EMCA语言规范：’forEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.’，即 forEach 不会直接改变调用它的对象，但是那个对象可能会被 callback 函数改变。）</p>\n</blockquote>\n<p><strong><span style=“color:red”>注意</span>： 除了抛出异常以外，没有办法中止或跳出 forEach() 循环。如果你需要中止或跳出循环，forEach() 方法不是应当使用的工具。</strong></p>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><p>3 和 7 之间空缺的数组单元未被 forEach() 调用 callback 函数，或进行任何其他操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arraySparse = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> numCallbackRuns = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">arraySparse.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(element);</span><br><span class=\"line\">  numCallbackRuns++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;numCallbackRuns: &quot;</span>, numCallbackRuns);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">// numCallbackRuns: 3</span></span><br></pre></td></tr></table></figure>\n<br>\n将 for 循环转换为 forEach\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> items = [<span class=\"string\">&#x27;item1&#x27;</span>, <span class=\"string\">&#x27;item2&#x27;</span>, <span class=\"string\">&#x27;item3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> copy = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// before</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;items.length; i++) &#123;</span><br><span class=\"line\">  copy.push(items[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after</span></span><br><span class=\"line\">items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  copy.push(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br>\n打印出数组的内容\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArrayElements</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a[&#x27;</span> + index + <span class=\"string\">&#x27;] = &#x27;</span> + element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意索引 2 被跳过了，因为在数组的这个位置没有项</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, , <span class=\"number\">9</span>].forEach(logArrayElements);</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// a[0] = 2</span></span><br><span class=\"line\"><span class=\"comment\">// a[1] = 5</span></span><br><span class=\"line\"><span class=\"comment\">// a[3] = 9</span></span><br></pre></td></tr></table></figure>\n<br>\n如果数组在迭代时被修改了，则其他元素会被跳过。\n\n<p>&emsp;&emsp;下面的例子会输出 “one”, “two”, “four”。当到达包含值 “two” 的项时，整个数组的第一个项被移除了，这导致所有剩下的项上移一个位置。因为元素 “four” 正位于在数组更前的位置，所以 “three” 会被跳过。 forEach() 不会在迭代之前创建数组的副本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>, <span class=\"string\">&#x27;four&#x27;</span>];</span><br><span class=\"line\">words.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (word === <span class=\"string\">&#x27;two&#x27;</span>) &#123;</span><br><span class=\"line\">    words.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// four</span></span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>\n","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><blockquote>\n<p>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</p>\n</blockquote>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>callback<br>&emsp; &emsp;为数组中每个元素执行的函数，该函数接收一至三个参数：<br>currentValue<br> &emsp; &emsp;数组中正在处理的当前元素。<br> index (可选)<br> &emsp; &emsp; 数组中正在处理的当前元素的索引。<br> array  (可选)<br>  &emsp; forEach() 方法正在操作的数组。<br>  thisArg (可选)<br> &emsp;可选参数。当执行回调函数 callback 时，用作 this 的值。</p>\n</blockquote>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><blockquote>\n<p>undefined。</p>\n</blockquote>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><blockquote>\n<p>&emsp;&emsp; forEach() 方法按升序为数组中含有效值的每一项执行一次 callback 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。<br>&emsp;&emsp;可依次向 callback 函数传入三个参数：<br>&emsp;&emsp;&emsp;&emsp;1、数组当前项的值<br>&emsp;&emsp;&emsp;&emsp;2、数组当前项的索引<br>&emsp;&emsp;&emsp;&emsp;3、数组对象本身<br>&emsp;&emsp;如果 thisArg 参数有值，则每次 callback 函数被调用时，this 都会指向 thisArg 参数。如果省略了 thisArg 参数，或者其值为 null 或 undefined，this 则指向全局对象。按照函数观察到 this 的常用规则，callback 函数最终可观察到 this 值。<br>&emsp;&emsp;forEach() 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach() 遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了（例如使用 shift()），之后的元素将被跳过<br>&emsp;&emsp;forEach() 为每个数组元素执行一次 callback 函数；与 map() 或者 reduce() 不同的是，它总是返回 undefined 值，并且不可链式调用。其典型用例是在一个调用链的最后执行副作用（side effects，函数式编程上，指函数进行 返回结果值 以外的操作）。<br>&emsp;&emsp;forEach() 被调用时，不会改变原数组，也就是调用它的数组（尽管 callback 函数在被调用时可能会改变原数组）。（译注：此处说法可能不够明确，具体可参考EMCA语言规范：’forEach does not directly mutate the object on which it is called but the object may be mutated by the calls to callbackfn.’，即 forEach 不会直接改变调用它的对象，但是那个对象可能会被 callback 函数改变。）</p>\n</blockquote>\n<p><strong><span style=“color:red”>注意</span>： 除了抛出异常以外，没有办法中止或跳出 forEach() 循环。如果你需要中止或跳出循环，forEach() 方法不是应当使用的工具。</strong></p>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><p>3 和 7 之间空缺的数组单元未被 forEach() 调用 callback 函数，或进行任何其他操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arraySparse = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,,<span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> numCallbackRuns = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">arraySparse.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(element);</span><br><span class=\"line\">  numCallbackRuns++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;numCallbackRuns: &quot;</span>, numCallbackRuns);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">// numCallbackRuns: 3</span></span><br></pre></td></tr></table></figure>\n<br>\n将 for 循环转换为 forEach\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> items = [<span class=\"string\">&#x27;item1&#x27;</span>, <span class=\"string\">&#x27;item2&#x27;</span>, <span class=\"string\">&#x27;item3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> copy = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// before</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;items.length; i++) &#123;</span><br><span class=\"line\">  copy.push(items[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after</span></span><br><span class=\"line\">items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  copy.push(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br>\n打印出数组的内容\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logArrayElements</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a[&#x27;</span> + index + <span class=\"string\">&#x27;] = &#x27;</span> + element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意索引 2 被跳过了，因为在数组的这个位置没有项</span></span><br><span class=\"line\">[<span class=\"number\">2</span>, <span class=\"number\">5</span>, , <span class=\"number\">9</span>].forEach(logArrayElements);</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// a[0] = 2</span></span><br><span class=\"line\"><span class=\"comment\">// a[1] = 5</span></span><br><span class=\"line\"><span class=\"comment\">// a[3] = 9</span></span><br></pre></td></tr></table></figure>\n<br>\n如果数组在迭代时被修改了，则其他元素会被跳过。\n\n<p>&emsp;&emsp;下面的例子会输出 “one”, “two”, “four”。当到达包含值 “two” 的项时，整个数组的第一个项被移除了，这导致所有剩下的项上移一个位置。因为元素 “four” 正位于在数组更前的位置，所以 “three” 会被跳过。 forEach() 不会在迭代之前创建数组的副本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>, <span class=\"string\">&#x27;four&#x27;</span>];</span><br><span class=\"line\">words.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">word</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (word === <span class=\"string\">&#x27;two&#x27;</span>) &#123;</span><br><span class=\"line\">    words.shift();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// four</span></span><br></pre></td></tr></table></figure>\n\n<br>\n<br>\n愿你的坚持终有收获。\n<br>\n<br>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}