{"title":"Vue 之 better-scroll 详解","slug":"83","date":"2020-08-11T15:56:47.000Z","updated":"2022-07-29T04:22:04.761Z","comments":true,"path":"api/articles/83.json","excerpt":" [Figure] ","covers":["https://qny.aqingya.cn/img/20200812000321.jpg","https://qny.aqingya.cn/img/20200811215946.png","https://qny.aqingya.cn/img/20200811222540.png","https://qny.aqingya.cn/img/20200811223454.png","https://qny.aqingya.cn/img/20200811224350.png","https://qny.aqingya.cn/img/20200811225600.png","https://qny.aqingya.cn/img/20200811225703.png","https://qny.aqingya.cn/img/20200811230405.png","https://qny.aqingya.cn/img/20200811230559.png","https://qny.aqingya.cn/img/20200811231017.png","https://qny.aqingya.cn/img/20200811231227.png","https://qny.aqingya.cn/img/20200811231206.png","https://qny.aqingya.cn/img/20200811231453.png","https://qny.aqingya.cn/img/20200811231431.png","https://qny.aqingya.cn/img/20200811232034.png","https://qny.aqingya.cn/img/20200811234651.png","https://qny.aqingya.cn/img/20200811235048.png"],"content":"<p><img src=\"https://qny.aqingya.cn/img/20200812000321.jpg\"></p>\n<span id=\"more\"></span>\n\n\n\n\n\n<h2 id=\"better-scroll-是什么\"><a href=\"#better-scroll-是什么\" class=\"headerlink\" title=\"better-scroll 是什么\"></a>better-scroll 是什么</h2><p>better-scroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 <a href=\"https://github.com/cubiq/iscroll\">iscroll</a> 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p>\n<p>better-scroll 是基于原生 JS 实现的，不依赖任何框架。它编译后的代码大小是 63kb，压缩后是 35kb，gzip 后仅有 9kb，是一款非常轻量的 JS lib。</p>\n<br>\n\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>学习使用 better-scroll 最好的方式是看它的 demo 代码，我们把代码都放在了 <a href=\"https://github.com/ustbhuangyi/better-scroll/tree/master/example\">example</a> 目录。由于目前最适合移动端开发的前端 mvvm 框架是 <a href=\"https://github.com/vuejs/vue\">Vue</a>，并且 better-scroll 可以很好的和 Vue 配合使用的，所以 demo 我都用 Vue 进行了重写。</p>\n<p>better-scroll 最常见的应用场景是列表滚动，我们来看一下它的 html 结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrapper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里可以放一些其它的 DOM，但不会影响滚动 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中 better-scroll 是作用在外层 wrapper 容器上的，滚动的部分是 content 元素。这里要注意的是，better-scroll 只处理容器（wrapper）的第一个子元素（content）的滚动，其它的元素都会被忽略。</p>\n<p>最简单的初始化代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//let wrapper = document.querySelector(&#x27;.wrapper&#x27;)  // 现在一般是使用ref 来获取wrapper 比较准确</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wrapper = <span class=\"built_in\">this</span>.$refs.wrapper</span><br><span class=\"line\"><span class=\"keyword\">let</span> scroll = <span class=\"keyword\">new</span> BScroll(wrapper)</span><br></pre></td></tr></table></figure>\n\n<p>better-scroll 提供了一个类，实例化的第一个参数是一个原生的 DOM 对象。当然，如果传递的是一个字符串，better-scroll 内部会尝试调用 querySelector 去获取这个 DOM 对象，所以初始化代码也可以是这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scroll = <span class=\"keyword\">new</span> BScroll(<span class=\"string\">&#x27;.wrapper&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"滚动原理\"><a href=\"#滚动原理\" class=\"headerlink\" title=\"滚动原理\"></a>滚动原理</h2><p>很多人已经用过 better-scroll，我收到反馈最多的问题是：</p>\n<blockquote>\n<p>better-scroll 初始化了， 但是没法滚动。</p>\n</blockquote>\n<p>不能滚动是现象，我们得搞清楚这其中的根本原因。在这之前，我们先来看一下浏览器的滚动原理： <strong>浏览器的滚动条大家都会遇到，当页面内容的高度超过视口高度的时候，会出现纵向滚动条；当页面内容的宽度超过视口宽度的时候，会出现横向滚动条。也就是当我们的视口展示不下内容的时候，会通过滚动条的方式让用户滚动屏幕看到剩余的内容。</strong></p>\n<p>better-scroll 也是一样的原理，我们可以用一张图更直观的感受一下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811215946.png\"></p>\n<p><span style=\"color:red\">绿色部分为 wrapper，也就是父容器，它会有<strong>固定的高度</strong>。黄色部分为 content，它是父容器的<strong>第一个子元素</strong>，它的高度会随着内容的大小而撑高。那么，当 content 的高度不超过父容器的高度，是不能滚动的，而它一旦超过了父容器的高度，我们就可以滚动内容区了，这就是 better-scroll 的滚动原理。</span></p>\n<br>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><br>\n\n<h3 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h3><p>better-scroll 托管在 Npm 上，执行如下命令安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install better-scroll --save</span><br></pre></td></tr></table></figure>\n\n<p>接下来就可以在代码中引入了，<a href=\"https://webpack.js.org/\">webpack</a> 等构建工具都支持从 node_modules 里引入代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是 ES5 的语法，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> BScroll = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;better-scroll&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"script-加载\"><a href=\"#script-加载\" class=\"headerlink\" title=\"script 加载\"></a>script 加载</h3><p>better-scroll 也支持直接用 script 加载的方式，加载后会在 window 上挂载一个 BScroll 的对象。</p>\n<p>你可以直接用：<code>https://unpkg.com/better-scroll/dist/bscroll.min.js</code> 这个地址。也可以把 dist 目录下的文件拷贝出去发布到自己的 cdn 服务器。</p>\n<br>\n\n<h2 id=\"better-scroll-在Vue项目中的使用\"><a href=\"#better-scroll-在Vue项目中的使用\" class=\"headerlink\" title=\"better-scroll 在Vue项目中的使用\"></a>better-scroll 在Vue项目中的使用</h2><br>\n\n<h3 id=\"对better-scroll-的简单使用\"><a href=\"#对better-scroll-的简单使用\" class=\"headerlink\" title=\"对better-scroll 的简单使用\"></a>对better-scroll 的简单使用</h3><p><img src=\"https://qny.aqingya.cn/img/20200811222540.png\"></p>\n<br>\n\n<p>1、由上面知道我们在使用better-scroll 的时候，必须将内容包括在一个wrapper 容器中，里面还有一个content容器，而且我们滚动的内容必须包括在一个标签中，比如上面的ul ，content中只有ul标签。</p>\n<p>2、<strong>我们在better-scroll 初始化的时候，必须在 mounted() 函数中。因为在vue的生命周期中，到了mounted阶段才有真实的DOM，我们才可以获取到 wrapper 。</strong></p>\n<p>3、我们还要给wrapper设置一个固定的高度，用于显示滚动。</p>\n<br>\n\n<p>测试结果：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811223454.png\"></p>\n<br>\n\n<h3 id=\"监听滚动位置\"><a href=\"#监听滚动位置\" class=\"headerlink\" title=\"监听滚动位置\"></a>监听滚动位置</h3><br>\n\n<p><strong>默认情况下 better-scroll 是无法实时监听页面的滚动位置的。</strong> 这样我们就需要给 better-scroll 进行一些配置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bscorll = <span class=\"keyword\">new</span> bScorll(<span class=\"built_in\">this</span>.$refs.wrapper,&#123;</span><br><span class=\"line\">   <span class=\"comment\">//在这里添加配置项  </span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200811224350.png\"></p>\n<br>\n\n<p> probeType</p>\n<p>&emsp;&emsp;类型：Number</p>\n<p>&emsp;&emsp;默认值：0</p>\n<p>&emsp;&emsp;可选值：1、2、3</p>\n<p>作用：有时候我们需要知道滚动的位置。</p>\n<p>当 probeType 为 1 的时候，会非实时（屏幕滑动超过一定时间后）派发<a href=\"https://better-scroll.github.io/docs/zh-CN/guide/api.html#scroll\">scroll 事件</a>；</p>\n<p>当 probeType 为 2 的时候，会在屏幕滑动的过程中实时的派发 scroll 事件；（在手指滚动的过程中侦测，手指离开后的惯性滚动过程中不侦测。）</p>\n<p>当 probeType 为 3 的时候，不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件。( 就是我们用手用力滑动的时候，手放开之后，屏幕还在滑动，这就叫momentum 滚动动画 )</p>\n<p>如果没有设置该值，其默认值为 0，即不派发 scroll 事件。</p>\n<br>\n\n<h3 id=\"上拉加载更多\"><a href=\"#上拉加载更多\" class=\"headerlink\" title=\"上拉加载更多\"></a>上拉加载更多</h3><br>\n\n<p><a href=\"https://better-scroll.github.io/docs/zh-CN/plugins/pullup.html#pullup\">传送门</a></p>\n<p>当我们上拉页面的时候 有时候需要请求更多的数据，这个时候就可以使用上拉加载pullup 。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811225600.png\"></p>\n<p>效果图：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811225703.png\"></p>\n<br>\n\n<p>等我们将新的数据展示完成之后，如果我们还有继续去上拉加载请求数据的话，就不行了。</p>\n<p>我们可以这样做：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811230405.png\"></p>\n<p><strong>在请求完成数据之后，用bscorll 实例去调用 finnishPullUp() 函数。这样在可以多次使用上拉加载了。</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811230559.png\"></p>\n<h3 id=\"click-事件\"><a href=\"#click-事件\" class=\"headerlink\" title=\"click 事件\"></a>click 事件</h3><p>BetterScroll 默认会阻止浏览器的原生 click 事件。当设置为 true，BetterScroll 会派发一个 click 事件，我们会给派发的 event 参数加一个私有属性 <code>_constructed</code>，值为 true。</p>\n<p>比如我们给 第一个里添加一个点击事件liclick。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231017.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231227.png\"></p>\n<p><strong>我们发现设置点击事件之后 点击并没有什么反应。</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231206.png\"></p>\n<br>\n\n<p>当我配置了 click：true 之后。我们在点击，就会有效果。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231453.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231431.png\"></p>\n<br>\n\n<h2 id=\"对better-scroll-进行封装\"><a href=\"#对better-scroll-进行封装\" class=\"headerlink\" title=\"对better-scroll 进行封装\"></a>对better-scroll 进行封装</h2><br>\n\n<p>我们为什么要对better-scroll 进行封装呐？我们来看一个图</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811232034.png\"></p>\n<br>\n\n<p>如果我们不封装，直接在每一个页面中都引入better-scroll ，耦合度太强，由于better-scroll是第三方插件，如果哪一天这个插件不能使用，不再出现重大bug，不再维护了，我们就需要每个页面都需要修改，很是不好。</p>\n<p>当我们封装一下的时候，我们使用滚动的时候，只需要面向 我们封装的scroll.vue 来使用，而scroll.vue 是面向 better-scroll 的。这样即使有一天这个插件不能使用，不再出现重大bug，不再维护了。我们只需修改我们封装的scroll.vue 即可。</p>\n<br>\n\n<p>我这里对scroll.vue 进行简单的封装一下 。scroll.vue</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  data () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">scroll</span>: <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"comment\">// 组件创建完后调用。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  mounted () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.scroll = <span class=\"keyword\">new</span> BScroll(<span class=\"built_in\">this</span>.$refs.wrapper,&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">click</span>:<span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果有需要其他的功能，我们可以自己添加。</p>\n<p>使用：</p>\n<p>引入scroll.vue，并注册，将滚动的内容 添加到 注册的标签中。并为其设置一个高度</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811234651.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811235048.png\"></p>\n<br>\n\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><p>BetterScroll 2.X 里面，我们将 1.X 耦合的 feature 拆分至插件，以达到按需加载、减少包体积的目的。因此，<code>@better-scroll/core</code> 只提供了最核心的滚动能力。如果想要实现<strong>上拉刷新</strong>、<strong>下拉加载</strong>的功能，你需要使用对应的<a href=\"https://better-scroll.github.io/zh-CN/plugins\">插件</a>。</p>\n<p>BetterScroll 1.x :  <a href=\"https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/#better-scroll%20%E6%98%AF%E4%BB%80%E4%B9%88\">传送门</a></p>\n<p>BetterScroll 2.x ：<a href=\"https://better-scroll.github.io/docs/zh-CN/guide/#betterscroll-%E6%98%AF%E4%BB%80%E4%B9%88\">传送门</a></p>\n<p>当 better-scroll 遇见 Vue：<a href=\"https://zhuanlan.zhihu.com/p/27407024\">传送门</a></p>\n<br>\n\n<br>\n\n<br>\n\n\n\n\n\n","more":"<h2 id=\"better-scroll-是什么\"><a href=\"#better-scroll-是什么\" class=\"headerlink\" title=\"better-scroll 是什么\"></a>better-scroll 是什么</h2><p>better-scroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 <a href=\"https://github.com/cubiq/iscroll\">iscroll</a> 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p>\n<p>better-scroll 是基于原生 JS 实现的，不依赖任何框架。它编译后的代码大小是 63kb，压缩后是 35kb，gzip 后仅有 9kb，是一款非常轻量的 JS lib。</p>\n<br>\n\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p>学习使用 better-scroll 最好的方式是看它的 demo 代码，我们把代码都放在了 <a href=\"https://github.com/ustbhuangyi/better-scroll/tree/master/example\">example</a> 目录。由于目前最适合移动端开发的前端 mvvm 框架是 <a href=\"https://github.com/vuejs/vue\">Vue</a>，并且 better-scroll 可以很好的和 Vue 配合使用的，所以 demo 我都用 Vue 进行了重写。</p>\n<p>better-scroll 最常见的应用场景是列表滚动，我们来看一下它的 html 结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrapper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里可以放一些其它的 DOM，但不会影响滚动 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中 better-scroll 是作用在外层 wrapper 容器上的，滚动的部分是 content 元素。这里要注意的是，better-scroll 只处理容器（wrapper）的第一个子元素（content）的滚动，其它的元素都会被忽略。</p>\n<p>最简单的初始化代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//let wrapper = document.querySelector(&#x27;.wrapper&#x27;)  // 现在一般是使用ref 来获取wrapper 比较准确</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wrapper = <span class=\"built_in\">this</span>.$refs.wrapper</span><br><span class=\"line\"><span class=\"keyword\">let</span> scroll = <span class=\"keyword\">new</span> BScroll(wrapper)</span><br></pre></td></tr></table></figure>\n\n<p>better-scroll 提供了一个类，实例化的第一个参数是一个原生的 DOM 对象。当然，如果传递的是一个字符串，better-scroll 内部会尝试调用 querySelector 去获取这个 DOM 对象，所以初始化代码也可以是这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scroll = <span class=\"keyword\">new</span> BScroll(<span class=\"string\">&#x27;.wrapper&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"滚动原理\"><a href=\"#滚动原理\" class=\"headerlink\" title=\"滚动原理\"></a>滚动原理</h2><p>很多人已经用过 better-scroll，我收到反馈最多的问题是：</p>\n<blockquote>\n<p>better-scroll 初始化了， 但是没法滚动。</p>\n</blockquote>\n<p>不能滚动是现象，我们得搞清楚这其中的根本原因。在这之前，我们先来看一下浏览器的滚动原理： <strong>浏览器的滚动条大家都会遇到，当页面内容的高度超过视口高度的时候，会出现纵向滚动条；当页面内容的宽度超过视口宽度的时候，会出现横向滚动条。也就是当我们的视口展示不下内容的时候，会通过滚动条的方式让用户滚动屏幕看到剩余的内容。</strong></p>\n<p>better-scroll 也是一样的原理，我们可以用一张图更直观的感受一下：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811215946.png\"></p>\n<p><span style=\"color:red\">绿色部分为 wrapper，也就是父容器，它会有<strong>固定的高度</strong>。黄色部分为 content，它是父容器的<strong>第一个子元素</strong>，它的高度会随着内容的大小而撑高。那么，当 content 的高度不超过父容器的高度，是不能滚动的，而它一旦超过了父容器的高度，我们就可以滚动内容区了，这就是 better-scroll 的滚动原理。</span></p>\n<br>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><br>\n\n<h3 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h3><p>better-scroll 托管在 Npm 上，执行如下命令安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install better-scroll --save</span><br></pre></td></tr></table></figure>\n\n<p>接下来就可以在代码中引入了，<a href=\"https://webpack.js.org/\">webpack</a> 等构建工具都支持从 node_modules 里引入代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是 ES5 的语法，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> BScroll = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;better-scroll&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"script-加载\"><a href=\"#script-加载\" class=\"headerlink\" title=\"script 加载\"></a>script 加载</h3><p>better-scroll 也支持直接用 script 加载的方式，加载后会在 window 上挂载一个 BScroll 的对象。</p>\n<p>你可以直接用：<code>https://unpkg.com/better-scroll/dist/bscroll.min.js</code> 这个地址。也可以把 dist 目录下的文件拷贝出去发布到自己的 cdn 服务器。</p>\n<br>\n\n<h2 id=\"better-scroll-在Vue项目中的使用\"><a href=\"#better-scroll-在Vue项目中的使用\" class=\"headerlink\" title=\"better-scroll 在Vue项目中的使用\"></a>better-scroll 在Vue项目中的使用</h2><br>\n\n<h3 id=\"对better-scroll-的简单使用\"><a href=\"#对better-scroll-的简单使用\" class=\"headerlink\" title=\"对better-scroll 的简单使用\"></a>对better-scroll 的简单使用</h3><p><img src=\"https://qny.aqingya.cn/img/20200811222540.png\"></p>\n<br>\n\n<p>1、由上面知道我们在使用better-scroll 的时候，必须将内容包括在一个wrapper 容器中，里面还有一个content容器，而且我们滚动的内容必须包括在一个标签中，比如上面的ul ，content中只有ul标签。</p>\n<p>2、<strong>我们在better-scroll 初始化的时候，必须在 mounted() 函数中。因为在vue的生命周期中，到了mounted阶段才有真实的DOM，我们才可以获取到 wrapper 。</strong></p>\n<p>3、我们还要给wrapper设置一个固定的高度，用于显示滚动。</p>\n<br>\n\n<p>测试结果：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811223454.png\"></p>\n<br>\n\n<h3 id=\"监听滚动位置\"><a href=\"#监听滚动位置\" class=\"headerlink\" title=\"监听滚动位置\"></a>监听滚动位置</h3><br>\n\n<p><strong>默认情况下 better-scroll 是无法实时监听页面的滚动位置的。</strong> 这样我们就需要给 better-scroll 进行一些配置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bscorll = <span class=\"keyword\">new</span> bScorll(<span class=\"built_in\">this</span>.$refs.wrapper,&#123;</span><br><span class=\"line\">   <span class=\"comment\">//在这里添加配置项  </span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://qny.aqingya.cn/img/20200811224350.png\"></p>\n<br>\n\n<p> probeType</p>\n<p>&emsp;&emsp;类型：Number</p>\n<p>&emsp;&emsp;默认值：0</p>\n<p>&emsp;&emsp;可选值：1、2、3</p>\n<p>作用：有时候我们需要知道滚动的位置。</p>\n<p>当 probeType 为 1 的时候，会非实时（屏幕滑动超过一定时间后）派发<a href=\"https://better-scroll.github.io/docs/zh-CN/guide/api.html#scroll\">scroll 事件</a>；</p>\n<p>当 probeType 为 2 的时候，会在屏幕滑动的过程中实时的派发 scroll 事件；（在手指滚动的过程中侦测，手指离开后的惯性滚动过程中不侦测。）</p>\n<p>当 probeType 为 3 的时候，不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件。( 就是我们用手用力滑动的时候，手放开之后，屏幕还在滑动，这就叫momentum 滚动动画 )</p>\n<p>如果没有设置该值，其默认值为 0，即不派发 scroll 事件。</p>\n<br>\n\n<h3 id=\"上拉加载更多\"><a href=\"#上拉加载更多\" class=\"headerlink\" title=\"上拉加载更多\"></a>上拉加载更多</h3><br>\n\n<p><a href=\"https://better-scroll.github.io/docs/zh-CN/plugins/pullup.html#pullup\">传送门</a></p>\n<p>当我们上拉页面的时候 有时候需要请求更多的数据，这个时候就可以使用上拉加载pullup 。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811225600.png\"></p>\n<p>效果图：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811225703.png\"></p>\n<br>\n\n<p>等我们将新的数据展示完成之后，如果我们还有继续去上拉加载请求数据的话，就不行了。</p>\n<p>我们可以这样做：</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811230405.png\"></p>\n<p><strong>在请求完成数据之后，用bscorll 实例去调用 finnishPullUp() 函数。这样在可以多次使用上拉加载了。</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811230559.png\"></p>\n<h3 id=\"click-事件\"><a href=\"#click-事件\" class=\"headerlink\" title=\"click 事件\"></a>click 事件</h3><p>BetterScroll 默认会阻止浏览器的原生 click 事件。当设置为 true，BetterScroll 会派发一个 click 事件，我们会给派发的 event 参数加一个私有属性 <code>_constructed</code>，值为 true。</p>\n<p>比如我们给 第一个里添加一个点击事件liclick。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231017.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231227.png\"></p>\n<p><strong>我们发现设置点击事件之后 点击并没有什么反应。</strong></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231206.png\"></p>\n<br>\n\n<p>当我配置了 click：true 之后。我们在点击，就会有效果。</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231453.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811231431.png\"></p>\n<br>\n\n<h2 id=\"对better-scroll-进行封装\"><a href=\"#对better-scroll-进行封装\" class=\"headerlink\" title=\"对better-scroll 进行封装\"></a>对better-scroll 进行封装</h2><br>\n\n<p>我们为什么要对better-scroll 进行封装呐？我们来看一个图</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811232034.png\"></p>\n<br>\n\n<p>如果我们不封装，直接在每一个页面中都引入better-scroll ，耦合度太强，由于better-scroll是第三方插件，如果哪一天这个插件不能使用，不再出现重大bug，不再维护了，我们就需要每个页面都需要修改，很是不好。</p>\n<p>当我们封装一下的时候，我们使用滚动的时候，只需要面向 我们封装的scroll.vue 来使用，而scroll.vue 是面向 better-scroll 的。这样即使有一天这个插件不能使用，不再出现重大bug，不再维护了。我们只需修改我们封装的scroll.vue 即可。</p>\n<br>\n\n<p>我这里对scroll.vue 进行简单的封装一下 。scroll.vue</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">&#x27;better-scroll&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  data () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">scroll</span>: <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"comment\">// 组件创建完后调用。</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  mounted () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"built_in\">this</span>.scroll = <span class=\"keyword\">new</span> BScroll(<span class=\"built_in\">this</span>.$refs.wrapper,&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">click</span>:<span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果有需要其他的功能，我们可以自己添加。</p>\n<p>使用：</p>\n<p>引入scroll.vue，并注册，将滚动的内容 添加到 注册的标签中。并为其设置一个高度</p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811234651.png\"></p>\n<p><img src=\"https://qny.aqingya.cn/img/20200811235048.png\"></p>\n<br>\n\n<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><p>BetterScroll 2.X 里面，我们将 1.X 耦合的 feature 拆分至插件，以达到按需加载、减少包体积的目的。因此，<code>@better-scroll/core</code> 只提供了最核心的滚动能力。如果想要实现<strong>上拉刷新</strong>、<strong>下拉加载</strong>的功能，你需要使用对应的<a href=\"https://better-scroll.github.io/zh-CN/plugins\">插件</a>。</p>\n<p>BetterScroll 1.x :  <a href=\"https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/#better-scroll%20%E6%98%AF%E4%BB%80%E4%B9%88\">传送门</a></p>\n<p>BetterScroll 2.x ：<a href=\"https://better-scroll.github.io/docs/zh-CN/guide/#betterscroll-%E6%98%AF%E4%BB%80%E4%B9%88\">传送门</a></p>\n<p>当 better-scroll 遇见 Vue：<a href=\"https://zhuanlan.zhihu.com/p/27407024\">传送门</a></p>\n<br>\n\n<br>\n\n<br>","categories":[{"name":"Vue","path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","path":"api/tags/Vue.json"},{"name":"BetterScroll","path":"api/tags/BetterScroll.json"}]}