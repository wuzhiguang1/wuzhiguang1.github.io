{"title":"JS 原生事件总结","slug":"239","date":"2022-10-27T02:23:08.000Z","updated":"2022-11-02T09:08:39.905Z","comments":true,"path":"api/articles/239.json","excerpt":null,"covers":null,"content":"<h3 id=\"1-事件对象-event\"><a href=\"#1-事件对象-event\" class=\"headerlink\" title=\"1. 事件对象  event\"></a>1. 事件对象  event</h3><p>首先，事件对象 event 是一个对象，包含着跟事件有关的所有信息，包括触发事件的 dom 以及 每种事件的一些特征。当dom操作触发某个事件时，会产生事件对象 event， 当事件被触发时产生，事件执行完毕时销毁。<br> 获取鼠标在那个标签上 e.target</p>\n<h3 id=\"2-事件流\"><a href=\"#2-事件流\" class=\"headerlink\" title=\"2. 事件流\"></a>2. 事件流</h3><p><strong>2.1. 事件捕获:</strong> 当时事件被触发的时候，系统会从 window 开始 依次向下遍历，遍历的过程中，遇到没有触发的相同事件便触发。<br> (window =&gt; document =&gt; html =&gt; body =&gt; 祖先元素 =&gt; 父元素 =&gt; 目标元素)</p>\n<p><strong>2.2 事件触发:</strong> 直到找到触发这个事件的元素，触发元素绑定的事件方法</p>\n<p><strong>2.3 事件冒泡:</strong>  触发目标事件之后，然后会一层一层向上遍历，遍历的过程中，遇到没有触发的相同事件便触发。</p>\n<p>直到返回 window 结束 这整个过程叫做事件流。</p>\n<p>事件捕获 和 事件冒泡 同一事件流 只能有一个生效，JS中默认执行事件冒泡 (false)。</p>\n<h5 id=\"阻止事件冒泡\"><a href=\"#阻止事件冒泡\" class=\"headerlink\" title=\"阻止事件冒泡\"></a>阻止事件冒泡</h5><ol>\n<li>event.stopPropogation();(IE)     ||    window.event.cancelBubble = true; (非IE)</li>\n<li>在 Jquery 中 可以直接使用 return false；</li>\n</ol>\n<h3 id=\"3-Dom0级-与-Dom2级\"><a href=\"#3-Dom0级-与-Dom2级\" class=\"headerlink\" title=\"3. Dom0级 与 Dom2级\"></a>3. Dom0级 与 Dom2级</h3><p><strong>3.1 Dom 0级</strong><br> 写法： ele.on事件名 = function(){}<br> 特点： js 与 html 完全分离 便于封装<br> 缺点:    同一个DOM对象 同时间只能绑定一个 同事件<br>     也就是说 一个 dom对象 只能执行一个事件处理函数<br>     如果给 这个事件 绑定了多个事件处理函数, 则执行最后一个事件处理函数</p>\n<p><strong>3.2 Dom 2级(事件监听)</strong><br> 写法：<br>    ele.addEventListener(“事件类型”,事件处理函数,bool)<br>    事件处理函数可以是：  匿名函数、  命名函数、  对象<br>    bool: 布尔值 (只有true 和 false) 不写默认为 false<br>    true： 触发 事件捕获   false：触发事件冒泡<br> 特点:<br>    1.DOM 2级不会与DOM 0级事件冲突 同时存在时两个都执行<br>    2.可以绑定多个事件函数 不会起冲突<br>    Dom2级 可以删除命名函数  事件移除 removeEventListener</p>\n<h3 id=\"4-常见事件类型：\"><a href=\"#4-常见事件类型：\" class=\"headerlink\" title=\"4.  常见事件类型：\"></a>4.  常见事件类型：</h3><p>注意：  事件名中没有 on，   on是DOM0级的写法</p>\n<p><strong>4.1 鼠标事件</strong></p>\n<ol>\n<li>单机事件   click<br>\\2. 双击事件   dblclick<br>\\3. 右键事件   contextmenu      默认事件：右击打开默认菜单栏<br>\\4. 移入事件   mouseenter<br>\\5. 移出事件   mouseout        mouseover<br>\\6. 移动事件   mouseenter     mouseleave<br>\\7. 按下事件   mousedown<br>\\8. 释放事件   mouseup<br>\\9. 滚轮事件   mousewheel     <strong>e.wheelDelta</strong>   &gt; 0 向上滑   &lt; 0 向下滑</li>\n</ol>\n<p><strong>4.2 键盘事件</strong><br> \\1. 键盘按下事件 只要按下就一直触发   keydown     获取键码：<strong>e.keyCode</strong><br> \\2. 键盘抬起事件        keyup</p>\n<p><strong>4.3 UI事件(窗口事件)</strong><br> \\1. 资源加载完毕      load<br> \\2. 窗口大小发生改变   resize<br> \\3. 窗口滚动条         scroll<br> \\4. 资源加载完毕     error</p>\n<p><strong>4.4 表单事件</strong><br> \\1. 获取焦点    focus<br> \\2. 失去焦点    blur<br> \\3. 正在输入    input<br> \\4. 内容发生改变 change</p>\n<h3 id=\"5-其他：\"><a href=\"#5-其他：\" class=\"headerlink\" title=\"5. 其他：\"></a>5. 其他：</h3><p><strong>1.获取鼠标坐标：</strong><br> \\1. 在浏览器的可视窗口的坐标 — e.clientX  /   e.clientY<br> \\2. 在标签内的坐标 —– e.offsetX /  e.offsetY<br> \\3. 在屏幕内的坐标 —–  e.screenX / e. screenY<br> \\4. 在文档中内的坐标 – e.pageX  /  e.pageY</p>\n<p><strong>2. 阻止默认事件：</strong></p>\n<ol>\n<li>event.preventDefault(); (IE下)  ||  window.event.returnValue = false;    (非IE下)</li>\n<li>在 Jquery 中 可以直接使用 return false；</li>\n</ol>\n<p>转载：<code>https://www.jianshu.com/p/3ccc4f0a3f0a</code></p>\n","more":"<h3 id=\"1-事件对象-event\"><a href=\"#1-事件对象-event\" class=\"headerlink\" title=\"1. 事件对象  event\"></a>1. 事件对象  event</h3><p>首先，事件对象 event 是一个对象，包含着跟事件有关的所有信息，包括触发事件的 dom 以及 每种事件的一些特征。当dom操作触发某个事件时，会产生事件对象 event， 当事件被触发时产生，事件执行完毕时销毁。<br> 获取鼠标在那个标签上 e.target</p>\n<h3 id=\"2-事件流\"><a href=\"#2-事件流\" class=\"headerlink\" title=\"2. 事件流\"></a>2. 事件流</h3><p><strong>2.1. 事件捕获:</strong> 当时事件被触发的时候，系统会从 window 开始 依次向下遍历，遍历的过程中，遇到没有触发的相同事件便触发。<br> (window =&gt; document =&gt; html =&gt; body =&gt; 祖先元素 =&gt; 父元素 =&gt; 目标元素)</p>\n<p><strong>2.2 事件触发:</strong> 直到找到触发这个事件的元素，触发元素绑定的事件方法</p>\n<p><strong>2.3 事件冒泡:</strong>  触发目标事件之后，然后会一层一层向上遍历，遍历的过程中，遇到没有触发的相同事件便触发。</p>\n<p>直到返回 window 结束 这整个过程叫做事件流。</p>\n<p>事件捕获 和 事件冒泡 同一事件流 只能有一个生效，JS中默认执行事件冒泡 (false)。</p>\n<h5 id=\"阻止事件冒泡\"><a href=\"#阻止事件冒泡\" class=\"headerlink\" title=\"阻止事件冒泡\"></a>阻止事件冒泡</h5><ol>\n<li>event.stopPropogation();(IE)     ||    window.event.cancelBubble = true; (非IE)</li>\n<li>在 Jquery 中 可以直接使用 return false；</li>\n</ol>\n<h3 id=\"3-Dom0级-与-Dom2级\"><a href=\"#3-Dom0级-与-Dom2级\" class=\"headerlink\" title=\"3. Dom0级 与 Dom2级\"></a>3. Dom0级 与 Dom2级</h3><p><strong>3.1 Dom 0级</strong><br> 写法： ele.on事件名 = function(){}<br> 特点： js 与 html 完全分离 便于封装<br> 缺点:    同一个DOM对象 同时间只能绑定一个 同事件<br>     也就是说 一个 dom对象 只能执行一个事件处理函数<br>     如果给 这个事件 绑定了多个事件处理函数, 则执行最后一个事件处理函数</p>\n<p><strong>3.2 Dom 2级(事件监听)</strong><br> 写法：<br>    ele.addEventListener(“事件类型”,事件处理函数,bool)<br>    事件处理函数可以是：  匿名函数、  命名函数、  对象<br>    bool: 布尔值 (只有true 和 false) 不写默认为 false<br>    true： 触发 事件捕获   false：触发事件冒泡<br> 特点:<br>    1.DOM 2级不会与DOM 0级事件冲突 同时存在时两个都执行<br>    2.可以绑定多个事件函数 不会起冲突<br>    Dom2级 可以删除命名函数  事件移除 removeEventListener</p>\n<h3 id=\"4-常见事件类型：\"><a href=\"#4-常见事件类型：\" class=\"headerlink\" title=\"4.  常见事件类型：\"></a>4.  常见事件类型：</h3><p>注意：  事件名中没有 on，   on是DOM0级的写法</p>\n<p><strong>4.1 鼠标事件</strong></p>\n<ol>\n<li>单机事件   click<br>\\2. 双击事件   dblclick<br>\\3. 右键事件   contextmenu      默认事件：右击打开默认菜单栏<br>\\4. 移入事件   mouseenter<br>\\5. 移出事件   mouseout        mouseover<br>\\6. 移动事件   mouseenter     mouseleave<br>\\7. 按下事件   mousedown<br>\\8. 释放事件   mouseup<br>\\9. 滚轮事件   mousewheel     <strong>e.wheelDelta</strong>   &gt; 0 向上滑   &lt; 0 向下滑</li>\n</ol>\n<p><strong>4.2 键盘事件</strong><br> \\1. 键盘按下事件 只要按下就一直触发   keydown     获取键码：<strong>e.keyCode</strong><br> \\2. 键盘抬起事件        keyup</p>\n<p><strong>4.3 UI事件(窗口事件)</strong><br> \\1. 资源加载完毕      load<br> \\2. 窗口大小发生改变   resize<br> \\3. 窗口滚动条         scroll<br> \\4. 资源加载完毕     error</p>\n<p><strong>4.4 表单事件</strong><br> \\1. 获取焦点    focus<br> \\2. 失去焦点    blur<br> \\3. 正在输入    input<br> \\4. 内容发生改变 change</p>\n<h3 id=\"5-其他：\"><a href=\"#5-其他：\" class=\"headerlink\" title=\"5. 其他：\"></a>5. 其他：</h3><p><strong>1.获取鼠标坐标：</strong><br> \\1. 在浏览器的可视窗口的坐标 — e.clientX  /   e.clientY<br> \\2. 在标签内的坐标 —– e.offsetX /  e.offsetY<br> \\3. 在屏幕内的坐标 —–  e.screenX / e. screenY<br> \\4. 在文档中内的坐标 – e.pageX  /  e.pageY</p>\n<p><strong>2. 阻止默认事件：</strong></p>\n<ol>\n<li>event.preventDefault(); (IE下)  ||  window.event.returnValue = false;    (非IE下)</li>\n<li>在 Jquery 中 可以直接使用 return false；</li>\n</ol>\n<p>转载：<code>https://www.jianshu.com/p/3ccc4f0a3f0a</code></p>\n","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}