<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿乐のBlog</title>
  
  <subtitle>aqingya.cn</subtitle>
  <link href="https://aqingya.cn/atom.xml" rel="self"/>
  
  <link href="https://aqingya.cn/"/>
  <updated>2024-03-04T02:29:55.467Z</updated>
  <id>https://aqingya.cn/</id>
  
  <author>
    <name>阿乐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mockjs——mockjs定义、mockjs安装、mockjs使用、mockjs方法、mockjs语法、代码示例</title>
    <link href="https://aqingya.cn/articl/d43dd73a.html"/>
    <id>https://aqingya.cn/articl/d43dd73a.html</id>
    <published>2024-03-04T02:22:33.000Z</published>
    <updated>2024-03-04T02:29:55.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、mockjs定义"><a href="#一、mockjs定义" class="headerlink" title="一、mockjs定义"></a>一、mockjs定义</h2><blockquote><ul><li>拦截ajax请求，生成伪数据</li><li>应用场景:在工作中,后端已经出接口文档,还没有实现数据</li><li>由前端依照接口文档模拟伪数据,实现前端开发功能</li></ul></blockquote><h2 id="二、mockjs安装"><a href="#二、mockjs安装" class="headerlink" title="二、mockjs安装"></a>二、mockjs安装</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">i</span> <span class="selector-tag">mockjs</span> <span class="selector-tag">-D</span></span><br></pre></td></tr></table></figure><p>三 、mockjs使用（从此处起下方标红为关键信息，黑色可不看）</p><ul><li><strong>定义/mock/index.js</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">首先导入Mock</span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"> </span><br><span class="line">然后定义伪数据</span><br><span class="line">(小示例，下方精华里有具体定义步骤)</span><br><span class="line">Mock.mock(<span class="string">&quot; lapi/feed&quot;</span>, Mock.mock(&#123;</span><br><span class="line">        <span class="string">&quot;data|20&quot;</span>: [&#123;自定义数据类型&#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>在main.js导入</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./mock/index.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="使用mockjs前先在main-js中进行如下操作-post与get都要进行"><a href="#使用mockjs前先在main-js中进行如下操作-post与get都要进行" class="headerlink" title="使用mockjs前先在main.js中进行如下操作(post与get都要进行)"></a>使用mockjs前先在main.js中进行如下操作(post与get都要进行)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中导入自定义mock文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./mock/mock.js&#x27;</span>;  必须</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 导入axios 没有./  (axios网络请求工具:1不依赖dom,2.前后端都可以用,3. 丰富拦截,扩展功能,4可封装,复用性强)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>; 必须</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 挂载到vue的全局(原型上),在每个组件都可以使用 ,prototype是固定的,$axios是自定义的</span></span><br><span class="line"> </span><br><span class="line">Vue.prototype.$axios = axios; 必须</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定默认的请求域名 若是不指定则控制台中不显示此网络请求</span></span><br><span class="line"> </span><br><span class="line">axios.defaults.baseURL = <span class="string">&quot;http://dida100.com:8888&quot;</span> 注意get请求要删掉此步骤</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 给每个请求拦截一下,添加请求Token信息</span></span><br><span class="line"> </span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">config.headers.Authorization = <span class="string">&#x27;Bearer &#x27;</span>+<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="mockjs使用post方式小案例"><a href="#mockjs使用post方式小案例" class="headerlink" title="mockjs使用post方式小案例"></a>mockjs使用post方式小案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">路径：src/自定义mock文件/mock.js</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当用户ajax地址里面 有/api/login 的时候 返回如下数据</span></span><br><span class="line">Mock.mock(<span class="string">&quot;/api/login&quot;</span>,&#123;</span><br><span class="line">    下方为自定义的数据</span><br><span class="line">    <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">    <span class="attr">user</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;彭于晏&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">rank</span>:<span class="number">10</span>&#125;,</span><br><span class="line">    <span class="attr">token</span>:<span class="string">&#x27;joaaohiefuopieeaskfoefeop&#x27;</span>,<span class="comment">//token随便乱写</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>需要使用mockjs数据的文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">post方式 需要传递的参数以对象的形式写在地址后 最终出现在载荷中</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    创建后调用mockjs请求数据</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.login()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">    定义请求方法</span><br><span class="line">        <span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    发送ajax请求</span><br><span class="line">                              由于指定了默认的请求域名，此处的用户名与密码必须真实存在</span><br><span class="line">            <span class="built_in">this</span>.$axios.post(<span class="string">&quot;/api/login&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;彭于晏&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;pyy&#x27;</span> &#125;)</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    打印请求数据</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;login&quot;</span>, res.data);</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">err</span> =&gt;</span></span><br><span class="line">                    <span class="built_in">console</span>.error(err)</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mockjs使用get方式小案例（常用关键）"><a href="#mockjs使用get方式小案例（常用关键）" class="headerlink" title="mockjs使用get方式小案例（常用关键）"></a>mockjs使用get方式小案例（常用关键）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">路径：src/自定义mock文件/mock.js</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">写法一：规定只能为get请求</span><br><span class="line"><span class="comment">// 拦截get请求，返回数据</span></span><br><span class="line"> </span><br><span class="line">Mock.mock(<span class="string">&quot;/api/feed&quot;</span>,<span class="string">&quot;get&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;get 拦截&quot;</span>)</span><br><span class="line">    <span class="comment">//返回10条随机数据</span></span><br><span class="line">    <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">        <span class="string">&quot;data|10&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                下方为自定义的数据类型</span><br><span class="line"> </span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;@cname&quot;</span>,<span class="comment">//随即中文名</span></span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&quot;@cparagraph(2,3)&quot;</span>,<span class="comment">//随机段落</span></span><br><span class="line">                <span class="attr">date</span>:<span class="string">&quot;@datetime&quot;</span>,<span class="comment">//随机日期</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">推荐方法二</span><br><span class="line">写法二：省略许多无用步骤 且未规定请求方式 post或get均可使用</span><br><span class="line"><span class="comment">// 拦截get请求，返回数据</span></span><br><span class="line"><span class="comment">// 当用户ajax地址里面 有/api/login 的时候 返回如下数据</span></span><br><span class="line"> </span><br><span class="line">Mock.mock(<span class="string">&quot;/api/feed&quot;</span>,</span><br><span class="line">    <span class="comment">//返回10条随机数据 </span></span><br><span class="line">    Mock.mock(&#123;</span><br><span class="line">        <span class="string">&quot;data|10&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;@cname&quot;</span>,<span class="comment">//随即中文名</span></span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&quot;@cparagraph(2,3)&quot;</span>,<span class="comment">//随机段落</span></span><br><span class="line">                <span class="attr">date</span>:<span class="string">&quot;@datetime&quot;</span>,<span class="comment">//随机日期</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>​     <strong>需要使用mockjs数据的文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">get请求方式</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    创建后调用数据请求方法</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getFeed()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">    定义请求方法</span><br><span class="line">        <span class="function"><span class="title">getFeed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$axios.get(<span class="string">&quot;/api/feed&quot;</span>)</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.error(err)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、mockjs语法-（精华）"><a href="#六、mockjs语法-（精华）" class="headerlink" title="六、mockjs语法 （精华）"></a>六、mockjs语法 （精华）</h2><p>常用语法</p><p>“id”:”@id”<br>“star|1-2”:”★”  字符串重复一道2次<br>“price|100-200.2-3” 小数点2-3位<br>“data|10”:[{name:”名称”}] 数组的内容重复10遍<br>“live|1”:true,随机返回true,false<br>“tel”:/13 \d{9}/,<br>“des”:function(){ return this.start+this.price}<br>“name”:”@cname” 表示中文名称<br>“address”:”@country(true)” 地址<br>“ip”:”@ip”,<br>“description”:”@cparagraph(1, 3)” 随机段落2-3行<br>“pic”:@dataImage(‘200x100’,’色块图片’)`</p><p><img src="https://img-blog.csdnimg.cn/48ca82f9bc1b432ba0d5898aba371b38.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、mockjs定义&quot;&gt;&lt;a href=&quot;#一、mockjs定义&quot; class=&quot;headerlink&quot; title=&quot;一、mockjs定义&quot;&gt;&lt;/a&gt;一、mockjs定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;拦截ajax请求，生成伪数据&lt;/li&gt;</summary>
      
    
    
    
    <category term="Mock.js" scheme="https://aqingya.cn/categories/Mock-js/"/>
    
    
    <category term="Mock.js" scheme="https://aqingya.cn/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序下载打开及预览PDF文件</title>
    <link href="https://aqingya.cn/articl/edd561e3.html"/>
    <id>https://aqingya.cn/articl/edd561e3.html</id>
    <published>2023-08-02T09:04:00.000Z</published>
    <updated>2023-08-02T09:07:25.641Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载PDF文件 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downLoadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     wx.showModal(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;确认要打开此PDF文件吗？&#x27;</span>,</span><br><span class="line">        <span class="attr">showCancel</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">cancelText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">confirmText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (result.confirm) &#123;</span><br><span class="line">            wx.downloadFile(&#123;</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;https://XXXX.com/pdf&#x27;</span>,    <span class="comment">//实际获取文件的url地址</span></span><br><span class="line">              <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resinfo</span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">&quot;pdf文件下载成功啦&quot;</span>)</span><br><span class="line">                  <span class="keyword">let</span> path = resinfo.tempFilePath;</span><br><span class="line">                  <span class="built_in">console</span>.log(path, resinfo)</span><br><span class="line">                  wx.openDocument(&#123;</span><br><span class="line">                      <span class="attr">filePath</span>: path,  <span class="comment">// 文件的网络路径</span></span><br><span class="line">                      <span class="attr">fileType</span>: <span class="string">&#x27;pdf&#x27;</span>,</span><br><span class="line">                      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">rest</span>) </span>&#123;</span><br><span class="line">                          <span class="built_in">console</span>.log(<span class="string">&#x27;打开文件成功&#x27;</span>)</span><br><span class="line">                          <span class="built_in">console</span>.log(rest);</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                          wx.showToast(&#123;</span><br><span class="line">                              <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                              <span class="attr">title</span>: <span class="string">&#x27;打开文件失败&#x27;</span></span><br><span class="line">                          &#125;);</span><br><span class="line">                      &#125;,</span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                  wx.showToast(&#123;</span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;下载文件失败&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)     </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">        <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://aqingya.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://aqingya.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript将小写金额转化为大写金额</title>
    <link href="https://aqingya.cn/articl/7d398978.html"/>
    <id>https://aqingya.cn/articl/7d398978.html</id>
    <published>2023-08-02T09:02:08.000Z</published>
    <updated>2023-08-02T09:15:38.092Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 数字金额大写转换(可以处理整数,小数,负数) */</span>  </span><br><span class="line"><span class="function"><span class="title">dealBigMoney</span>(<span class="params">n</span>)</span>   </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">var</span> fraction = [<span class="string">&#x27;角&#x27;</span>, <span class="string">&#x27;分&#x27;</span>];  </span><br><span class="line">    <span class="keyword">var</span> digit = [<span class="string">&#x27;零&#x27;</span>, <span class="string">&#x27;壹&#x27;</span>, <span class="string">&#x27;贰&#x27;</span>, <span class="string">&#x27;叁&#x27;</span>, <span class="string">&#x27;肆&#x27;</span>, <span class="string">&#x27;伍&#x27;</span>, <span class="string">&#x27;陆&#x27;</span>, <span class="string">&#x27;柒&#x27;</span>, <span class="string">&#x27;捌&#x27;</span>, <span class="string">&#x27;玖&#x27;</span>];  </span><br><span class="line">    <span class="keyword">var</span> unit = [ [<span class="string">&#x27;元&#x27;</span>, <span class="string">&#x27;万&#x27;</span>, <span class="string">&#x27;亿&#x27;</span>], [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;拾&#x27;</span>, <span class="string">&#x27;佰&#x27;</span>, <span class="string">&#x27;仟&#x27;</span>]  ];  </span><br><span class="line">    <span class="keyword">var</span> head = n &lt; <span class="number">0</span>? <span class="string">&#x27;欠&#x27;</span>: <span class="string">&#x27;&#x27;</span>;  </span><br><span class="line">    n = <span class="built_in">Math</span>.abs(n);  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&#x27;&#x27;</span>;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fraction.length; i++)   </span><br><span class="line">    &#123;  </span><br><span class="line">        s += (digit[<span class="built_in">Math</span>.floor(n * <span class="number">10</span> * <span class="built_in">Math</span>.pow(<span class="number">10</span>, i)) % <span class="number">10</span>] + fraction[i]).replace(<span class="regexp">/零./</span>, <span class="string">&#x27;&#x27;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    s = s || <span class="string">&#x27;整&#x27;</span>;  </span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n);  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].length &amp;&amp; n &gt; <span class="number">0</span>; i++)   </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">var</span> p = <span class="string">&#x27;&#x27;</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].length &amp;&amp; n &gt; <span class="number">0</span>; j++)   </span><br><span class="line">        &#123;  </span><br><span class="line">            p = digit[n % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;  </span><br><span class="line">            n = <span class="built_in">Math</span>.floor(n / <span class="number">10</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        s = p.replace(<span class="regexp">/(零.)*零$/</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/^$/</span>, <span class="string">&#x27;零&#x27;</span>)  + unit[<span class="number">0</span>][i] + s;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> head + s.replace(<span class="regexp">/(零.)*零元/</span>, <span class="string">&#x27;元&#x27;</span>).replace(<span class="regexp">/(零.)+/g</span>, <span class="string">&#x27;零&#x27;</span>).replace(<span class="regexp">/^整$/</span>, <span class="string">&#x27;零元整&#x27;</span>);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS实现千位分隔符的两种方法。</title>
    <link href="https://aqingya.cn/articl/467d9947.html"/>
    <id>https://aqingya.cn/articl/467d9947.html</id>
    <published>2023-06-01T07:51:13.000Z</published>
    <updated>2023-07-31T11:59:39.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一：普通方法"><a href="#方法一：普通方法" class="headerlink" title="方法一：普通方法"></a>方法一：普通方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">numFormat</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> tmp = num.toString().split(<span class="string">&quot;.&quot;</span>); <span class="comment">// 变成字符，然后用“.” 分开小数点前后两个部分为一个数组tmp[0]和tmp[1]            // console.log(num);</span></span><br><span class="line">          <span class="keyword">var</span> arr = tmp[<span class="number">0</span>].split(<span class="string">&quot;&quot;</span>).reverse(); <span class="comment">// 变成数组，然后翻转0</span></span><br><span class="line">          <span class="comment">// console.log(tmp);</span></span><br><span class="line">          <span class="keyword">var</span> res = [];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i != <span class="number">0</span>) &#123; <span class="comment">// 在3的倍数前先添加“,”</span></span><br><span class="line">                  res.push(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                  res.push(arr[i]);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  res.push(arr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">var</span> a = res.reverse().join(<span class="string">&quot;&quot;</span>); <span class="comment">// 再次翻转，变成顺序</span></span><br><span class="line">          <span class="built_in">console</span>.log(a);</span><br><span class="line">          tmp[<span class="number">0</span>] = a;</span><br><span class="line">          <span class="built_in">console</span>.log(tmp);</span><br><span class="line">          <span class="keyword">var</span> result = tmp.join(<span class="string">&quot;.&quot;</span>); <span class="comment">// 与小数点后面的结合成字符串</span></span><br><span class="line">          <span class="built_in">console</span>.log(result); <span class="comment">// 32,434,542.2323</span></span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      numFormat(<span class="number">32434542.2323</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法二：正则的方法（个人喜欢）"><a href="#方法二：正则的方法（个人喜欢）" class="headerlink" title="方法二：正则的方法（个人喜欢）"></a>方法二：正则的方法（个人喜欢）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">numFormat</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res = num.toString().replace(<span class="regexp">/\d+/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123; <span class="comment">// 先提取整数部分</span></span><br><span class="line">            <span class="keyword">return</span> n.replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $<span class="number">1</span> + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">45465454654513</span>;</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">87985513.464984</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(numFormat(num1)); <span class="comment">// 45,465,454,654,513</span></span><br><span class="line">    <span class="built_in">console</span>.log(numFormat(num2)); <span class="comment">// 87,985,513.464984</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法一：普通方法&quot;&gt;&lt;a href=&quot;#方法一：普通方法&quot; class=&quot;headerlink&quot; title=&quot;方法一：普通方法&quot;&gt;&lt;/a&gt;方法一：普通方法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Moment js 计算时间差</title>
    <link href="https://aqingya.cn/articl/a20ede72.html"/>
    <id>https://aqingya.cn/articl/a20ede72.html</id>
    <published>2023-06-01T07:26:31.000Z</published>
    <updated>2023-06-01T08:14:54.114Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> endTime = moment();<span class="comment">//获取当前时间</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="string">&quot;2000-09-09&quot;</span>;<span class="comment">//设置之前时间</span></span><br><span class="line"><span class="keyword">let</span> sum = endTime.diff(startTime, <span class="string">&#x27;months&#x27;</span>);<span class="comment">//获取到相差月份</span></span><br><span class="line">end_date.diff(start_date, <span class="string">&#x27;weeks&#x27;</span>) <span class="comment">// 获取到相差周</span></span><br><span class="line">end_date.diff(start_date, <span class="string">&#x27;days&#x27;</span>) <span class="comment">// 获取到相差月份</span></span><br><span class="line">start_date.diff(end_date, <span class="string">&#x27;days&#x27;</span>) <span class="comment">// 获取到相差天</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Moment" scheme="https://aqingya.cn/categories/Moment/"/>
    
    
    <category term="Moment" scheme="https://aqingya.cn/tags/Moment/"/>
    
    <category term="时间差" scheme="https://aqingya.cn/tags/%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
    
  </entry>
  
  <entry>
    <title>初识React Hooks</title>
    <link href="https://aqingya.cn/articl/b0e763f4.html"/>
    <id>https://aqingya.cn/articl/b0e763f4.html</id>
    <published>2023-04-19T03:12:59.000Z</published>
    <updated>2023-04-20T01:04:19.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要Hook"><a href="#为什么需要Hook" class="headerlink" title="为什么需要Hook?"></a><strong>为什么需要Hook?</strong></h2><p>Hook 是 React 16.8 的新增特性，它可以让我们在不编写class的情况下使用state以及其他的React特性（比如生命周期）。</p><h3 id="class组件相对于函数式组件有什么优势？"><a href="#class组件相对于函数式组件有什么优势？" class="headerlink" title="class组件相对于函数式组件有什么优势？"></a>class组件相对于函数式组件有什么优势？</h3><ul><li><p>class组件可以定义<strong>自己的state</strong>，用来<strong>保存组件自己内部的状态</strong>；</p><ul><li>函数式组件不可以，因为函数每次调用都会产生新的临时变量；</li></ul></li><li><p>class组件有<strong>自己的生命周期</strong>，我们可以在<strong>对应的生命周期中完成自己的逻辑</strong>；</p><ul><li>比如在componentDidMount中发送网络请求，并且该生命周期函数只会执行一次；</li><li>函数式组件在学习hooks之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求；</li></ul></li><li><p>class组件可以在<strong>状态改变时只会重新执行render函数</strong>以及我<strong>们希望重新调用的生命周期函数componentDidUpdate等</strong>；</p><ul><li>函数式组件在重新渲染时，整个函数都会被执行，似乎没有什么地方可以只让它们调用一次；</li></ul></li></ul><p><strong>所以，在Hook出现之前，对于上面这些情况我们通常都会编写class组件</strong></p><h3 id="Class组件存在的问题"><a href="#Class组件存在的问题" class="headerlink" title="Class组件存在的问题"></a>Class组件存在的问题</h3><ul><li><strong>复杂组件变得难以理解：</strong><ul><li>我们在最初编写一个class组件时，往往逻辑比较简单，并不会非常复杂。但是<strong>随着业务的增多</strong>，我们的class组件会变得越来越复杂；</li><li>比如componentDidMount中，可能就会包含大量的逻辑代码：包括网络请求、一些事件的监听（还需要在componentWillUnmount中移除）；</li><li>而对于这样的class实际上非常难以拆分：因为它们的逻辑往往混在一起，强行拆分反而会造成过度设计，增加代码的复杂度；</li></ul></li></ul><h3 id="Class组件和使用Hooks的函数式组件简单对比"><a href="#Class组件和使用Hooks的函数式组件简单对比" class="headerlink" title="Class组件和使用Hooks的函数式组件简单对比"></a><strong>Class组件和使用Hooks的函数式组件简单对比</strong></h3><p>类式组件</p><p><img src="https://qny.aqingya.cn/img/20230419163325.png"></p><p>函数式组件：</p><p><img src="https://qny.aqingya.cn/img/20230419163541.png"></p><p>简洁程度可想而知。</p><p><strong>小提示：Hook指的类似于useState、useEffect这样的函数；Hooks是对这类函数的统称；</strong></p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a><strong>useState</strong></h2><ul><li><p><strong>useState</strong>会帮助我们<strong>定义一个 state变量</strong>，useState 是一种新方法，它与 <strong>class 里面的 this.state 提供的功能完全相同。</strong></p><ul><li>✓ 一般来说，<strong>在函数退出后变量就会”消失”</strong>，而 state 中的变量会被 React 保留。</li></ul></li><li><p><strong>useState</strong>接受唯一一个参数，在第一次组件被调用时使用来作为初始化值。（如果没有传递参数，那么初始化值为undefined）。</p></li><li><p><strong>useState</strong>的返回值是一个数组，我们可以通过数组的解构，来完成赋值会非常方便。</p><ul><li> 数组解构：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li></ul></li><li><p><strong>当然，我们也可以在一个组件中定义多个变量和复杂变量（数组、对象）</strong></p></li></ul><p>小提示：<strong>为什么叫 useState 而不叫 createState?</strong></p><ul><li><p>“create” 可能不是很准确，因为 state 只在组件首次渲染的时候被创建。</p></li><li><p>在下一次重新渲染时，useState 返回给我们当前的 state。</p></li><li><p>如果每次都创建新的变量，它就不是 “state”了。</p></li><li><p>这也是 Hook 的名字<em>总是</em>以 use 开头的一个原因</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = memo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">100</span>)</span><br><span class="line">  <span class="keyword">const</span> [banners, setBanners] = useState([])</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setMessage(<span class="string">&quot;你好啊, 李银河!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>App: &#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeMessage&#125;</span>&gt;</span>修改文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><strong>useEffect</strong></h2><ul><li><p>通过useEffect的Hook，可以告诉<strong>React需要在渲染后执行某些操作</strong>；</p></li><li><p>useEffect要求<strong>我们传入一个回调函数</strong>，在React执行完<strong>更新DOM操作之后</strong>，就会<strong>回调这个函数</strong>；</p></li><li><p>默认情况下，<strong>无论是第一次渲染之后</strong>，还是每次更新之后，都会<strong>执行这个回调函数</strong>；</p></li></ul><h3 id="useEffect的清除机制"><a href="#useEffect的清除机制" class="headerlink" title="useEffect的清除机制"></a><strong>useEffect的清除机制</strong></h3><p>useEffect传入的回调函数A本身可以有一个返回值，这个返回值是另外一个回调函数B：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type EffectCallback = <span class="function">() =&gt;</span> (<span class="keyword">void</span> | (<span class="function">() =&gt;</span> <span class="keyword">void</span> | <span class="literal">undefined</span>));</span><br></pre></td></tr></table></figure><p>为什么要在effect 中返回一个函数？</p><ul><li><p>这是effect 可选的清除机制。每个effect 都可以返回一个清除函数；</p></li><li><p>如此可以将添加和移除订阅的逻辑放在一起；</p></li><li><p>它们都属于effect 的一部分；</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = memo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 负责告知react, 在执行完当前组件渲染之后要执行的副作用代码</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.监听事件</span></span><br><span class="line">    <span class="comment">// const unubscribe = store.subscribe(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// function foo() &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// eventBus.on(&quot;why&quot;, foo)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听redux中数据变化, 监听eventBus中的why事件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值: 回调函数 =&gt; 组件被重新渲染或者组件卸载的时候执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;取消监听redux中数据变化, 取消监听eventBus中的why事件&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="使用多个Effect"><a href="#使用多个Effect" class="headerlink" title="使用多个Effect"></a><strong>使用多个</strong>Effect</h3><p>使用Hook的其中一个目的就是解决class中生命周期经常将很多的逻辑放在一起的问题：比如网络请求、事件监听、手动修改DOM，这些往往都会放在componentDidMount中；</p><p>Hook 允许我们按照代码的用途分离它们，而不是像生命周期函数那样：React 将按照effect 声明的顺序依次调用组件中的每一个effect；</p><p>使用Effect Hook，我们可以将它们分离到不同的useEffect中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = memo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 负责告知react, 在执行完当前组件渲染之后要执行的副作用代码</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.修改document的title(1行)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;修改title&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个函数式组件中, 可以存在多个useEffect</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 2.对redux中数据变化监听(10行)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听redux中的数据&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 取消redux中数据的监听</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 3.监听eventBus中的why事件(15行)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听eventBus的why事件&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 取消eventBus中的why事件监听</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h3 id="useEffect性能优化"><a href="#useEffect性能优化" class="headerlink" title="useEffect性能优化"></a><strong>useEffect性能优化</strong></h3><p><strong>默认情况下，useEffect的回调函数会在每次渲染时都重新执行，但是这会导致两个问题：</strong></p><p>某些代码我们只是希望执行一次即可，类似于componentDidMount和componentWillUnmount中完成的事情；（比如网</p><p>络请求、订阅和取消订阅）； 另外，多次执行也会导致一定的性能问题；</p><p><strong>我们如何决定useEffect在什么时候应该执行和什么时候不应该执行呢？</strong></p><p>useEffect实际上有两个参数：</p><ul><li><p>参数一：执行的回调函数；</p></li><li><p>参数二：该useEffect在哪些state发生变化时，才重新执行；（受谁的影响）</p></li></ul><p><strong>但是，如果一个函数我们不希望依赖任何的内容时，也可以传入一个空的数组 []：</strong></p><p>那么这里的两个回调函数分别对应的就是componentDidMount和componentWillUnmount生命周期函数了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = memo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;修改title:&quot;</span>, count)</span><br><span class="line">  &#125;, [count])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听redux中的数据&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听eventBus的why事件&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;发送网络请求, 从服务器获取数据&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;会在组件被卸载时, 才会执行一次&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> setCount(count+1)&#125;&gt;+1(&#123;count&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> setMessage(&quot;你好啊&quot;)&#125;&gt;修改message(&#123;message&#125;)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a><strong>useContext</strong></h2><p>Context Hook允许我们通过Hook来直接获取某个Context的值；</p><p><strong>注意事项：</strong></p><p>当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重新渲染，并使用最新传递给 MyContext provider 的</p><p>context value 值。</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">UserContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;name:</span> &quot;<span class="attr">why</span>&quot;, <span class="attr">level:</span> <span class="attr">99</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">TokenContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;</span>&#x27;<span class="attr">coderwhy</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">TokenContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">UserContext.Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>context/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserContext = createContext()</span><br><span class="line"><span class="keyword">const</span> ThemeContext = createContext()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  UserContext,</span><br><span class="line">  ThemeContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; UserContext, ThemeContext &#125; <span class="keyword">from</span> <span class="string">&quot;./context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = memo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用Context</span></span><br><span class="line">  <span class="keyword">const</span> user = useContext(UserContext)</span><br><span class="line">  <span class="keyword">const</span> theme = useContext(ThemeContext)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User: &#123;user.name&#125;-&#123;user.level&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> <span class="attr">theme.color</span>, <span class="attr">fontSize:</span> <span class="attr">theme.size</span>&#125;&#125;&gt;</span>Theme<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要Hook&quot;&gt;&lt;a href=&quot;#为什么需要Hook&quot; class=&quot;headerlink&quot; title=&quot;为什么需要Hook?&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么需要Hook?&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Hook 是 React 16.8 的新增特性</summary>
      
    
    
    
    <category term="React" scheme="https://aqingya.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://aqingya.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React中setState异步更新</title>
    <link href="https://aqingya.cn/articl/2f6f0d8d.html"/>
    <id>https://aqingya.cn/articl/2f6f0d8d.html</id>
    <published>2023-04-18T12:48:19.000Z</published>
    <updated>2023-04-18T12:51:28.682Z</updated>
    
    <content type="html"><![CDATA[<p>React核心成员（Redux的作者）Dan Abramov也有对应的回复 <a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710">https://github.com/facebook/react/issues/11527#issuecomment-360199710</a></p><p>总结：</p><p>1、setState设计为异步，可以显著的提升性能；</p><ul><li>如果每次调用 setState都进行一次更新，那么意味着render函数会被频繁调用，界面重新渲染，这样效率是很低的；</li><li>最好的办法应该是获取到多个更新，之后进行批量更新；</li></ul><p>2、如果同步更新了state，但是还没有执行render函数，那么state和props不能保持同步；</p><ul><li>state和props不能保持一致性，会在开发中产生很多的问题</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;React核心成员（Redux的作者）Dan Abramov也有对应的回复 &lt;a href=&quot;https://github.com/facebook/react/issues/11527#issuecomment-360199710&quot;&gt;https://github.com/</summary>
      
    
    
    
    <category term="React" scheme="https://aqingya.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://aqingya.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Git-tag标签</title>
    <link href="https://aqingya.cn/articl/2a5f1def.html"/>
    <id>https://aqingya.cn/articl/2a5f1def.html</id>
    <published>2023-03-06T08:45:10.000Z</published>
    <updated>2023-03-06T08:51:49.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是tag"><a href="#1-什么是tag" class="headerlink" title="1.什么是tag"></a>1.什么是tag</h1><h2 id="1-1-tag的简单理解"><a href="#1-1-tag的简单理解" class="headerlink" title="1.1 tag的简单理解"></a>1.1 tag的简单理解</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag 中文我们可以称它为 标签。</span><br><span class="line"></span><br><span class="line">简单的理解，tag 就是 对某次 commit 的一个标识，相当于起了一个别名。</span><br><span class="line">例如，在项目发布某个版本的时候，针对最后一次commit 起一个 v1.0.100 这样的标签来标识里程碑的意义。</span><br></pre></td></tr></table></figure><h2 id="1-2-tag的类型"><a href="#1-2-tag的类型" class="headerlink" title="1.2 tag的类型"></a>1.2 tag的类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有两种类型的标签 ： 轻量标签（lightweight）、附注标签(annotated)</span><br><span class="line"></span><br><span class="line">【轻量标签 】： 只是某个commit 的引用，可以理解为是一个commit的别名；</span><br><span class="line"></span><br><span class="line">【附注标签】 ：是存储在git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间 以及其他的标签信息。</span><br><span class="line">         它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证。</span><br></pre></td></tr></table></figure><h2 id="2-1-查看标签"><a href="#2-1-查看标签" class="headerlink" title="2.1 查看标签"></a>2.1 查看标签</h2><h3 id="2-1-1-查看标签列表"><a href="#2-1-1-查看标签列表" class="headerlink" title="2.1.1 查看标签列表"></a>2.1.1 查看标签列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">or </span><br><span class="line">$ git tag -l [标签名称筛选字符串*] 或者 git tag --list [标签名称筛选字符串*]</span><br></pre></td></tr></table></figure><blockquote><p>说明 ：<br><code>git tag</code> : 直接列出所有的标签<br><code>git tag -l xxxx</code> : 可以根据 xxxx 进行标签的筛选</p></blockquote><h3 id="2-1-2-查看标签的提交信息"><a href="#2-1-2-查看标签的提交信息" class="headerlink" title="2.1.2 查看标签的提交信息"></a>2.1.2 查看标签的提交信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show 标签名</span><br></pre></td></tr></table></figure><blockquote><p><code>git show 标签名 </code>： 查看标签的信息，（轻量标签 和 附注标签 的信息是不一样的）</p></blockquote><h2 id="2-2-创建标签"><a href="#2-2-创建标签" class="headerlink" title="2.2 创建标签"></a>2.2 创建标签</h2><h3 id="2-2-1-创建轻量标签"><a href="#2-2-1-创建轻量标签" class="headerlink" title="2.2.1 创建轻量标签"></a>2.2.1 创建轻量标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag 标签名</span><br><span class="line">or </span><br><span class="line">$ git tag 标签名 提交版本</span><br></pre></td></tr></table></figure><blockquote><p>说明 ：<br><code>git tag 标签名</code> ： 直接给当前的提交版本创建一个【轻量标签】<br><code>git tag 标签名 提交版本号</code> ：给指定的提交版本创建一个 【轻量标签】</p></blockquote><h3 id="2-2-2-创建附注标签"><a href="#2-2-2-创建附注标签" class="headerlink" title="2.2.2 创建附注标签"></a>2.2.2 创建附注标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a 标签名称 -m 附注信息</span><br><span class="line">or</span><br><span class="line">$ git tag -a 标签名称 提交版本号 -m 附注信息</span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>-a : 理解为 annotated 的首字符，表示 附注标签<br>-m : 指定附注信息<br>git tag -a 标签名称 -m 附注信息 ：直接给当前的提交版本创建一个 【附注标签】<br>git tag -a 标签名称 提交版本号 -m 附注信息 ：给指定的提交版本创建一个【附注标签】</p></blockquote><h2 id="2-3-删除标签"><a href="#2-3-删除标签" class="headerlink" title="2.3 删除标签"></a>2.3 删除标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d 标签名称</span><br></pre></td></tr></table></figure><blockquote><p>说明 ：<br><code>git tag -d 标签名称</code> : 删除指定名称的标签</p></blockquote><h2 id="3-1-推送到远程仓库"><a href="#3-1-推送到远程仓库" class="headerlink" title="3.1 推送到远程仓库"></a>3.1 推送到远程仓库</h2><blockquote><p>默认情况下，<code>git push </code>命令并不会把标签推送到远程仓库中。<br>因此，我们必须 <code>手动</code>地将 本地的标签 推送到远程仓库中。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 标签名称</span><br><span class="line">or</span><br><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure><blockquote><p>说明 ：<br><code>git push origin 标签名称</code> : 将指定的标签上传到远程仓库<br><code>git push origin --tags</code> : 将所有不在远程仓库中的标签上传到远程仓库</p></blockquote><h2 id="3-2-删除远程仓库的标签"><a href="#3-2-删除远程仓库的标签" class="headerlink" title="3.2 删除远程仓库的标签"></a>3.2 删除远程仓库的标签</h2><blockquote><p>删除远程仓库上地标签同样也需要手动执行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin  :regs/tags/标签名称</span><br><span class="line">or</span><br><span class="line">$ git push origin --delete 标签名称</span><br></pre></td></tr></table></figure><blockquote><p>说明 ：<br>上面两个命令都是删除远程仓库中的 指定标签</p></blockquote><h1 id="4-检出标签"><a href="#4-检出标签" class="headerlink" title="4.检出标签"></a>4.检出标签</h1><blockquote><p>检出标签的理解 ： 我想在这个标签的基础上进行其他的开发或操作。<br>检出标签的操作实质 ： 就是以标签指定的版本为基础版本，新建一个分支，继续其他的操作。<br>因此 ，就是 新建分支的操作了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b 分支名称 标签名称</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-什么是tag&quot;&gt;&lt;a href=&quot;#1-什么是tag&quot; class=&quot;headerlink&quot; title=&quot;1.什么是tag&quot;&gt;&lt;/a&gt;1.什么是tag&lt;/h1&gt;&lt;h2 id=&quot;1-1-tag的简单理解&quot;&gt;&lt;a href=&quot;#1-1-tag的简单理解&quot; cla</summary>
      
    
    
    
    <category term="Git" scheme="https://aqingya.cn/categories/Git/"/>
    
    
    <category term="Git" scheme="https://aqingya.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JS转换时间戳为刚刚、几分钟前、几小时前、几天前、几周前、几个月前等格式</title>
    <link href="https://aqingya.cn/articl/7372d0d3.html"/>
    <id>https://aqingya.cn/articl/7372d0d3.html</id>
    <published>2023-02-28T06:14:00.000Z</published>
    <updated>2023-02-28T06:20:45.492Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路：获取时间戳的差</span></span><br><span class="line"><span class="comment">// 时间差除以时间格式需要的倍数 如果超过1 则表示时间差在这个等级中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDateDiff</span>(<span class="params">dateTimeStamp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">const</span> diffValue = now - dateTimeStamp</span><br><span class="line">  <span class="keyword">if</span> (diffValue &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;结束日期不能小于开始日期！&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 时间格式转换需要的数字倍数</span></span><br><span class="line">  <span class="keyword">const</span> minute = <span class="number">1000</span> * <span class="number">60</span> <span class="comment">//</span></span><br><span class="line">  <span class="keyword">const</span> hour = minute * <span class="number">60</span><span class="comment">//</span></span><br><span class="line">  <span class="keyword">const</span> day = hour * <span class="number">24</span> <span class="comment">// 几天前</span></span><br><span class="line">  <span class="keyword">const</span> month = day * <span class="number">30</span> <span class="comment">// 月</span></span><br><span class="line">  <span class="comment">// 时间差 除以时间格式需要的倍数</span></span><br><span class="line">  <span class="keyword">const</span> monthC = diffValue / month</span><br><span class="line">  <span class="keyword">const</span> weekC = diffValue / (<span class="number">7</span> * day)</span><br><span class="line">  <span class="keyword">const</span> dayC = diffValue / day</span><br><span class="line">  <span class="keyword">const</span> hourC = diffValue / hour</span><br><span class="line">  <span class="keyword">const</span> minC = diffValue / minute</span><br><span class="line">  <span class="comment">// 如果超过1 则表示时间差在这个等级中</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (monthC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    result = <span class="string">`发表于<span class="subst">$&#123;<span class="built_in">parseInt</span>(monthC, <span class="number">10</span>)&#125;</span>个月前`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weekC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    result = <span class="string">`发表于<span class="subst">$&#123;<span class="built_in">parseInt</span>(weekC, <span class="number">10</span>)&#125;</span>周前`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dayC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    result = <span class="string">`发表于<span class="subst">$&#123;<span class="built_in">parseInt</span>(dayC, <span class="number">10</span>)&#125;</span>天前`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hourC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    result = <span class="string">`发表于<span class="subst">$&#123;<span class="built_in">parseInt</span>(hourC, <span class="number">10</span>)&#125;</span>个小时前`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minC &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    result = <span class="string">`发表于<span class="subst">$&#123;<span class="built_in">parseInt</span>(minC, <span class="number">10</span>)&#125;</span>分钟前`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> result = <span class="string">&#x27;刚刚发表&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="built_in">console</span>.log(getDateDiff(<span class="built_in">Date</span>.now() - <span class="number">10</span>)) <span class="comment">// 刚刚</span></span><br><span class="line"><span class="built_in">console</span>.log(getDateDiff(<span class="built_in">Date</span>.now() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span>)) <span class="comment">// 五分钟前</span></span><br><span class="line"><span class="built_in">console</span>.log(getDateDiff(<span class="built_in">Date</span>.now() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>)) <span class="comment">// 2小时前</span></span><br><span class="line"><span class="built_in">console</span>.log(getDateDiff(<span class="built_in">Date</span>.now() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>)) <span class="comment">// 3天前</span></span><br><span class="line"><span class="built_in">console</span>.log(getDateDiff(<span class="built_in">Date</span>.now() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">4</span>)) <span class="comment">// 四个月前</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/tags/JavaScript/"/>
    
    <category term="时间戳" scheme="https://aqingya.cn/tags/%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    
  </entry>
  
  <entry>
    <title>vue移动端实现拨打电话功能</title>
    <link href="https://aqingya.cn/articl/ecb01030.html"/>
    <id>https://aqingya.cn/articl/ecb01030.html</id>
    <published>2023-01-11T07:45:48.000Z</published>
    <updated>2023-01-11T07:49:59.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、在vue项目中的index-html引入"><a href="#1、在vue项目中的index-html引入" class="headerlink" title="1、在vue项目中的index.html引入"></a>1、在vue项目中的index.html引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;telephone=yes&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><img src="https://qny.aqingya.cn/img/20230111154753.png"></p><h4 id="2、在vue页面使用"><a href="#2、在vue页面使用" class="headerlink" title="2、在vue页面使用"></a>2、在vue页面使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 拨打电话</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">callPhone</span>(<span class="params">phoneNumber</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(phoneNumber);</span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">&quot;tel://&quot;</span> + phoneNumber;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、调用方法"><a href="#3、调用方法" class="headerlink" title="3、调用方法"></a>3、调用方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div @click=<span class="string">&quot;callPhone(item.phone)&quot;</span>&gt;  </span><br><span class="line">    手机号</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、在vue项目中的index-html引入&quot;&gt;&lt;a href=&quot;#1、在vue项目中的index-html引入&quot; class=&quot;headerlink&quot; title=&quot;1、在vue项目中的index.html引入&quot;&gt;&lt;/a&gt;1、在vue项目中的index.html</summary>
      
    
    
    
    <category term="Vue" scheme="https://aqingya.cn/categories/Vue/"/>
    
    
    <category term="移动端" scheme="https://aqingya.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css 省略号动画</title>
    <link href="https://aqingya.cn/articl/203ad2e6.html"/>
    <id>https://aqingya.cn/articl/203ad2e6.html</id>
    <published>2023-01-11T05:16:46.000Z</published>
    <updated>2023-01-11T05:19:40.541Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;text&quot;&gt;加载中，请稍后&lt;<span class="selector-tag">span</span> class=&quot;dot&quot;&gt;...&lt;/<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.dot</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: simsun; <span class="comment">/*固定字体避免设置的宽度无效*/</span></span><br><span class="line">    <span class="attribute">animation</span>: dot <span class="number">3s</span> infinite step-start;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom; <span class="comment">/*始终让省略号在文字的下面*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> dot &#123; <span class="comment">/*动态改变显示宽度, 但始终让总占据空间不变, 避免抖动*/</span></span><br><span class="line">    <span class="number">0%</span> &#123; <span class="attribute">width</span>: <span class="number">0</span>; <span class="attribute">margin-right</span>: <span class="number">1.5em</span>; &#125;</span><br><span class="line">    <span class="number">33%</span> &#123; <span class="attribute">width</span>: .<span class="number">5em</span>; <span class="attribute">margin-right</span>: <span class="number">1em</span>; &#125;</span><br><span class="line">    <span class="number">66%</span> &#123; <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">margin-right</span>: .<span class="number">5em</span>; &#125;</span><br><span class="line">    <span class="number">100%</span> &#123; <span class="attribute">width</span>: <span class="number">1.5em</span>; <span class="attribute">margin-right</span>: <span class="number">0</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="CSS" scheme="https://aqingya.cn/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://aqingya.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件实现返回上一页保存原数据</title>
    <link href="https://aqingya.cn/articl/5d2ddfae.html"/>
    <id>https://aqingya.cn/articl/5d2ddfae.html</id>
    <published>2023-01-05T08:00:11.000Z</published>
    <updated>2023-01-05T08:04:43.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/hello&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: HelloWorld,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="literal">true</span> <span class="comment">// 需要缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/hello2&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;HelloWorld2&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: HelloWorld2,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="literal">false</span> <span class="comment">// 不需要缓存</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="在App-vue文件里修改"><a href="#在App-vue文件里修改" class="headerlink" title="在App.vue文件里修改"></a>在App.vue文件里修改</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- &lt;router-view /&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-router-back-返回-才能生效。"><a href="#使用-router-back-返回-才能生效。" class="headerlink" title="使用$router.back()返回,才能生效。"></a>使用$router.back()返回,才能生效。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置路由&quot;&gt;&lt;a href=&quot;#配置路由&quot; class=&quot;headerlink&quot; title=&quot;配置路由&quot;&gt;&lt;/a&gt;配置路由&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://aqingya.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://aqingya.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>身份证号码正则验证</title>
    <link href="https://aqingya.cn/articl/8973fe15.html"/>
    <id>https://aqingya.cn/articl/8973fe15.html</id>
    <published>2022-12-21T09:45:00.000Z</published>
    <updated>2022-12-21T09:48:58.467Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPersonIdcard</span>(<span class="params">personnumber</span>) </span>&#123;</span><br><span class="line">  personnumber = personnumber.toUpperCase();</span><br><span class="line">  <span class="comment">//身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X。</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;([0-9]|X)$)/</span>.test(personnumber))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">  <span class="comment">//下面分别分析出生日期和校验位</span></span><br><span class="line">  <span class="keyword">var</span> len, re;</span><br><span class="line">  len = personnumber.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">15</span>) &#123;</span><br><span class="line">    re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)$/</span>);</span><br><span class="line">    <span class="keyword">var</span> arrSplit = personnumber.match(re);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查生日日期是否正确</span></span><br><span class="line">    <span class="keyword">var</span> dtmBirth = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;19&#x27;</span> + arrSplit[<span class="number">2</span>] + <span class="string">&#x27;/&#x27;</span> + arrSplit[<span class="number">3</span>] + <span class="string">&#x27;/&#x27;</span> + arrSplit[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">var</span> bGoodDay;</span><br><span class="line">    bGoodDay = (dtmBirth.getYear() == <span class="built_in">Number</span>(arrSplit[<span class="number">2</span>])) &amp;&amp; ((dtmBirth.getMonth() + <span class="number">1</span>) == <span class="built_in">Number</span>(arrSplit[<span class="number">3</span>])) &amp;&amp; (dtmBirth.getDate() == <span class="built_in">Number</span>(arrSplit[<span class="number">4</span>]));</span><br><span class="line">    <span class="keyword">if</span> (!bGoodDay) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//将15位身份证转成18位</span></span><br><span class="line">      <span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">      <span class="keyword">var</span> arrInt = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">var</span> arrCh = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> nTemp = <span class="number">0</span>,</span><br><span class="line">        i;</span><br><span class="line">      personnumber = personnumber.substr(<span class="number">0</span>, <span class="number">6</span>) + <span class="string">&#x27;19&#x27;</span> + personnumber.substr(<span class="number">6</span>, personnumber.length - <span class="number">6</span>);</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">        nTemp += personnumber.substr(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">      &#125;</span><br><span class="line">      personnumber += arrCh[nTemp % <span class="number">11</span>];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">18</span>) &#123;</span><br><span class="line">    re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)([0-9]|X)$/</span>);</span><br><span class="line">    <span class="keyword">var</span> arrSplit = personnumber.match(re);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查生日日期是否正确</span></span><br><span class="line">    <span class="keyword">var</span> dtmBirth = <span class="keyword">new</span> <span class="built_in">Date</span>(arrSplit[<span class="number">2</span>] + <span class="string">&quot;/&quot;</span> + arrSplit[<span class="number">3</span>] + <span class="string">&quot;/&quot;</span> + arrSplit[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">var</span> bGoodDay;</span><br><span class="line">    bGoodDay = (dtmBirth.getFullYear() == <span class="built_in">Number</span>(arrSplit[<span class="number">2</span>])) &amp;&amp; ((dtmBirth.getMonth() + <span class="number">1</span>) == <span class="built_in">Number</span>(arrSplit[<span class="number">3</span>])) &amp;&amp; (dtmBirth.getDate() == <span class="built_in">Number</span>(arrSplit[<span class="number">4</span>]));</span><br><span class="line">    <span class="keyword">if</span> (!bGoodDay) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//检验18位身份证的校验码是否正确。</span></span><br><span class="line">      <span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">      <span class="keyword">var</span> valnum;</span><br><span class="line">      <span class="keyword">var</span> arrInt = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">var</span> arrCh = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> nTemp = <span class="number">0</span>,</span><br><span class="line">        i;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">        nTemp += personnumber.substr(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">      &#125;</span><br><span class="line">      valnum = arrCh[nTemp % <span class="number">11</span>];</span><br><span class="line">      <span class="keyword">if</span> (valnum != personnumber.substr(<span class="number">17</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/tags/JavaScript/"/>
    
    <category term="正则表达式" scheme="https://aqingya.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>react函数式组件传值之父传子</title>
    <link href="https://aqingya.cn/articl/684ad59d.html"/>
    <id>https://aqingya.cn/articl/684ad59d.html</id>
    <published>2022-12-20T08:34:21.000Z</published>
    <updated>2022-12-20T08:37:41.386Z</updated>
    
    <content type="html"><![CDATA[<p>我们在引入子组件时，子组件的名字一定要大写，否则会报错（这是个babel编译机制问题）。那么，父组件在引入子组件后，如何传值呢？首先，父组件要将传递的参数写到子组件标签上，然后，子组件通过props接收父组件传过来的所有参数。</p><p>组件Home向子组件Child传递count值，子组件通过props拿到此值并渲染出来。</p><p>父组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./component/child&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Home: React.FC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState&lt;number&gt;(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前数字：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">          setCount(count + 1);</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      &gt;</span></span><br><span class="line"><span class="xml">        数字递增</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">type selfProps = &#123;</span><br><span class="line">  <span class="attr">count</span>: number;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Child: React.FC&lt;selfProps&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count &#125; = props; <span class="comment">//解构赋值</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>从父组件传下来的数字是：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure><p><img src="https://qny.aqingya.cn/img/fd53848ee47f657a15166b67b76f0920.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们在引入子组件时，子组件的名字一定要大写，否则会报错（这是个babel编译机制问题）。那么，父组件在引入子组件后，如何传值呢？首先，父组件要将传递的参数写到子组件标签上，然后，子组件通过props接收父组件传过来的所有参数。&lt;/p&gt;
&lt;p&gt;组件Home向子组件Child传</summary>
      
    
    
    
    <category term="React" scheme="https://aqingya.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://aqingya.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react函数式组件传值之子传父</title>
    <link href="https://aqingya.cn/articl/623d1cfb.html"/>
    <id>https://aqingya.cn/articl/623d1cfb.html</id>
    <published>2022-12-20T08:31:15.000Z</published>
    <updated>2022-12-20T08:37:41.385Z</updated>
    
    <content type="html"><![CDATA[<p>父组件需要向子组件传递一个函数，然后，子组件通过props获取函数并附上参数，最后，父组件通过函数拿到子组件传递的值。</p><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./component/child&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Home: React.FC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [parentCount, setParentCountt] = useState&lt;number&gt;(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> getChildCount = <span class="function">(<span class="params">val: number</span>) =&gt;</span> &#123;</span><br><span class="line">    setParentCountt(val);</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件传过来的数字：&#123;parentCount&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">getCount</span>=<span class="string">&#123;getChildCount&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">type selfProps = &#123;</span><br><span class="line">  <span class="attr">getCount</span>: <span class="built_in">Function</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Child: React.FC&lt;selfProps&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getCount &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState&lt;number&gt;(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">(<span class="params">val: number</span>) =&gt;</span> &#123;</span><br><span class="line">    setCount(val);</span><br><span class="line">    getCount(val);</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>数字：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> addCount(count + 1)&#125;&gt;数字递增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure><p><img src="https://qny.aqingya.cn/img/caeb0192cfa45a742eeffd7ee47e3b52.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;父组件需要向子组件传递一个函数，然后，子组件通过props获取函数并附上参数，最后，父组件通过函数拿到子组件传递的值。&lt;/p&gt;
&lt;p&gt;父组件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="React" scheme="https://aqingya.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://aqingya.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序版本版本检查更新</title>
    <link href="https://aqingya.cn/articl/a15cd461.html"/>
    <id>https://aqingya.cn/articl/a15cd461.html</id>
    <published>2022-12-15T02:03:03.000Z</published>
    <updated>2022-12-15T02:15:07.026Z</updated>
    
    <content type="html"><![CDATA[<p>官网api： <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html">https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html</a> </p><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">onShow : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.checkForUpdate()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 检查版本更新</span></span><br><span class="line"><span class="function"><span class="title">checkForUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.getUpdateManager().onCheckForUpdate(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求版本更新信息&#x27;</span>,res);</span><br><span class="line">    <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">      <span class="comment">// 新版本下载成功</span></span><br><span class="line">      wx.getUpdateManager().onUpdateReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;新版本已经准备好，点击确定重启小程序&#x27;</span>,</span><br><span class="line">          <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">              <span class="comment">//准备完毕 强制更新</span></span><br><span class="line">              wx.getUpdateManager().applyUpdate()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 新版本下载失败</span></span><br><span class="line">  wx.getUpdateManager().onUpdateFailed(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;新版本下载失败&#x27;</span>,res)</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://qny.aqingya.cn/img/20221215101414.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官网api： &lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html&quot;&gt;https://developers.weixin.qq.c</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://aqingya.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://aqingya.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows下将前端vue项目打包部署到Nginx中</title>
    <link href="https://aqingya.cn/articl/1f1fdea8.html"/>
    <id>https://aqingya.cn/articl/1f1fdea8.html</id>
    <published>2022-12-15T01:55:09.000Z</published>
    <updated>2022-12-15T01:59:34.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="（一）将前端-vue-项目部署到-Nginx"><a href="#（一）将前端-vue-项目部署到-Nginx" class="headerlink" title="（一）将前端 vue 项目部署到 Nginx"></a>（一）将前端 vue 项目部署到 Nginx</h2><p>1、官网下载 nginx 稳定版：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br>（如下载到 E:\nginx\nginx-1.18.0 目录中）</p><p><img src="https://qny.aqingya.cn/img/20221215095634.png"></p><p>2、双击运行 nginx，然后通过查看任务管理器，确定 nginx 是否已经执行。</p><p><img src="https://qny.aqingya.cn/img/20221215095649.png"></p><p><strong>注意：nginx 默认端口号是80，如果端口号被占用，需要修改。</strong></p><p>3、将前端 <code>npm run build</code> 打包后的 <code>dist</code> 文件夹复制到 <code>html</code>文件夹中</p><p><img src="https://qny.aqingya.cn/img/20221215095713.png"></p><p>4、修改 E:\nginx\nginx-1.18.0\conf\nginx.conf 文件</p><p>（1）将 <code>#user nobody</code> 修改为 <code>#user root</code></p><p><img src="https://qny.aqingya.cn/img/20221215095731.png"></p><p>2）修改 server<br>root 默认是 html，这里改为 html/dist ，nginx 会在 dist 文件夹中找到 index.html打开。<br>（如果80端口号被占用，此处将端口号80改为 88或者其他）</p><p><img src="https://qny.aqingya.cn/img/20221215095744.png"></p><p>修改完成之后，重新启动 nginx。<br>在浏览器中输入 localhost:80 或者 127.0.0.1:80 即可打开项目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;（一）将前端-vue-项目部署到-Nginx&quot;&gt;&lt;a href=&quot;#（一）将前端-vue-项目部署到-Nginx&quot; class=&quot;headerlink&quot; title=&quot;（一）将前端 vue 项目部署到 Nginx&quot;&gt;&lt;/a&gt;（一）将前端 vue 项目部署到 Ngi</summary>
      
    
    
    
    <category term="前端库" scheme="https://aqingya.cn/categories/%E5%89%8D%E7%AB%AF%E5%BA%93/"/>
    
    
    <category term="Vue" scheme="https://aqingya.cn/tags/Vue/"/>
    
    <category term="Nginx" scheme="https://aqingya.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序版本检查更新</title>
    <link href="https://aqingya.cn/articl/588b8755.html"/>
    <id>https://aqingya.cn/articl/588b8755.html</id>
    <published>2022-12-08T08:48:40.000Z</published>
    <updated>2022-12-08T08:50:46.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序版本检查更新"><a href="#微信小程序版本检查更新" class="headerlink" title="微信小程序版本检查更新"></a>微信小程序版本检查更新</h2><p>官网api： <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html">https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html</a> </p><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">onShow : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.checkForUpdate()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 检查版本更新</span></span><br><span class="line"><span class="function"><span class="title">checkForUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  wx.getUpdateManager().onCheckForUpdate(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求版本更新信息&#x27;</span>,res);</span><br><span class="line">    <span class="keyword">if</span> (res.hasUpdate) &#123;</span><br><span class="line">      <span class="comment">// 新版本下载成功</span></span><br><span class="line">      wx.getUpdateManager().onUpdateReady(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;新版本已经准备好，点击确定重启小程序&#x27;</span>,</span><br><span class="line">          <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">              <span class="comment">//准备完毕 强制更新</span></span><br><span class="line">              wx.getUpdateManager().applyUpdate()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 新版本下载失败</span></span><br><span class="line">  wx.getUpdateManager().onUpdateFailed(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;新版本下载失败&#x27;</span>,res)</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://qny.aqingya.cn/img/20221208165009.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;微信小程序版本检查更新&quot;&gt;&lt;a href=&quot;#微信小程序版本检查更新&quot; class=&quot;headerlink&quot; title=&quot;微信小程序版本检查更新&quot;&gt;&lt;/a&gt;微信小程序版本检查更新&lt;/h2&gt;&lt;p&gt;官网api： &lt;a href=&quot;https://developers</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://aqingya.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="微信小程序" scheme="https://aqingya.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>es6数组去重的三种方法</title>
    <link href="https://aqingya.cn/articl/b0b20e6d.html"/>
    <id>https://aqingya.cn/articl/b0b20e6d.html</id>
    <published>2022-12-01T11:49:04.000Z</published>
    <updated>2022-12-01T11:52:39.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-es6的三种方法"><a href="#1-es6的三种方法" class="headerlink" title="1.es6的三种方法"></a>1.<a href="https://so.csdn.net/so/search?q=es6&spm=1001.2101.3001.7020">es6</a>的三种方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1)拓展运算符 + new Set 方法</span></span><br><span class="line"><span class="keyword">let</span> narr1 = [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)Array.from + new Set 方法</span></span><br><span class="line"><span class="keyword">let</span> narr2 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)new Map() + filter方法</span></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> narr3 = arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !myMap.has(item) &amp;&amp; myMap.set(item, <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>相关es6知识点</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map">new Map()</a></li><li><a href="https://blog.csdn.net/yiyueqinghui/article/details/107773347">new Set()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.form()</a></li></ol></blockquote><h2 id="2-for循环的一种方法"><a href="#2-for循环的一种方法" class="headerlink" title="2.for循环的一种方法"></a>2.for循环的一种方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (4)for循环方法</span></span><br><span class="line"><span class="keyword">let</span> narr2 = []</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(narr2.indexOf(item) == -<span class="number">1</span>) &#123;</span><br><span class="line">    narr2.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-es6的三种方法&quot;&gt;&lt;a href=&quot;#1-es6的三种方法&quot; class=&quot;headerlink&quot; title=&quot;1.es6的三种方法&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;https://so.csdn.net/so/search?q=es6&amp;spm=1001.</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://aqingya.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React hook中useState数组对象更新机制</title>
    <link href="https://aqingya.cn/articl/c864349b.html"/>
    <id>https://aqingya.cn/articl/c864349b.html</id>
    <published>2022-11-28T12:24:49.000Z</published>
    <updated>2022-11-28T12:32:49.238Z</updated>
    
    <content type="html"><![CDATA[<p>react组件的更新机制只对数组进行的一个浅对比，也就是说没有改变它的引用地址，所以我们要改变数组时应该进行一次拷贝。</p><p>当数组和对象只有一级时，展开运算符和一些库函数复制方法都是深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrCopy = arr.slice();</span><br><span class="line"><span class="keyword">const</span> objCopy = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br></pre></td></tr></table></figure><p><strong>数组中使用：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [arr, setArr] = useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState();</span><br><span class="line">  <span class="keyword">const</span> change = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// setArr((pre) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   if (pre.length == 0) return [];</span></span><br><span class="line">    <span class="comment">//   pre[0] = 100;</span></span><br><span class="line">    <span class="comment">//   let newArr = pre.slice();</span></span><br><span class="line">    <span class="comment">//   return newArr;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> newArr = arr.slice();</span><br><span class="line">    setArr(newArr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deleteItem = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    setArr(<span class="function">(<span class="params">pre</span>) =&gt;</span> &#123;</span><br><span class="line">      pre.splice(index, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">let</span> newArr = pre.slice();</span><br><span class="line">      <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> addItem = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> inputDom = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;inputId&#x27;</span>);</span><br><span class="line">    setArr(<span class="function">(<span class="params">pre</span>) =&gt;</span> &#123;</span><br><span class="line">      pre.push(inputDom.value);</span><br><span class="line">      <span class="keyword">let</span> newArr = pre.slice();</span><br><span class="line">      <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">  <span class="keyword">let</span> arr2 = arr1.slice();</span><br><span class="line">  arr2.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr1, arr2);<span class="comment">// 可以发现修改拷贝之后的arr2并不影响arr1</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;change&#125;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">id</span>=<span class="string">&#x27;inputId&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> addItem(value)&#125;&gt;add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">          arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">            return (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item&#125;&#123;index&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> deleteItem(index)&#125;&gt;delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            )</span></span><br><span class="line"><span class="xml">          &#125;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><strong>对象中使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [obj,setObj]=useState(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;xiaowang&#x27;</span></span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;10&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新值</span></span><br><span class="line"><span class="keyword">let</span> newObj = &#123;...obj,age=<span class="string">&#x27;18&#x27;</span>&#125;</span><br><span class="line">setObj(newObj);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;react组件的更新机制只对数组进行的一个浅对比，也就是说没有改变它的引用地址，所以我们要改变数组时应该进行一次拷贝。&lt;/p&gt;
&lt;p&gt;当数组和对象只有一级时，展开运算符和一些库函数复制方法都是深拷贝&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="React" scheme="https://aqingya.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://aqingya.cn/tags/React/"/>
    
  </entry>
  
</feed>
